{"codes": ["private void handleAdjustPublishRate(Context ctx) throws Exception {\n    Double publishRate = mapper.readValue(ctx.body(), Double.class);", "private int getFileCount(File dir) {\n    if (dir.isDirectory()) {\n        String[] children = dir.list();", "@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    if (log.isDebugEnabled()) {", "protected static <T extends Id> T readOrGenerate(SimpleStorage<T> storage, InternalLog log, Class<T> type, Function<UUID, ? extends T> creator, Supplier<UUID> uuid) {\n    T myself;\n    try {\n        if (storage.exists()) {\n            myself = storage.readState();\n            if (myself == null) {\n                throw new IllegalStateException(String.format(\"%s storage was found on disk, but it could not be read correctly\", type.getSimpleName()));\n            } else {", "    } catch (IOException e) {\n        throw new SenderException(\"Could not read output of command [\" + getCommandLine(command) + \"]\", e);\n    }\n    // Read the errors of the process\n    try {\n        errors = readStream(process.getErrorStream());\n    } catch (IOException e) {\n        throw new SenderException(\"Could not read errors of command [\" + getCommandLine(command) + \"]\", e);\n    }\n    // Throw an exception if the command returns an error exit value\n    int exitValue = process.exitValue();\n    if (exitValue != 0) {\n        throw new SenderException(\"Nonzero exit value [\" + exitValue + \"] for command  [\" + getCommandLine(command) + \"], process output was [\" + output + \"], error output was [\" + errors + \"]\");\n    }\n    if (StringUtils.isNotEmpty(errors)) {", "@Override\npublic void write(int i) throws IOException {\n    StringBuilder sb = local.get();\n    if (sb == null) {\n        sb = new StringBuilder();\n    }\n    //look for LF\n    if (i == 10) {", "    GroupTopicPartition key = (GroupTopicPartition) baseKey.key();\n    if (data.value() == null || data.value().length == 0) {\n        log.warn(\"Value is null or Empty for: {}\", key.toString());\n        return;\n    }\n    OffsetAndMetadata offsetAndMetadata = GroupMetadataManager.readOffsetMessageValue(ByteBuffer.wrap(data.value()));\n    String group = key.group();\n    int partitionNo = key.topicPartition().partition();\n    String topic = key.topicPartition().topic();\n    long offset = offsetAndMetadata.offset();\n    if (!(shouldCollectEvent(topic) && shouldCollectConsumer(group))) {\n        return;\n    }\n    Partition oldPartition = (Partition) topicsMap.executeOnKey(topic, new ConsumerOffsetChangeEntryProcessor(group, partitionNo, offset));\n    if (oldPartition != null) {", "@Override\npublic void resultReceived(IPendingServiceCall call) {", "@Override\npublic void destroy() {\n    // terminate any active websocket sessions\n    SessionManager sm = XMPPServer.getInstance().getSessionManager();\n    for (ClientSession session : sm.getSessions()) {\n        if (session instanceof LocalSession) {\n            Object ws = ((LocalSession) session).getSessionData(\"ws\");\n            if (ws != null && (Boolean) ws) {", "@CheckForNull\nprivate BindingConfigChangedEvent bind(String configurationScopeId, BindingConfigurationDto bindingConfiguration) {\n    var previousBindingConfig = repository.getBindingConfiguration(configurationScopeId);\n    if (previousBindingConfig == null) {", "private void getCustomerOrders() throws AxisFault, XPathExpressionException {\n    OMElement payload = fac.createOMElement(\"customerOrders\", omNs);\n    OMElement result = new AxisServiceClient().sendReceive(payload, getServiceUrlHttp(serviceName), \"customerOrders\");\n    Assert.assertNotNull(result, \"Response message null \");", "public static String runAndWaitNoLog(File folder, String... command) {\n    String output = \"\";\n    try {\n        Process process = new ProcessBuilder(command).directory(folder).redirectErrorStream(false).start();\n        process.waitFor();\n        output = IOUtils.toString(process.getInputStream(), UTF_8);\n    } catch (Exception e) {\n        if (log.isDebugEnabled()) {", "/**\n * Clientside test\n */\n@Test\npublic void testOutboundHandshake() {\n    log.info(\"\\ntestOutboundHandshake\");\n    OutboundHandshake out = new OutboundHandshake();\n    // set the handshake type\n    out.setHandshakeType(RTMPConnection.RTMP_NON_ENCRYPTED);\n    // called initially with null input which triggers creation of C1\n    //IoBuffer C1 = hs.doHandshake(null);", "/**\n * Creates a cached response. <br />\n * If no cached data is found, the responseObject is\n * returned. <br />\n * If cached data is found, <code>null</code> is returned instead.\n *\n * @param req - original request\n * @param etagFromResources - new etags\n * @param responseObject - the response object\n * @return\n */\nprivate JsonObject makeCachedResponse(HttpServerRequest req, String etagFromResources, JsonObject responseObject) {\n    JsonObject result = responseObject;\n    if (log.isTraceEnabled()) {\n        log.trace(\"Header from request:  {}\", req.headers().get(IF_NONE_MATCH_HEADER));", "@Override\npublic void handleError(Throwable t) {\n    if (t instanceof UndeclaredThrowableException) {\n        Throwable source = ((UndeclaredThrowableException) t).getUndeclaredThrowable();\n        if (source instanceof OutOfMemoryError) {", "private void registerNatsEnvironment(GenericContainer<?> natsContainer, ConfigurableEnvironment environment, NatsProperties properties) {\n    Integer clientMappedPort = natsContainer.getMappedPort(properties.getClientPort());\n    Integer httpMonitorMappedPort = natsContainer.getMappedPort(properties.getHttpMonitorPort());\n    Integer routeConnectionsMappedPort = natsContainer.getMappedPort(properties.getRouteConnectionsPort());\n    String host = natsContainer.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.nats.host\", host);\n    map.put(\"embedded.nats.port\", clientMappedPort);\n    map.put(\"embedded.nats.httpMonitorPort\", httpMonitorMappedPort);\n    map.put(\"embedded.nats.routeConnectionsPort\", routeConnectionsMappedPort);", "// Implementation methods\n// -------------------------------------------------------------------------\nprotected void registerMBean(ObjectName name) {\n    if (name != null) {\n        try {\n            AnnotatedMBean.registerMBean(managementContext, mbean, name);\n        } catch (Throwable e) {", "@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    String message = formattedMessages ? DocumentedUtils.extractFormattedMessage(method, args) : DocumentedUtils.extractMessage(method);\n    if (method.getAnnotation(Warning.class) == null) {\n        errors.incrementAndGet();", "private void stopDatabase(StandaloneDatabaseContext context) {\n    var namedDatabaseId = context.database().getNamedDatabaseId();\n    try {", "private boolean accept(InputFile indexedFile) {\n    // InputFileFilter extensions. Might trigger generation of metadata\n    for (InputFileFilter filter : filters) {\n        if (!filter.accept(indexedFile)) {", "@Test\npublic void testValidate() {\n    log.info(\"\\ntestValidate\");\n    // client side handshake handler\n    OutboundHandshake out = new OutboundHandshake();\n    // set the handshake type\n    out.setHandshakeType(RTMPConnection.RTMP_NON_ENCRYPTED);\n    // try SO12\n    IoBuffer S0S1S2 = IoBuffer.allocate(3073);\n    S0S1S2.put(serverS0S1S2part1);\n    S0S1S2.put(serverS0S1S2part2);\n    S0S1S2.flip();\n    // strip the 03 type byte\n    S0S1S2.get();", "public Pair<String, String> generateNewDN(String baseDn) {\n    final String inum = generateInum();\n    final StringBuilder dnSb = new StringBuilder(\"inum=\");\n    dnSb.append(inum).append(\",\").append(baseDn);\n    final String dn = dnSb.toString();", "public static Server create(Path socketPath) throws IOException {\n    Files.createDirectories(socketPath.getParent());\n    var address = UnixDomainSocketAddress.of(socketPath);\n    ServerSocketChannel ch = null;\n    try {\n        ch = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n        ch.bind(address);", "@Override\npublic void failToRecoverTransactionsAfterCommit(Throwable t, LogEntryCommit commitEntry, LogPosition recoveryToPosition) {", "public void store(ServerInfo serverInfo) {\n    var serverInfoFilePath = getServerInfoFilePath();\n    FileUtils.mkdirs(serverInfoFilePath.getParent());\n    var serverInfoToStore = adapt(serverInfo);", "@Override\npublic void onWSMessage(WSMessage message) {\n    // assume we have text\n    String msg = new String(message.getPayload().array());", "public byte[] encrypt(byte[] cleartext, String algorithm, String javaSecurityAPIProvider) throws CryptoException {\n    try {\n        Cipher cipher;\n        if (StringUtils.isBlank(javaSecurityAPIProvider)) {\n            cipher = Cipher.getInstance(algorithm);\n        } else {\n            cipher = Cipher.getInstance(algorithm, javaSecurityAPIProvider);\n        }\n        Certificate certificate = getCertificateFromStore();\n        if (log.isDebugEnabled()) {\n            log.debug(\"Certificate used for encrypting : \" + certificate);\n        }\n        cipher.init(Cipher.ENCRYPT_MODE, certificate.getPublicKey());\n        byte[] ciphertext = cipher.doFinal(cleartext);\n        if (log.isDebugEnabled()) {", "private void registrationFailed(Throwable cause) {", "@Override\npublic void warn(Throwable cause) {", "@Override\npublic void resourceRemoved(String resourceUri) {\n    if (configResourceUri() != null && configResourceUri().equals(resourceUri)) {", "/**\n * Creates a large byte buffer and fills it with char 'X' except for the\n * last byte, it gets value 0x0 assigned.\n *\n * @param size - the size of the array to be created.\n * @return\n */\nprotected byte[] createLargeByteBuffer(int size) {\n    byte[] buffer = new byte[size];\n    for (int i = 0; i < size; i++) {\n        buffer[i] = (char) 'X';\n    }\n    //insert trailing 0x0\n    buffer[size - 1] = 0;", "@Bean(name = BEAN_NAME_EMBEDDED_CASSANDRA, destroyMethod = \"stop\")\npublic CassandraContainer cassandra(ConfigurableEnvironment environment, CassandraProperties properties, Optional<Network> network) throws Exception {\n    CassandraContainer cassandra = new CassandraContainer<>(ContainerUtils.getDockerImageName(properties)).withExposedPorts(properties.getPort());\n    network.ifPresent(cassandra::withNetwork);\n    cassandra = (CassandraContainer) configureCommonsAndStart(cassandra, properties, log);\n    initKeyspace(properties, cassandra);\n    Map<String, Object> cassandraEnv = registerCassandraEnvironment(environment, cassandra, properties);", "@Override\npublic BlockStore getGengsisBlock() {\n    //if(1==1)return null;\n    BlockStore gengsisBlock = new BlockStore(this, Hex.decode(\"\"));\n    Sha256Hash merkleHash = gengsisBlock.getBlock().buildMerkleHash();\n    if (log.isDebugEnabled()) {", "private P384KeyPair createAndStoreNewKeyPair(char[] passphrase, Path p12File) throws IOException {\n    var keyPair = P384KeyPair.generate();\n    var tmpFile = p12File.resolveSibling(p12File.getFileName().toString() + \".tmp\");\n    if (Files.exists(tmpFile)) {", "    // Get CSV from Yahoo\n    log.info(\"Sending request: \" + url);\n    URL request = new URL(url);\n    RedirectableRequest redirectableRequest = new RedirectableRequest(request, 5);\n    redirectableRequest.setConnectTimeout(YahooFinance.CONNECTION_TIMEOUT);\n    redirectableRequest.setReadTimeout(YahooFinance.CONNECTION_TIMEOUT);\n    Map<String, String> requestProperties = new HashMap<String, String>();\n    requestProperties.put(\"Cookie\", CrumbManager.getCookie());\n    URLConnection connection = redirectableRequest.openConnection(requestProperties);\n    InputStreamReader is = new InputStreamReader(connection.getInputStream());\n    BufferedReader br = new BufferedReader(is);\n    // skip the first line\n    br.readLine();\n    // Parse CSV\n    for (String line = br.readLine(); line != null; line = br.readLine()) {", "/**\n * \u9488\u5bf9 redis \u6570\u636e\u5931\u6548\u4e8b\u4ef6\uff0c\u8fdb\u884c\u6570\u636e\u5904\u7406\n *\n * @param message key\n * @param pattern pattern\n */\n@Override\npublic void onMessage(Message message, byte[] pattern) {\n    // \u83b7\u53d6\u5230\u5931\u6548\u7684 key\n    String expiredKey = message.toString();\n    if (expiredKey.contains(JwtConstants.LAST_ONLINE)) {\n        String account = expiredKey.replace(JwtConstants.LAST_ONLINE, \"\");", "/**\n * Run a simple command that should return a single line on stdout\n * @param command\n * @return\n */\n@CheckForNull\nprivate String runSimpleCommand(Command command) {\n    List<String> stdOut = new ArrayList<>();\n    List<String> stdErr = new ArrayList<>();", "// doc comment inherited from LogWriter\npublic void logRequest(Logger log, Object command) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"google.storage\")\nToxiproxyContainer.ContainerProxy googleStorageContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_GOOGLE_STORAGE_SERVER) GenericContainer<?> storageServer, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(storageServer, StorageProperties.PORT);\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.google.storage.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.google.storage.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.google.storage.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedGoogleStorageToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "private void checkStaleTerminatedTransaction(MonitoredTransaction transaction, long nowNanos, long terminationTimeoutNanos) {\n    transaction.terminationMark().ifPresent(mark -> {\n        if (mark.isMarkedAsStale()) {\n            return;\n        }\n        final var nanosSinceTermination = nowNanos - mark.getTimestampNanos();\n        if (nanosSinceTermination >= terminationTimeoutNanos) {\n            log.warn(\"Transaction %s has been marked for termination for %d seconds; it may have been leaked. %s\", transaction.getIdentifyingDescription(), TimeUnit.NANOSECONDS.toSeconds(nanosSinceTermination), buildTraceOrHelpMessage(transaction.transactionInitialisationTrace()));\n            mark.markAsStale();\n        }\n    });", "public CarbonServerConfigurationService getServerConfigurationService() {\n    if (this.serverConfigurationService == null) {\n        String msg = \"Before activating Carbon Core bundle, an instance of \" + \"ServerConfigurationService should be in existance\";", "public void reportTotalDataSize() {\n    double totalDataSizeGB = (double) this.totalDataSize / 1024.0 / 1024.0 / 1024.0;", "@Override\npublic void recoveryCleanupStarted(Path indexFile, IndexDescriptor index) {", "    if (clazz == null) {\n        if (ClusterManager.isClusteringEnabled()) {\n            Log.debug(\"Clustering is enabled. Falling back to non-cached provider\");\n            clazz = DefaultPubSubPersistenceProvider.class;\n        } else {\n            clazz = CachingPubsubPersistenceProvider.class;\n        }\n    }\n    // Check if we need to reset the provider class\n    if (provider == null || !clazz.equals(provider.getClass())) {\n        if (provider != null) {\n            provider.shutdown();\n            provider = null;\n        }\n        try {", "@Test(timeout = 60000)\npublic void tesIndividualAcksWithClosedConsumerAndAuditSync() throws Exception {\n    produceSomeMessages(MSG_COUNT);\n    QueueViewMBean queueView = getProxyToQueue(getDestinationName());\n    assertEquals(MSG_COUNT, queueView.getQueueSize());\n    connection = createConnection();\n    Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);\n    Queue queue = session.createQueue(getDestinationName());\n    MessageConsumer consumer = session.createConsumer(queue);\n    connection.start();\n    // Consume all messages with no ACK\n    for (int i = 0; i < MSG_COUNT; ++i) {\n        Message message = consumer.receive(1000);\n        assertNotNull(message);", "public void update(String projectKey, UnaryOperator<AnalyzerConfiguration> updater) {\n    var projectFilePath = getAnalyzerConfigFilePath(projectKey);\n    FileUtils.mkdirs(projectFilePath.getParent());\n    rwLock.write(() -> {\n        Sonarlint.AnalyzerConfiguration config;\n        try {\n            config = readConfiguration(projectFilePath);\n        } catch (StorageException e) {\n            LOG.warn(\"Unable to read storage. Creating a new one.\", e);\n            config = Sonarlint.AnalyzerConfiguration.newBuilder().build();\n        }\n        writeToFile(adapt(updater.apply(adapt(config))), projectFilePath);", "@Override\npublic void doParse(InputStream in, String baseUri, RDFNotation notation, boolean keepBNode, RDFCallback callback) throws ParserException {\n    try {\n        // create a temp\n        Path tempFile = Files.createTempFile(\"hdtjava-reader\", \".hdt\");", "private void getOffices() throws AxisFault, XPathExpressionException {\n    OMElement payload = fac.createOMElement(\"listOffices\", omNs);\n    OMElement result = new AxisServiceClient().sendReceive(payload, getServiceUrlHttp(serviceName), \"listOffices\");\n    Assert.assertNotNull(result, \"Response message null \");", "    if (StringUtils.isEmpty(alias)) {\n        aliasId.requestFocus();\n        DailogUtil.showTipDailogCenter(\"\u522b\u540d\u4e0d\u80fd\u4e3a\u7a7a\", getThisStage());\n        return;\n    }\n    //\u4fee\u6539\u5bc6\u7801\u5e76\u5224\u65ad\u7ed3\u679c\n    AccountKit accountKit = InchainInstance.getInstance().getAccountKit();\n    Result result = accountKit.updateAlias(alias);\n    if (result.isSuccess()) {\n        DailogUtil.showTipDailogCenter(result.getMessage(), getThisStage());\n        resetAndclose();\n        if (callback != null) {\n            callback.ok(null);\n        }\n    } else {", "@Override\npublic Response toResponse(Exception e) {\n    if (e instanceof WebApplicationException) {\n        return ((WebApplicationException) e).getResponse();\n    }", "public void detect(@Nullable Path configuredNodejsPath) {\n    detectedNodePath = locateNode(configuredNodejsPath);\n    if (detectedNodePath != null) {\n        LOG.debug(\"Checking node version...\");\n        var command = Command.create(detectedNodePath.toString()).addArgument(\"-v\");\n        var nodeVersionStr = runSimpleCommand(command);\n        if (nodeVersionStr != null) {\n            var matcher = NODEJS_VERSION_PATTERN.matcher(nodeVersionStr);\n            if (matcher.matches()) {\n                var version = matcher.group(1);\n                nodeJsVersion = Version.create(version);\n                LOG.debug(\"Detected node version: {}\", nodeJsVersion);\n            } else {", "protected boolean isReady() {\n    String commandName = getContainerType();\n    String containerId = waitStrategyTarget.getContainerId();\n    String[] checkCommand = getCheckCommand();", "private Object doEvaluate(final String expression) throws Exception {\n    assert expression != null;", "@Override\npublic User mapUser(OAuth2UserRequest userRequest, OAuth2User oAuth2User) {\n    if (log.isDebugEnabled()) {", "@Nullable\npublic static SecurityPlan forPlan(@Nonnull final String apiId, @Nonnull Plan plan, @Nonnull PolicyManager policyManager, @Nonnull ExecutionPhase executionPhase) {\n    final SecurityPolicy policy = SecurityPolicyFactory.forPlan(apiId, plan, policyManager, executionPhase);\n    if (policy != null) {\n        return new SecurityPlan(plan.getId(), policy, plan.getSelectionRule());\n    }", "private void registerNeo4jEnvironment(Neo4jContainer neo4j, ConfigurableEnvironment environment, Neo4jProperties properties) {\n    Integer httpsPort = neo4j.getMappedPort(properties.httpsPort);\n    Integer httpPort = neo4j.getMappedPort(properties.httpPort);\n    Integer boltPort = neo4j.getMappedPort(properties.boltPort);\n    String host = neo4j.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.neo4j.httpsPort\", httpsPort);\n    map.put(\"embedded.neo4j.httpPort\", httpPort);\n    map.put(\"embedded.neo4j.boltPort\", boltPort);\n    map.put(\"embedded.neo4j.host\", host);\n    map.put(\"embedded.neo4j.password\", properties.getPassword());\n    map.put(\"embedded.neo4j.user\", properties.getUser());", "public static SecurityPolicy forPlan(final String apiId, final Plan plan, final PolicyManager policyManager, final ExecutionPhase executionPhase) {\n    PlanSecurity planSecurity = plan.getSecurity();\n    final String security = planSecurity.getType();\n    if (security == null) {\n        return null;\n    }\n    String policyName = security.toLowerCase().replaceAll(\"_\", \"-\");\n    final Policy policy = policyManager.create(executionPhase, new PolicyMetadata(policyName, planSecurity.getConfiguration()));\n    if (policy instanceof SecurityPolicy) {\n        return (SecurityPolicy) policy;\n    }", "private void addEmployeeBatchRequest() throws AxisFault, XPathExpressionException {\n    OMElement payload = fac.createOMElement(\"addEmployee_batch_req\", omNs);\n    for (int i = 10; i < 36; i++) {\n        OMElement batchRequest = fac.createOMElement(\"addEmployee\", omNs);\n        OMElement empNo = fac.createOMElement(\"employeeNumber\", omNs);\n        empNo.setText(i + \"\");\n        batchRequest.addChild(empNo);\n        OMElement email = fac.createOMElement(\"email\", omNs);\n        email.setText(\"testemail@wso2.com\");\n        batchRequest.addChild(email);\n        payload.addChild(batchRequest);\n    }\n    if (log.isDebugEnabled()) {", "private InterruptedIOException dealWithInterrupt(InterruptedException e) {\n    if (LOG.isDebugEnabled()) {", "public static String getSessionId() {\n    //random int from 1 - 100000\n    int part1 = rnd.nextInt(99999) + 1;\n    //thread-safe \"long\" part\n    long part2 = ThreadLocalRandom.current().nextLong();\n    //current time in millis\n    long part3 = System.currentTimeMillis();\n    //generate uuid-type id\n    String sessionId = createHash(part1 + \"-\" + part2 + \"-\" + part3);", "private Stream<Settings> tryLoad(Path path) {", "        case \"COUNTRY\":\n            mapKey = MAP_TYPES.get(\"country\") + \":\" + key;\n            break;\n        case \"PUBLISHING_COUNTRY\":\n            mapKey = MAP_TYPES.get(\"publishingCountry\") + \":\" + key;\n            break;\n        default:\n            mapKey = ALL_MAP_KEY;\n    }\n    Capabilities.CapabilitiesBuilder builder = Capabilities.CapabilitiesBuilder.newBuilder();\n    DatedVectorTile west = tileResource.getTile(0, 0, 0, mapKey, null, \"EPSG:4326\", null, null, true, null, 0, 0);\n    DatedVectorTile east = tileResource.getTile(0, 1, 0, mapKey, null, \"EPSG:4326\", null, null, true, null, 0, 0);\n    builder.collect(west.tile, ZOOM_0_WEST_NW, ZOOM_0_WEST_SE, west.date);\n    builder.collect(east.tile, ZOOM_0_EAST_NW, ZOOM_0_EAST_SE, east.date);\n    Capabilities capabilities = builder.build();", "void exercise(WebDriver driver, String sutUrl, String expectedTitleContains) throws Exception {\n    driver.get(sutUrl);\n    Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(30));\n    wait.until(d -> d.getTitle().contains(expectedTitleContains));\n    URL dockerSessionUrl = wdm.getDockerNoVncUrl(driver);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"minio\")\nToxiproxyContainer.ContainerProxy minioContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(MINIO_BEAN_NAME) GenericContainer<?> minio, ConfigurableEnvironment environment, MinioProperties properties) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(minio, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.minio.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.minio.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.minio.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedMinioToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Override\npublic void onWebSocketClose(int arg0, String arg1) {\n    try {\n        if (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {", "private void registerEnvironment(ToxiproxyContainer container, ConfigurableEnvironment environment) {\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.toxiproxy.host\", container.getHost());\n    map.put(\"embedded.toxiproxy.controlPort\", container.getControlPort());", "@Override\npublic void visitUnsignedInteger(String name, long id, long value) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"redis\")\nToxiproxyContainer.ContainerProxy redisContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_REDIS) GenericContainer<?> redis, RedisProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(redis, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.redis.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.redis.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.redis.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedRedisToxiProxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "            Filter sectorIdentifierFilter = Filter.createEqualityFilter(\"oxSectorIdentifier\", sectorIdentifier);\n            Filter userInumFilter = Filter.createEqualityFilter(\"oxAuthUserId\", userInum);\n            filter = Filter.createANDFilter(sectorIdentifierFilter, userInumFilter);\n        } else {\n            Filter sectorIdentifierFilter = Filter.createEqualityFilter(\"oxSectorIdentifier\", sectorIdentifier);\n            Filter clientIdFilter = Filter.createEqualityFilter(\"oxAuthClientId\", clientId);\n            Filter userInumFilter = Filter.createEqualityFilter(\"oxAuthUserId\", userInum);\n            filter = Filter.createANDFilter(sectorIdentifierFilter, clientIdFilter, userInumFilter);\n        }\n        List<PairwiseIdentifier> entries = ldapEntryManager.findEntries(baseDnForPairwiseIdentifiers, PairwiseIdentifier.class, filter);\n        if (entries != null && !entries.isEmpty()) {\n            // if more then one entry then it's problem, non-deterministic behavior, id must be unique\n            if (entries.size() > 1) {\n                log.error(\"Found more then one pairwise identifier by sector identifier: {}\" + sectorIdentifier);\n                for (PairwiseIdentifier pairwiseIdentifier : entries) {", "protected void doExecute() throws Exception {\n    ServerProxy server = new ServerProxy(hostname, port, username, password);\n    //\n    // TODO: Maybe we just need isStarted() not need to be fully started?\n    //\n    if (!server.isFullyStarted()) {\n        String msg = \"Server does not appear to be started\";\n        if (failIfNotStarted) {\n            throw new MojoExecutionException(msg);\n        } else {", "private static void executeSensor(SensorContext context, Sensor sensor, DefaultSensorDescriptor descriptor) {\n    var sensorName = descriptor.name() != null ? descriptor.name() : describe(sensor);", " * @throws ServletException\n */\n@SuppressWarnings(\"deprecation\")\n@Override\npublic void start() throws ServletException {\n    log.info(\"Loading RTMPT context\");\n    rtmptEngine = new StandardEngine();\n    rtmptEngine.setName(\"red5RTMPTEngine\");\n    rtmptEngine.setDefaultHost(host.getName());\n    rtmptEngine.setRealm(embedded.getEngine().getRealm());\n    Service service = new StandardService();\n    service.setName(\"red5RTMPTEngine\");\n    service.setContainer(rtmptEngine);\n    // add the valves to the host\n    for (Valve valve : valves) {", "private void handleException(String msg, Exception ex) {", "@Override\npublic void doParse(String rarFile, String baseUri, RDFNotation notation, boolean keepBNode, RDFCallback callback) throws ParserException {\n    try {\n        String[] cmdList1 = Arrays.copyOf(cmdList, cmdList.length);\n        cmdList1[2] = rarFile;\n        ProcessBuilder listProcessBuilder = new ProcessBuilder(cmdList1);\n        //\t\t\tlistProcess.redirectInput(tempFile);\n        Process processList = listProcessBuilder.start();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(processList.getInputStream(), UTF_8));\n        String[] cmdExtract = Arrays.copyOf(cmdExtractFile, cmdExtractFile.length);\n        cmdExtract[3] = rarFile;\n        String fileName;\n        // Read file name from list\n        while ((fileName = reader.readLine()) != null) {\n            // FIXME: Create several processes in background?", "/**\n * {@inheritDoc}\n */\n@Override\npublic ITagReader getReader() throws IOException {\n    MP4Reader reader = null;\n    IoBuffer fileData = null;\n    String fileName = file.getName();\n    if (file.exists()) {", "private static List<PatternHolder> extractAllowedTypes(JsonObject constraintObj) {\n    List<PatternHolder> allowedTypes = new ArrayList<>();\n    JsonArray allowedTypesArray = constraintObj.getJsonArray(ALLOWED_TYPES);\n    if (allowedTypesArray == null) {\n        log.warn(\"No '{}' array found in configuration\", ALLOWED_TYPES);\n        return allowedTypes;\n    }\n    for (Object allowedType : allowedTypesArray) {\n        String allowedTypeStr = (String) allowedType;\n        if (StringUtils.isNotEmptyTrimmed(allowedTypeStr)) {\n            try {\n                allowedTypes.add(new PatternHolder(Pattern.compile(allowedTypeStr).pattern()));\n            } catch (PatternSyntaxException patternException) {", "protected String encodeResponse(Element response) throws IOException {\n    String responseMessage = DOM2Writer.nodeToString(response);", "@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    if (log.isDebugEnabled()) {", "private void logClusterInfo() {\n    try (Jedis jedis = createJedis()) {\n        String clusterInfo = jedis.clusterInfo();\n        String info = jedis.info();\n        List<String> config = jedis.configGet(\"*\");\n        String clusterNodes = jedis.clusterNodes();", "        }\n    }\n    Wait.waitFor(new Wait.Condition() {\n\n        @Override\n        public boolean isSatisified() throws Exception {\n            return received.get() == numIterations;\n        }\n    });\n    consumer.close();\n    connection.close();\n    RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();\n    Queue queue = (Queue) regionBroker.getQueueRegion().getDestinationMap().get(destination);\n    StoreQueueCursor storeQueueCursor = (StoreQueueCursor) queue.getMessages();\n    PendingMessageCursor queueStorePrefetch = storeQueueCursor.getPersistent();", "protected void echo(String text) {", "public void handleEvent(Event event) {\n    try {\n        boolean minified = htmlLibraryManager.isMinifyEnabled();\n        String path = (String) event.getProperty(SlingConstants.PROPERTY_PATH);", "@Override\npublic void onSharedObjectUpdate(ISharedObjectBase so, Map<String, Object> values) {", "private boolean validateSignoutEndpointAddress(Application serviceConfig, String endpointAddress) {\n    if (serviceConfig.getLogoutEndpoint() == null && serviceConfig.getCompiledLogoutEndpointConstraint() == null) {\n        LOG.error(\"Either the 'logoutEndpoint' or the 'logoutEndpointConstraint' \" + \"configuration values must be specified for the application\");\n    } else if (serviceConfig.getLogoutEndpoint() != null && serviceConfig.getLogoutEndpoint().equals(endpointAddress)) {", "private void prepareContainerConfiguration(GenericContainer<?> container) throws IOException {\n    String containerEndpoint = buildContainerEndpoint(container);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"vertica\")\nToxiproxyContainer.ContainerProxy verticaContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_VERTICA) GenericContainer<?> embeddedVertica, ConfigurableEnvironment environment, VerticaProperties verticaProperties) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(embeddedVertica, verticaProperties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.vertica.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.vertica.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.vertica.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedVerticaToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Test(groups = \"wso2.esb\", description = \"Test return of the current time in milliseconds\")\npublic void testSystemTime() throws Exception {\n    OMElement response = axis2Client.sendSimpleStockQuoteRequest(getProxyServiceURLHttp(\"SYSTEM_TIME_TestProxy\"), null, \"Wso2\");\n    assertNotNull(response, \"Time returned is Null\");\n    DateFormat dateFormat = new SimpleDateFormat(\"HH:mm\");\n    Date date = new Date();", "@Test\npublic void testFLVReaderFileGenerateMetaData() {\n    log.info(\"\\n testFLVReaderFileGenerateMetaData\");\n    String[] paths = new String[] { \"target/test-classes/fixtures/stray.flv\" };\n    try {\n        for (String path : paths) {\n            File file = Paths.get(path).toFile();\n            if (file.exists() && file.canRead()) {\n                log.info(\"Reading: {}\", file.getName());\n                FLVReader reader = new FLVReader(file, true);\n                ITag tag = null;\n                while (reader.hasMoreTags()) {\n                    tag = reader.readTag();\n                    if (tag != null && tag.getDataType() > 9) {", "public static void logResolved() {\n    int deferred = deferredCounter.get();\n    int resolved = resolvedCounter.get();", "@Override\npublic void resultReceived(IPendingServiceCall call) {\n    log.info(\"connectCallback\");\n    ObjectMap<?, ?> map = (ObjectMap<?, ?>) call.getResult();\n    String code = (String) map.get(\"code\");", "@Override\npublic void handle(final RoutingContext ctx) {\n    final LoggingHandler loggingHandler = new LoggingHandler(loggingResourceManager, ctx.request(), this.eventBus);\n    final String targetUri = urlPattern.matcher(ctx.request().uri()).replaceAll(rule.getPath()).replaceAll(\"\\\\/\\\\/\", \"/\");\n    final Logger log = RequestLoggerFactory.getLogger(StorageForwarder.class, ctx.request());\n    if (handleHeadersFilter(ctx.request())) {\n        return;\n    }\n    monitoringHandler.updateRequestsMeter(\"localhost\", ctx.request().uri());\n    monitoringHandler.updateRequestPerRuleMonitoring(ctx.request(), rule.getMetricName());\n    final long startTime = monitoringHandler.startRequestMetricTracking(rule.getMetricName(), ctx.request().uri());", "@Override\npublic void storeXDeltaResponseHeader(String xDeltaResponseNumber) {\n    if (log.isTraceEnabled()) {", "public void processSchemaQueue() {\n    PendingChanged.logResolved();\n    while (!processingQueue.isEmpty()) {\n        CacheKey key = processingQueue.poll();\n        if (key != null) {", "/**\n * Get the time zone for a specific exchange suffix\n *\n * @param suffix suffix for the exchange in YahooFinance\n * @return time zone of the exchange\n */\npublic static TimeZone get(String suffix) {\n    if (SUFFIX_TIMEZONES.containsKey(suffix)) {\n        return SUFFIX_TIMEZONES.get(suffix);\n    }", "public void warning(SAXParseException exception) {", "        passwordId.requestFocus();\n        DailogUtil.showTipDailogCenter(\"\u8f93\u5165\u7684\u5bc6\u7801\u97006\u4f4d\u6216\u4ee5\u4e0a\uff0c\u4e14\u5305\u542b\u5b57\u6bcd\u548c\u6570\u5b57\", getThisStage());\n        return;\n    }\n    RadioButton radioButton = (RadioButton) type.getSelectedToggle();\n    String type = radioButton.getId();\n    //\u4fee\u6539\u5bc6\u7801\u5e76\u5224\u65ad\u7ed3\u679c\n    AccountKit accountKit = InchainInstance.getInstance().getAccountKit();\n    Result result = accountKit.changeWalletPassword(oldPassword, password, null, \"mgpwd\".equals(type) ? 1 : 2);\n    if (result.isSuccess()) {\n        oldPasswordId.setText(\"\");\n        passwordId.setText(\"\");\n        repeatId.setText(\"\");\n        DailogUtil.showTipDailogCenter(result.getMessage(), getThisStage());\n    } else {", "@ParameterizedTest\n@MethodSource(\"cacheProvider\")\nvoid testCache(DriverManagerType driverManagerType, String driverName, String driverVersion, Architecture arch, OperatingSystem os) throws Exception {\n    WebDriverManager wdm = WebDriverManager.getInstance(driverManagerType).avoidResolutionCache().forceDownload().operatingSystem(os).driverVersion(driverVersion);\n    wdm.setup();\n    CacheHandler cacheHandler = new CacheHandler(new Config());\n    Optional<String> driverFromCache = cacheHandler.getDriverFromCache(driverVersion, driverName, driverManagerType, arch, os.name());", "private Void failure(Throwable t) {\n    stats.recordProducerFailure();", "private void registerMemSqlEnvironment(GenericContainer<?> memsql, ConfigurableEnvironment environment, MemSqlProperties properties) {\n    Integer mappedPort = memsql.getMappedPort(properties.port);\n    String host = memsql.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.memsql.port\", mappedPort);\n    map.put(\"embedded.memsql.host\", host);\n    map.put(\"embedded.memsql.schema\", properties.getDatabase());\n    map.put(\"embedded.memsql.user\", properties.getUser());\n    map.put(\"embedded.memsql.password\", properties.getPassword());", "@Override\npublic void contextDestroyed(ServletContextEvent sce) {", "@Override\npublic BroadcastResult broadcast(final T message) {\n    //\u5e7f\u64ad\u7ed3\u679c\n    final BroadcastResult result = new BroadcastResult();\n    int minConnections = peerKit.getBroadcasterMinConnectionCount();\n    if (log.isDebugEnabled()) {", "/**\n * {@inheritDoc}\n */\n@Override\npublic boolean addData(IoBuffer data) {\n    if (data.hasRemaining()) {\n        // mark\n        int start = data.position();\n        // ensure we are at the beginning\n        data.rewind();\n        byte frameType = data.get();", "@Override\npublic void exec(int executionCounter) {\n    List<String> args = RedisUtils.toPayload(luaScriptState.getSha(), keys.size(), keys, arguments);\n    redisAPI.evalsha(args, event -> {\n        if (event.succeeded()) {\n            String value = event.result().toString();\n            if (log.isTraceEnabled()) {\n                log.trace(\"UpdateStatsRedisCommand lua script got result: \" + value);\n            }\n            promise.complete(UpdateStatisticsResult.fromString(value, UpdateStatisticsResult.ERROR));\n        } else {\n            String message = event.cause().getMessage();\n            if (message != null && message.startsWith(\"NOSCRIPT\")) {\n                log.warn(\"UpdateStatsRedisCommand script couldn't be found, reload it\");", "public static String runAndWaitArray(boolean logCommand, File folder, String[] command) {\n    String commandStr = Arrays.toString(command);\n    if (logCommand) {", "/**\n * Encode notification event and fill given byte buffer.\n *\n * @param out\n *            Byte buffer to fill\n * @param command\n *            Notification event\n */\n@Override\nprotected void encodeCommand(IoBuffer out, ICommand command) {", "private void checkArm(WebDriverManager wdm) {\n    wdm.driverVersion(\"0.29.1\").mac().arch64().setup();\n    String driverPath = wdm.getDownloadedDriverPath();", "public ClientAuthorization find(String userInum, String clientId) {\n    prepareBranch();\n    final String id = createId(userInum, clientId);\n    try {\n        if (appConfiguration.getClientAuthorizationBackwardCompatibility()) {\n            return findToRemoveIn50(userInum, clientId);\n        }\n        return ldapEntryManager.find(ClientAuthorization.class, createDn(createId(userInum, clientId)));\n    } catch (EntryPersistenceException e) {", "@Override\npublic List<Flow> findByReference(final FlowReferenceType flowReferenceType, final String referenceId) {\n    try {", "static void prepareParentNoMountPoint(Path mountPoint) throws MountPointPreparationException {\n    Path hideaway = getHideaway(mountPoint);\n    var mpExists = Files.exists(mountPoint, LinkOption.NOFOLLOW_LINKS);\n    var hideExists = Files.exists(hideaway, LinkOption.NOFOLLOW_LINKS);\n    //TODO: possible improvement by just deleting an _empty_ hideaway\n    if (mpExists && hideExists) {\n        //both resources exist (whatever type)\n        throw new MountPointPreparationException(new FileAlreadyExistsException(hideaway.toString()));\n    } else if (!mpExists && !hideExists) {\n        //neither mountpoint nor hideaway exist\n        throw new MountPointPreparationException(new NoSuchFileException(mountPoint.toString()));\n    } else if (!mpExists) {\n        //only hideaway exists\n        checkIsDirectory(hideaway);", "@Override\npublic void onException(JMSException exception) {", "public static Container.ExecResult executeAndCheckExitCode(ContainerState container, String... command) {\n    try {\n        Container.ExecResult execResult = container.execInContainer(command);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"localstack\")\nToxiproxyContainer.ContainerProxy localstackContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_LOCALSTACK) LocalStackContainer localStack, LocalStackProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(localStack, properties.getEdgePort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.localstack.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.localstack.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.localstack.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedLocalstackToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "        return;\n    } else if (!validPassword(password)) {\n        passwordId.requestFocus();\n        DailogUtil.showTipDailogCenter(\"\u8f93\u5165\u7684\u5bc6\u7801\u97006\u4f4d\u6216\u4ee5\u4e0a\uff0c\u4e14\u5305\u542b\u5b57\u6bcd\u548c\u6570\u5b57\", getThisStage());\n        return;\n    }\n    //\u4fee\u6539\u5bc6\u7801\u5e76\u5224\u65ad\u7ed3\u679c\n    AccountKit accountKit = InchainInstance.getInstance().getAccountKit();\n    Result result = accountKit.changeWalletPassword(oldPassword, password);\n    if (result.isSuccess()) {\n        oldPasswordId.setText(\"\");\n        passwordId.setText(\"\");\n        repeatId.setText(\"\");\n        DailogUtil.showTipDailogCenter(result.getMessage(), getThisStage());\n    } else {", "@Produces({ \"application/json\" })\npublic Response getConfiguration() {\n    try {\n        if (appConfiguration.getDisableU2fEndpoint()) {\n            return Response.status(Status.FORBIDDEN).build();\n        }\n        final String baseEndpointUri = appConfiguration.getBaseEndpoint();\n        final U2fConfiguration conf = new U2fConfiguration();\n        conf.setVersion(\"2.1\");\n        conf.setIssuer(appConfiguration.getIssuer());\n        conf.setRegistrationEndpoint(baseEndpointUri + \"/fido/u2f/registration\");\n        conf.setAuthenticationEndpoint(baseEndpointUri + \"/fido/u2f/authentication\");\n        // convert manually to avoid possible conflicts between resteasy\n        // providers, e.g. jettison, jackson\n        final String entity = ServerUtil.asPrettyJson(conf);", "Optional<URL> buildUrl(String driverVersion, Config config) {\n    Optional<URL> optionalUrl = empty();\n    if (!config.isUseMirror()) {\n        String downloadUrlPattern = config.getChromeDownloadUrlPattern();\n        OperatingSystem os = config.getOperatingSystem();\n        Architecture arch = config.getArchitecture();\n        String archLabel = os.isWin() ? \"32\" : \"64\";\n        String builtUrl = os.isMac() && ARM64.equals(arch) ? String.format(downloadUrlPattern, driverVersion, os.getName(), String.format(\"_arm%s\", archLabel)) : String.format(downloadUrlPattern, driverVersion, os.getName(), archLabel);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"azurite\")\nToxiproxyContainer.ContainerProxy azuriteTableContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(AZURITE_BEAN_NAME) GenericContainer<?> azurite, AzuriteProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(azurite, properties.getTableStoragePort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.azurite.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.azurite.toxiproxy.tableStoragePort\", proxy.getProxyPort());\n    map.put(\"embedded.azurite.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedAzuriteTableToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "public Topic createTopic(String topicName) {\n    ProjectTopicName topic = ProjectTopicName.of(projectId, topicName);\n    try {", "@Override\npublic Future<Void> removeQueueRequest(String queue) {\n    Promise<Void> promise = Promise.promise();\n    if (StringUtils.isEmpty(queue)) {\n        promise.fail(\"Queue is not allowed to be empty\");\n        return promise.future();\n    }\n    redisAPI.hdel(Arrays.asList(QUEUE_REQUESTS, queue), reply -> {\n        if (reply.failed()) {\n            String message = \"Failed to remove request for queue '\" + queue + \"'. Cause: \" + logCause(reply);", "public boolean isValidEnrollmentCode(String userName, String enrollmentCode) {\n    if (enrollmentCode == null) {\n        log.error(\"In two step authentication workflow enrollment_code is mandatory\");\n        return false;\n    }\n    User user = userService.getUser(userName, U2fConstants.U2F_ENROLLMENT_CODE_ATTRIBUTE);\n    if (user == null) {", "private final void replayScheduler(LegacyJobSchedulerImpl legacy, JobSchedulerStoreImpl target) throws Exception {\n    List<LegacyJobImpl> jobs = legacy.getAllJobs();\n    String schedulerName = legacy.getName();\n    for (LegacyJobImpl job : jobs) {", "@Test(timeout = 60000)\npublic void testSendMessage() throws Exception {\n    Destination destination = session.createQueue(getQueueName());\n    MessageConsumer consumer = session.createConsumer(destination);\n    String frame = \"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL;\n    stompConnection.sendFrame(frame);\n    frame = stompConnection.receiveFrame();\n    assertTrue(frame.startsWith(\"CONNECTED\"));\n    long timestamp = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1);\n    long expires = timestamp + TimeUnit.SECONDS.toMillis(5);", "@Override\npublic void visitTemplateOpen(String name, long id) {", "@Override\npublic void visitASCII(String name, long id, CharSequence value) {", "public static void main(String[] args) {\n    var printVersion = //\n    Optional.ofNullable(args).//Streams either one element (the args-array) or zero elements\n    stream().flatMap(//\n    Arrays::stream).anyMatch(arg -> \"-v\".equals(arg) || \"--version\".equals(arg));\n    if (printVersion) {\n        var appVer = System.getProperty(\"cryptomator.appVersion\", \"SNAPSHOT\");\n        var buildNumber = System.getProperty(\"cryptomator.buildNumber\", \"SNAPSHOT\");\n        //Reduce noise for parsers by using System.out directly\n        System.out.printf(\"Cryptomator version %s (build %s)%n\", appVer, buildNumber);\n        return;\n    }\n    int exitCode = CRYPTOMATOR_COMPONENT.application().run(args);", "@Override\npublic boolean beforeExecute(ForestRequest request) {\n    log.info(\"invoke Base beforeExecute\");\n    Object[] args = request.getArguments();", "@Override\npublic void validatePlanTagsAgainstApiTags(Set<String> planTags, Set<String> apiTags) {\n    if (!isEmpty(planTags) && (isEmpty(apiTags) || !apiTags.stream().anyMatch(apiTag -> planTags.contains(apiTag)))) {", "@Override\npublic void resultReceived(IPendingServiceCall call) {\n    log.info(\"connectCallback\");\n    ObjectMap<?, ?> map = (ObjectMap<?, ?>) call.getResult();\n    String code = (String) map.get(\"code\");", "private void doLockMoney(AccountKit accountKit, Coin lockAmount, long unlockTime) {\n    try {\n        Result result = accountKit.lockMoney(lockAmount, unlockTime, null, null, \"\u7528\u6237\u9501\u4ed3\");\n        if (result.isSuccess()) {\n            DailogUtil.showTipDailogCenter(result.getMessage(), getThisStage());\n            resetAndclose();\n        } else {", "/**\n * \u5355\u5143\u6d4b\u8bd5\u7684\u521b\u4e16\u5757\n */\n@Override\npublic BlockStore getGengsisBlock() {\n    BlockStore gengsisBlock = new BlockStore(this, Hex.decode(\"\"));\n    Sha256Hash merkleHash = gengsisBlock.getBlock().buildMerkleHash();\n    if (log.isDebugEnabled()) {", "@Parameterized.Parameters(name = \"{1}\")\npublic static Collection<String[]> getTestParameters() throws IOException {\n    List<String[]> configUrls = new ArrayList<String[]>();\n    configUrls.add(new String[] { \"xbean:src/release/conf/activemq.xml\", \"activemq.xml\" });\n    String osName = System.getProperty(\"os.name\");", "@Override\npublic Future<Set<String>> cacheEntries() {\n    Promise<Set<String>> promise = Promise.promise();\n    redisAPI.smembers(CACHED_REQUESTS, reply -> {\n        if (reply.failed()) {\n            String message = \"Failed to get cached requests. Cause: \" + logCause(reply);", "@Override\npublic void uncaughtException(Thread t, Throwable e) {", "@Override\nprotected void startUp() {\n    // RAM directory storage by default\n    if (luceneStorageConfig == null || luceneStorageConfig.equals(Constants.LUCENE_DIRECTORY_STORAGE_RAM)) {\n        directory = new RAMDirectory();\n        log.info(\"Using RAM Lucene storage\");\n    } else if (luceneStorageConfig.equals(Constants.LUCENE_DIRECTORY_STORAGE_FILE)) {\n        File luceneDirectory = DirectoryUtil.getLuceneDirectory();", "private void registerAerospikeEnvironment(GenericContainer<?> aerospike, ConfigurableEnvironment environment, AerospikeProperties properties) {\n    Integer mappedPort = aerospike.getMappedPort(properties.port);\n    String host = aerospike.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.aerospike.host\", host);\n    map.put(\"embedded.aerospike.port\", mappedPort);\n    map.put(\"embedded.aerospike.namespace\", properties.namespace);", "private UiTheme parseUiTheme(String uiThemeName) {\n    try {\n        return UiTheme.valueOf(uiThemeName.toUpperCase());\n    } catch (IllegalArgumentException e) {", "/**\n * Looks for an error message.\n *\n * @param p_list error list\n * @param type   The type of the error.\n * @return Error message or <code>null</code> if not found.\n */\nprivate ErrorMessage getError(List<ErrorMessage> p_list, IErrorType type) {", "public void reportDataSizeByTopic(int maxToReport) {\n    LOG.info(\"Data Size By Topic:\");\n    List<Map.Entry<String, Long>> dataSizeByTopicSorted = sortByValueDesc(this.dataSizeByTopic);\n    for (int i = 0; i < dataSizeByTopicSorted.size() && i < maxToReport; i++) {\n        Map.Entry<String, Long> entry = dataSizeByTopicSorted.get(i);\n        double dataSizeMB = (double) entry.getValue() / 1024.0 / 1024.0;", "private P384KeyPair loadExistingKeyPair(char[] passphrase, Path p12File) throws IOException {", "protected void handleException(String msg, Exception e) {", "public SessionId getConnectSession(HttpServletRequest httpRequest) {\n    String cookieId = cookieService.getSessionIdFromCookie(httpRequest);", "/**\n * {@inheritDoc}\n */\n@Override\npublic void exceptionCaught(IoSession session, Throwable cause) throws Exception {\n    if (log.isDebugEnabled()) {", "private void reportErrors(@Nullable Stage stage, @Nullable Throwable error) {\n    if (error != null) {", "private NodeOrientation parseUiOrientation(String uiOrientationName) {\n    try {\n        return NodeOrientation.valueOf(uiOrientationName.toUpperCase());\n    } catch (IllegalArgumentException e) {", "@Override\npublic void error(String message) {", "@Test\npublic void testGetExecutionCount() throws Exception {\n    final JobSchedulerViewMBean view = getJobSchedulerMBean();\n    assertNotNull(view);\n    assertTrue(view.getAllJobs().isEmpty());\n    scheduleMessage(10000, 1000, 10);\n    assertFalse(view.getAllJobs().isEmpty());\n    TabularData jobs = view.getAllJobs();\n    assertEquals(1, jobs.size());\n    String jobId = null;\n    for (Object key : jobs.keySet()) {\n        jobId = ((List<?>) key).get(0).toString();\n    }\n    final String fixedJobId = jobId;", "public boolean isValid(RequestContext context, String endpointAddress) throws Exception {\n    if (endpointAddress == null) {\n        return true;\n    }\n    // The endpointAddress address must be a valid URL + start with http(s)\n    // Validate it first using commons-validator\n    UrlValidator urlValidator = new UrlValidator(new String[] { \"http\", \"https\" }, UrlValidator.ALLOW_LOCAL_URLS);\n    if (!urlValidator.isValid(endpointAddress)) {", "@Override\npublic void onMessage(Message message) {\n    try {\n        Thread.sleep(2000L);\n        if (message instanceof TextMessage) {", "/**\n * Pushes a message out to all the PushableConsumers.\n *\n * @param message\n *            the message to be pushed to consumers\n * @throws IOException\n *            In case IOException of some sort is occurred\n */\npublic void pushMessage(IMessage message) throws IOException {\n    if (log.isDebugEnabled()) {", "        }\n        Set<String> myIps = IpUtil.getIps();\n        for (String seedDomain : SEED_DOMAINS) {\n            try {\n                InetAddress[] response = InetAddress.getAllByName(seedDomain);\n                for (InetAddress inetAddress : response) {\n                    //\u6392\u9664\u81ea\u5df1\n                    if (myIps.contains(inetAddress.getHostAddress())) {\n                        continue;\n                    }\n                    //\u82e5\u8fde\u63a5\u5931\u8d25\uff0c\u5219\u91cd\u8bd5\uff0c\u6682\u5b9a1\u5206\u949f\n                    Seed seed = new Seed(new InetSocketAddress(inetAddress, Configure.PORT), true, 1 * 60000);\n                    add(seed);\n                }\n            } catch (Exception e) {", "@FXML\npublic void proceed() {\n    LOG.trace(\"proceed()\");\n    FileChooser fileChooser = new FileChooser();\n    fileChooser.setTitle(resourceBundle.getString(\"unlock.chooseMasterkey.filePickerTitle\"));\n    fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(resourceBundle.getString(\"unlock.chooseMasterkey.filePickerMimeDesc\"), CRYPTOMATOR_FILENAME_GLOB));\n    File masterkeyFile = fileChooser.showOpenDialog(window);\n    if (masterkeyFile != null) {", "@Test\nvoid test() throws Exception {\n    String sutUrl = \"https://bonigarcia.dev/selenium-webdriver-java/\";\n    driver.get(sutUrl);\n    String title = driver.getTitle();", "protected static void handleException(String msg, Exception e) {", "        dnFind_work = getDnFind();\n    }\n    boolean found = false;\n    if (StringUtils.isNotEmpty(dnSearchIn_work) && StringUtils.isNotEmpty(dnFind_work)) {\n        try {\n            found = findMember(getHost(), getPort(), dnSearchIn_work, isUseSsl(), dnFind_work, isRecursiveSearch());\n        } catch (NamingException e) {\n            throw new PipeRunException(this, \"exception on ldap lookup\", e);\n        }\n    }\n    if (!found) {\n        String msg = \"dn [\" + dnFind_work + \"] not found as member in url [\" + retrieveUrl(getHost(), getPort(), dnSearchIn_work, isUseSsl()) + \"]\";\n        if (notFoundForward == null) {\n            throw new PipeRunException(this, msg);\n        }", "private boolean executeExternalModifyResponse(CustomScriptConfiguration scriptConf, JSONObject responseAsJsonObject, ExternalIntrospectionContext context) {\n    try {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"memsql\")\nToxiproxyContainer.ContainerProxy memsqlContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_MEMSQL) GenericContainer<?> memsql, MemSqlProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(memsql, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.memsql.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.memsql.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.memsql.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedMemsqlToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Override\npublic Optional<RuleSetChangedEvent> parse(String jsonData) {\n    var payload = gson.fromJson(jsonData, RuleSetChangedEventPayload.class);\n    if (payload.isInvalid()) {", "public String[] getRoles() {\n    RuntimeException e = new RuntimeException(\"Not implemented\");", "private void removeConnection(String removedConnectionId) {\n    var removed = repository.remove(removedConnectionId);\n    if (removed == null) {", "@Override\npublic boolean beforeExecute(ForestRequest request) {\n    log.info(\"invoke False beforeExecute\");\n    Object[] args = request.getArguments();\n    args[0] = \"b\";", "@Override\npublic Histogram deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JacksonException {\n    ByteBuffer buffer = threadBuffer.get();\n    buffer.clear();\n    try (OutputStream os = new ByteBufferBackedOutputStream(buffer)) {\n        jsonParser.readBinaryValue(os);\n        buffer.flip();\n        // Long.MIN_VALUE used so that Histogram will defer to the value encoded in the histogram\n        // value. This assumes that it is acceptable for the deserialized value we create to\n        // share the same parameters of the source histogram that was serialized.\n        return Histogram.decodeFromCompressedByteBuffer(buffer, Long.MIN_VALUE);\n    } catch (Exception e) {", "private void visibleWindowsChanged(ListChangeListener.Change<? extends Window> change) {\n    int visibleWindows = change.getList().size();", "@PostConstruct\npublic void init() {\n    AdminClient adminClient = adminClient();\n    try {\n        StopWatch stopWatch = new StopWatch(\"CheckAndCreateTopics\");\n        stopWatch.start(\"CheckAndCreateTopics\");\n        ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n        provider.addIncludeFilter(new AssignableTypeFilter(PublishedEvent.class));\n        Set<BeanDefinition> candidateComponents = provider.findCandidateComponents(eventApisConfiguration.getBaseEventsPackage());\n        int numPartitions = getDefaultNumberOfPartitions(adminClient);\n        for (BeanDefinition candidateComponent : candidateComponents) {\n            Class<PublishedEvent> beanClass;\n            try {\n                beanClass = (Class<PublishedEvent>) Class.forName(candidateComponent.getBeanClassName());\n                String topicName = beanClass.getSimpleName();", "public ReportConfigurationBean[] getSavedReports() throws Exception {\n    try {\n        return reportingAdminServiceStub.getSavedReports();\n    } catch (Exception e) {\n        String msg = \"Unable to get saved report\";", "@Override\npublic void resultReceived(IPendingServiceCall call) {\n    log.info(\"connectCallback\");\n    ObjectMap<?, ?> map = (ObjectMap<?, ?>) call.getResult();\n    String code = (String) map.get(\"code\");", "void log(int level, String message, Throwable th) {\n    synchronized (logServices) {\n        for (LogService log : logServices) {", "@Test\npublic void testCtor() throws Exception {\n    log.debug(\"\\n testCtor\");\n    File file = new File(\"target/test-classes/fixtures/p-ok.mp3\");\n    @SuppressWarnings(\"unused\")\n    File file2 = new File(\"target/test-classes/fixtures/p-err.mp3\");\n    //File file = new File(\"target/test-classes/fixtures/01 Cherub Rock.mp3\");\n    //File file = new File(\"target/test-classes/fixtures/CodeMonkey.mp3\");\n    MP3Reader reader = new MP3Reader(file);\n    ITag tag = reader.readTag();", "@Override\npublic Optional<TaintVulnerabilityClosedEvent> parse(String jsonData) {\n    var payload = gson.fromJson(jsonData, TaintVulnerabilityClosedEventPayload.class);\n    if (payload.isInvalid()) {", "/**\n * Method responsible to process expired CIBA requests, set them as expired in cache\n * and send callbacks to the client\n * @param cibaRequest Object containing data related to the CIBA request.\n * @param authReqId Authentication request id.\n */\nprivate void processExpiredRequest(CibaRequestCacheControl cibaRequest, String authReqId) {\n    if (cibaRequest.getStatus() != CibaRequestStatus.PENDING && cibaRequest.getStatus() != CibaRequestStatus.EXPIRED) {\n        return;\n    }", "@Override\nprotected List<File> postDownload(File archive) {\n    Collection<File> listFiles = listFiles(new File(archive.getParent()), null, true);\n    Iterator<File> iterator = listFiles.iterator();\n    File file = null;\n    List<File> files = new ArrayList<>();\n    while (iterator.hasNext()) {\n        file = iterator.next();\n        String fileName = file.getName();\n        if (fileName.contains(getDriverName())) {", "        Writer writer = null;\n        InputStream instream = null;\n        try {\n            Process process = Runtime.getRuntime().exec(\"sh rabbitmqctl status\", null, rabbitMQHome);\n            instream = process.getInputStream();\n            writer = new StringWriter();\n            char[] buffer = new char[1024];\n            reader = new BufferedReader(new InputStreamReader(instream));\n            int n;\n            while ((n = reader.read(buffer)) != -1) {\n                writer.write(buffer, 0, n);\n            }\n            reader.close();\n            instream.close();\n            String message = writer.toString();", "@EventListener\n@Async(\"taskExecutor\")\npublic void processArticlePostEvent(ArticleEvent articleEvent) throws InterruptedException {\n    Thread.sleep(1000);", "@Override\npublic void visitUnsignedLong(String name, long id, long value) {", "public void testLoadTempAdvisoryQueues() throws Exception {\n    for (int i = 0; i < MESSAGE_COUNT; i++) {\n        TemporaryQueue tempQueue = session.createTemporaryQueue();\n        MessageConsumer consumer = session.createConsumer(tempQueue);\n        MessageProducer producer = session.createProducer(tempQueue);\n        consumer.close();\n        producer.close();\n        tempQueue.delete();\n    }\n    AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(AdvisoryBroker.class);\n    assertTrue(ab.getAdvisoryDestinations().size() == 0);\n    assertTrue(ab.getAdvisoryConsumers().size() == 0);\n    assertTrue(ab.getAdvisoryProducers().size() == 0);\n    RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);\n    for (Destination dest : rb.getDestinationMap().values()) {", "private void registerInfluxEnvironment(ConcreteInfluxDbContainer influx, ConfigurableEnvironment environment, InfluxDBProperties properties) {\n    Integer mappedPort = influx.getMappedPort(properties.getPort());\n    String host = influx.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.influxdb.port\", mappedPort);\n    map.put(\"embedded.influxdb.host\", host);\n    map.put(\"embedded.influxdb.database\", properties.getDatabase());\n    map.put(\"embedded.influxdb.user\", properties.getUser());\n    map.put(\"embedded.influxdb.password\", properties.getPassword());\n    String influxDBURL = \"http://{}:{}\";", "@Override\nprotected Void processItem(List<DataPointWithEventDetectors> subgroup, int itemId) {\n    long startTs = 0L;\n    if (log.isInfoEnabled()) {\n        startTs = Common.timer.currentTimeMillis();", "/**\n * Unregisters a plug-in.\n *\n * @param plugin\n *            plugin\n */\npublic static void unregister(IRed5Plugin plugin) {", "@Test\npublic void patternUpdate() {\n    final String msg = \"pattern\";\n    StdoutRecorder stdoutRecorder = new StdoutRecorder();\n    String log = stdoutRecorder.record(new Runnable() {\n\n        @Override\n        public void run() {\n            Logger logger = LogManager.getLogger(\"patternUpdateLog4j2Jvm7\");", "/**\n * {@inheritDoc}\n */\npublic int seek(int ts) {", "@Override\npublic /**\n * Converts String IP address to InetAddress object.\n *\n * @param textValue ex. \"255.255.222.255\"\n */\nvoid setAsText(String textValue) {", "public <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> function) {\n    if (valueSet) {\n        Optional<Q> result = function.apply(this.valueOptional);", "@Override\npublic void afterPropertiesSet() throws Exception {\n    //Messages that do not match the TopicSelector will be discarded\n    nullChannel = applicationContext.getBean(\"nullChannel\", MessageChannel.class);\n    ClassPathBeanDefinitionScanner scanner = scan();\n    String[] names = scanner.getRegistry().getBeanDefinitionNames();\n    for (String beanName : names) {", "// internal method for issue #323\npublic void getAndCloseSO() {\n    log.debug(\"getAndCloseSO initialised\");\n    // get it\n    if (!hasSharedObject(appScope, \"issue323\")) {\n        if (!createSharedObject(appScope, \"issue323\", false)) {\n            log.warn(\"Shared object creation failed\");\n        }\n    }\n    ISharedObject so = getSharedObject(appScope, \"issue323\");", "                inStream = url.openStream();\n            } else {\n                warningMessage = \"Bundle context could not find resource \" + TENANT_MGT_XML + \" or user does not have sufficient permission to access the resource.\";\n            }\n        } else {\n            if ((url = this.getClass().getClassLoader().getResource(TENANT_MGT_XML)) != null) {\n                inStream = url.openStream();\n            } else {\n                warningMessage = \"Could not find resource \" + TENANT_MGT_XML + \" or user does not have sufficient permission to access the resource.\";\n            }\n        }\n    }\n    if (inStream == null) {\n        String message = \"Tenant configuration not found. Cause - \" + warningMessage;\n        if (log.isDebugEnabled()) {", "@Test\npublic void testMakeProduct() throws Exception {\n    Product product = createProduct();\n    assert (product != null);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"couchbase\")\nToxiproxyContainer.ContainerProxy couchbaseContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_COUCHBASE) CouchbaseContainer couchbase, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(couchbase, couchbase.getBootstrapHttpDirectPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.couchbase.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.couchbase.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.couchbase.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedCouchbaseToxiProxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "private long startAndLogTime(GenericContainer<?> container, Logger logger) {\n    Instant startTime = Instant.now();\n    container.start();\n    long startupTime = Duration.between(startTime, Instant.now()).toMillis() / 1000;\n    String dockerImageName = container.getDockerImageName();\n    String buildDate = getBuildDate(container, dockerImageName);\n    // influxdb:1.4.3 build 2018-07-06T17:25:49+02:00 (2 years 11 months ago) startup time is 21 seconds\n    if (startupTime < 10L) {", "@Override\npublic boolean accept(File dir, String name) {", "public Object evaluate(final String expression) throws Exception {\n    if (expression == null) {\n        throw new IllegalArgumentException(\"expression\");\n    }", "    // setup a consumer to drain messages..\n    MessageConsumer consumer = session.createConsumer(queue);\n    consumer.setMessageListener(new MessageListener() {\n\n        @Override\n        public void onMessage(Message message) {\n        }\n    });\n    // warmup...\n    for (int i = 0; i < 10; i++) {\n        benchmarkNonCallbackRate();\n        benchmarkCallbackRate();\n    }\n    double callbackRate = benchmarkCallbackRate();\n    double nonCallbackRate = benchmarkNonCallbackRate();", "@Override\npublic DruidCluster getDruidCluster(String clusterId) throws ClusterNotFoundException {", "void deduce(int rowIndex, int colIndex, int value) {\n    double newValue = cooccurrence.get(rowIndex, colIndex);\n    if (newValue == 0) {", "@CheckForNull\nprivate Path locateNode(@Nullable Path configuredNodejsPath) {\n    if (configuredNodejsPath != null) {", "/**\n * \u63a5\u6536\u5230\u533a\u5757\u62c9\u53d6\u6d88\u606f\n */\n@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    if (log.isDebugEnabled()) {", "private static Predicate<? super SonarLintRuleDefinition> isIncludedByConfiguration(Set<String> includedRules) {\n    return r -> {\n        if (includedRules.contains(r.getKey())) {\n            return true;\n        }\n        for (String deprecatedKey : r.getDeprecatedKeys()) {\n            if (includedRules.contains(deprecatedKey)) {", "@Test\npublic void testNoGcAtStop() throws Exception {\n    brokerService = createBroker(false);\n    brokerService.start();\n    produceWithScheduledDelayAndConsume();\n    LOG.info(\"job store: \" + jobSchedulerStore);\n    int numSchedulerFiles = jobSchedulerStore.getJournal().getFileMap().size();\n    LOG.info(\"kahadb store: \" + kahaDBPersistenceAdapter);\n    int numKahadbFiles = kahaDBPersistenceAdapter.getStore().getJournal().getFileMap().size();", "@Override\npublic void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws IOException, ServletException {\n    var request = validateRequestType(servletRequest);\n    var response = validateResponseType(servletResponse);\n    var path = request.getContextPath() + (request.getPathInfo() == null ? \"\" : request.getPathInfo());\n    if (blacklisted(path)) {", "public void onPlayStatus(IConnection conn, Map<Object, Object> info) {", "private void checkArm(WebDriverManager wdm) {\n    wdm.arch64().setup();\n    String driverPath = wdm.getDownloadedDriverPath();", "@Override\npublic void doParse(InputStream input, String baseUri, RDFNotation notation, boolean keepBNode, RDFCallback callback) throws ParserException {\n    try {\n        final TarArchiveInputStream debInputStream = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(\"tar\", input);\n        TarArchiveEntry entry = null;\n        // Make sure that the parser does not close the Tar Stream so we can read the rest of the files.\n        NonCloseInputStream nonCloseIn = new NonCloseInputStream(debInputStream);\n        while ((entry = (TarArchiveEntry) debInputStream.getNextEntry()) != null) {\n            if (entry.isFile() && !entry.getName().contains(\"DS_Store\")) {\n                try {\n                    RDFNotation guessnot = RDFNotation.guess(entry.getName());", "@Override\npublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n    String contextPath = request.getServletContext().getContextPath();", "public void doStart() throws Exception {\n    HashSet<StaticMember> staticMemberCollection = new HashSet<StaticMember>();\n    log.debug(\"Attempting to set static members\");\n    if (staticMember != null) {\n        log.debug(\"Attempting to add static member: {}\", ((StaticMember) staticMember.getStaticMember()).getPort());\n        staticMemberCollection.add((StaticMember) staticMember.getStaticMember());\n        WadiStaticMember nextStaticMember = (WadiStaticMember) staticMember.getNextStaticMember();\n        while (nextStaticMember != null) {\n            log.debug(\"Attempting to add static member: {}\", ((StaticMember) staticMember.getStaticMember()).getPort());\n            staticMemberCollection.add((StaticMember) nextStaticMember.getStaticMember());\n            nextStaticMember = (WadiStaticMember) nextStaticMember.getNextStaticMember();\n        }\n    }", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"victoriametrics\")\npublic ToxiproxyContainer.ContainerProxy victoriaMetricsContainerProxy(ToxiproxyContainer toxiproxy, GenericContainer<?> victoriametrics, VictoriaMetricsProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxy.getProxy(victoriametrics, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.victoriametrics.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.victoriametrics.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.victoriametrics.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedVictoriaMetricsToxiProxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@ParameterizedTest\n@ValueSource(strings = { \"chrome\", \"firefox\" })\nvoid testInteractive(String browser) {\n    assertTimeout(ofMinutes(5), () -> {\n        ByteArrayInputStream intro = new ByteArrayInputStream(\"\\r\\n\".getBytes());\n        System.setIn(intro);", "@ParameterizedTest\n@EnumSource(names = { \"WIN\", \"LINUX\", \"MAC\" })\nvoid testForceOs(OperatingSystem operatingSystem) {\n    switch(operatingSystem) {\n        case WIN:\n            wdm.win().setup();\n            break;\n        case LINUX:\n            wdm.linux().setup();\n            break;\n        case MAC:\n            wdm.mac().setup();\n            break;\n    }\n    File driver = new File(wdm.getDownloadedDriverPath());", "            QueueConnection qConnection = null;\n            QueueSession qSession = null;\n            QueueBrowser qBrowser = null;\n            try {\n                qConFactory = (QueueConnectionFactory) kernel.invoke(JCA_MANAGED_CONNECTION_FACTORY_NAME, \"$getResource\");\n                qConnection = qConFactory.createQueueConnection();\n                qSession = qConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n                qBrowser = qSession.createBrowser(queue);\n                qConnection.start();\n                for (Enumeration e = qBrowser.getEnumeration(); e.hasMoreElements(); ) {\n                    Object o = e.nextElement();\n                    ret.add(o);\n                }\n                qConnection.stop();\n            } catch (Exception e) {", "//----- WebSocket callback handlers --------------------------------------//\n@Override\npublic void onWebSocketText(String data) {\n    if (data == null) {\n        return;\n    }\n    if (data.equals(\"\\n\")) {\n        LOG.debug(\"New incoming heartbeat read\");\n    } else {", "private void registerEnvironment(GenericContainer<?> victoriaMetrics, ConfigurableEnvironment environment, VictoriaMetricsProperties properties) {\n    Integer mappedPort = victoriaMetrics.getMappedPort(properties.port);\n    String host = victoriaMetrics.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.victoriametrics.host\", host);\n    map.put(\"embedded.victoriametrics.port\", mappedPort);", "@Test(groups = \"wso2.esb\", description = \"Tests level log\")\npublic void testSendingToDefinedEndpoint() throws Exception {\n    OMElement response = axis2Client.sendSimpleStockQuoteRequest(getProxyServiceURLHttp(\"logMediatorLevelTestProxy\"), null, \"WSO2\");\n    Assert.assertTrue(response.toString().contains(\"WSO2\"));", "@Override\npublic void recoveryCleanupFailed(Path indexFile, IndexDescriptor index, Throwable throwable) {", "public static Client create(Path socketPath) throws IOException {\n    var address = UnixDomainSocketAddress.of(socketPath);\n    var socketChannel = SocketChannel.open(address);", "private void shutdown(String reason) {\n    if (null != reason) {", "@Test\npublic void testValidateFromYouTube() {\n    log.info(\"\\ntestValidateFromYouTube\");\n    // client side handshake handler\n    OutboundHandshake out = new OutboundHandshake();\n    // server response\n    IoBuffer y = IoBuffer.allocate(0);\n    y.setAutoExpand(true);\n    y.put(IOUtils.hexStringToByteArray(youtubeS1));\n    y.flip();", " * @param targetStore\n *      The JobSchedulerStore that will receive the replay events from the legacy store.\n *\n * @throws IOException if an error occurs during replay of the legacy store.\n */\npublic void startReplay(JobSchedulerStoreImpl targetStore) throws IOException {\n    checkLoaded();\n    if (targetStore == null) {\n        throw new IOException(\"Cannot replay to a null store\");\n    }\n    try {\n        Set<String> schedulers = store.getJobSchedulerNames();\n        if (!schedulers.isEmpty()) {\n            for (String name : schedulers) {\n                LegacyJobSchedulerImpl scheduler = store.getJobScheduler(name);", "@Override\npublic void run() {\n    try {\n        String name = THREAD_NAME_PREFIX + Thread.currentThread().getName();", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"azurite\")\nToxiproxyContainer.ContainerProxy azuriteQueueContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(AZURITE_BEAN_NAME) GenericContainer<?> azurite, AzuriteProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(azurite, properties.getQueueStoragePort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.azurite.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.azurite.toxiproxy.queueStoragePor\", proxy.getProxyPort());\n    map.put(\"embedded.azurite.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedAzuriteQueueToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Test\npublic void testVerifyAntifakeCode() throws InterruptedException, ExecutionException, TimeoutException, IOException {\n    log.info(\"best block height {}\", network.getBestBlockHeight());\n    String antifakeCodeContent = \"xFdeHFv8RsHn6PHYRE8JTDLwRKPRe7mcej2R5c\";\n    VerifyAntifakeCodeResult result = accountKit.verifyAntifakeCode(antifakeCodeContent);", "// TODO deduplicate MainWindowController...\nprivate void addOrRevealVault(Path potentialVaultPath) {\n    assert Platform.isFxApplicationThread();\n    try {\n        final Vault v;\n        if (potentialVaultPath.getFileName().toString().endsWith(CRYPTOMATOR_FILENAME_EXT)) {\n            v = vaultListManager.add(potentialVaultPath.getParent());\n        } else {\n            v = vaultListManager.add(potentialVaultPath);\n        }\n        if (v.isUnlocked()) {\n            vaultService.reveal(v);\n        }", "private void registerVerticaEnvironment(GenericContainer<?> verticaContainer, ConfigurableEnvironment environment, VerticaProperties properties) {\n    Integer mappedPort = verticaContainer.getMappedPort(properties.getPort());\n    String host = verticaContainer.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.vertica.port\", mappedPort);\n    map.put(\"embedded.vertica.host\", host);\n    map.put(\"embedded.vertica.database\", properties.getDatabase());\n    map.put(\"embedded.vertica.user\", properties.getUser());\n    map.put(\"embedded.vertica.password\", properties.getPassword());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedVerticaInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "public void copySavedReport(String saved, String copy) throws Exception {\n    try {\n        reportingAdminServiceStub.copySavedReport(saved, copy);\n    } catch (Exception e) {\n        String msg = \"Unable to copy the report\";", "public List<File> filterCacheBy(List<File> input, String key, boolean isVersion) {\n    String pathSeparator = isVersion ? separator : \"\";\n    List<File> output = new ArrayList<>(input);\n    if (!key.isEmpty() && !input.isEmpty()) {\n        output = input.stream().filter(file -> file.toString().toLowerCase(ROOT).contains(pathSeparator + key.toLowerCase(ROOT))).collect(toList());\n    }", "@Override\npublic Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {\n    try {\n        // For Tomcat, obj will always be an object of type Reference\n        Reference ref = (Reference) obj;\n        String objectName = name.toString();\n        String targetClassName = ref.getClassName();\n        //Class targetClass = Class.forName(targetClassName);", "private void assertDriver(WebDriverManager wdm) {\n    File driver = new File(wdm.getDownloadedDriverPath());", "    parser.getInterpreter().setPredictionMode(PredictionMode.SLL);\n    parser.removeErrorListeners();\n    parser.addErrorListener(errorListener);\n    GremlinParser.QueryListContext queryContext;\n    try {\n        queryContext = parser.queryList();\n    } catch (Exception ex) {\n        // Retry parsing the query again with using LL prediction mode.  LL parsing mode is more powerful\n        // so retrying the parsing would help parsing the rare edge cases.\n        try {\n            // rewind input stream\n            tokens.seek(0);\n            lexer.reset();\n            parser.reset();\n            parser.getInterpreter().setPredictionMode(PredictionMode.LL);", "@Override\npublic void log(Request request, Response response) {\n    // Trying to replicate this logback pattern:\n    // %h %l %user [%t{dd/MMM/yyyy:HH:mm:ss Z}] \"%r\" %s %b \"%i{Referer}\" \"%i{User-Agent}\" %D\n    String remoteHost = swallowExceptions(request, HttpServletRequest::getRemoteHost);\n    String user = swallowExceptions(request, HttpServletRequest::getRemoteUser);\n    String requestURL = findRequestURI(request);\n    int statusCode = response.getStatus();\n    long length = response.getContentLength();\n    String referer = swallowExceptions(request, r -> r.getHeader(\"Referer\"));\n    String userAgent = swallowExceptions(request, r -> r.getHeader(\"User-Agent\"));\n    long requestTimeStamp = request != null ? request.getTimeStamp() : -1;\n    long now = System.currentTimeMillis();\n    long serviceTime = requestTimeStamp < 0 ? -1 : now - requestTimeStamp;", "protected CustomEntry getEntryByDn(String dn, String... ldapReturnAttributes) {\n    try {\n        return ldapEntryManager.find(dn, CustomEntry.class, ldapReturnAttributes);\n    } catch (EntryPersistenceException epe) {", "public String[] getMandatoryAttributeNames(String className) throws Exception {\n    try {\n        return reportingAdminServiceStub.getMandatoryAttributeNames(className);\n    } catch (Exception e) {\n        String msg = \"Unable to get mandatory attribute names\";", "private static void handleStorage(RedisAPI redisAPI, final String redisKey, int ttl, final Handler<Boolean> callback) {\n    // read from storage\n    redisAPI.get(redisKey, reply -> {\n        if (reply.failed()) {", "public <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> function) {\n    if (valueSet) {\n        DeferredChanged<Q> nextDeferred = function.apply(this.valueOptional);", "        String contentType = msgContext.getProperty(MESSAGE_TYPE).toString();\n        if (log.isDebugEnabled()) {\n            log.debug(\"Message content type retrieved in the message is: \" + contentType);\n        }\n        if (contentType.equalsIgnoreCase(InboundGRPCConstants.CONTENT_TYPE_JSON_MIME_TYPE)) {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(JsonUtil.getJsonPayload(msgContext)));\n            StringBuilder stringBuilder = new StringBuilder();\n            String line;\n            try {\n                while ((line = bufferedReader.readLine()) != null) {\n                    stringBuilder.append(line);\n                }\n                content = stringBuilder.toString();\n            } catch (IOException e) {\n                String msg = \"Error occurred while converting payload to json. \" + e.getMessage();", "public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof DelegationCallback) {\n            DelegationCallback callback = (DelegationCallback) callbacks[i];\n            Element token = SecurityTokenThreadLocal.getToken();\n            if (token == null) {", "@Override\nprotected boolean isReady() {\n    String containerId = waitStrategyTarget.getContainerId();", "@Override\npublic void visitSignedLong(String name, long id, long value) {", "private void registerStorageEnvironment(GenericContainer<?> container, ConfigurableEnvironment environment, StorageProperties properties) {\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.google.storage.host\", container.getHost());\n    map.put(\"embedded.google.storage.port\", container.getMappedPort(StorageProperties.PORT));\n    map.put(\"embedded.google.storage.endpoint\", buildContainerEndpoint(container));\n    map.put(\"embedded.google.storage.project-id\", properties.getProjectId());\n    map.put(\"embedded.google.storage.bucket-location\", properties.getBucketLocation());", "@Override\npublic void visit(LockType lockType, ResourceType resourceType, long transactionId, long resourceId, String description, long estimatedWaitTime, long lockIdentityHashCode) {", "private static RuleSet toRuleSet(ServerApi serverApi, Map<String, RuleSet> currentRuleSets, QualityProfile profile, boolean forceUpdate, ProgressMonitor progressMonitor) {\n    var language = profile.getLanguage();\n    if (forceUpdate || newlySupportedLanguage(currentRuleSets, language) || profileModifiedSinceLastSync(currentRuleSets, profile, language)) {\n        var profileKey = profile.getKey();", "@Override\npublic Response toResponse(Throwable exception) {\n    try {\n        if (exception instanceof WebApplicationException) {\n            final Response response = ((WebApplicationException) exception).getResponse();\n            if (response != null && response.getStatus() > 0) {\n                return response;\n            }\n        }", "    }\n    URL resourceURL;\n    File f = new File(resourcePath);\n    if (f.isFile()) {\n        resourceURL = f.toURI().toURL();\n    } else {\n        resourceURL = ZipResourceExtractor.class.getResource(resourcePath);\n    }\n    if (resourceURL == null) {\n        throw new NullPointerException(\"Could not retrieve resource for path: \" + resourcePath);\n    }\n    try (InputStream resourceInputStream = resourceURL.openStream()) {\n        try {\n            String outname = new File(resourceURL.getPath()).getName();\n            outname = outname.replaceAll(\"%20\", \" \");", "public void abortConsumer(ObjectName consumerToAbort) {\n    Subscription sub = broker.getSubscriber(consumerToAbort);\n    if (sub != null) {\n        LOG.info(\"aborting consumer via jmx: {}\", sub.getConsumerInfo().getConsumerId());\n        strategy.abortConsumer(sub, false);\n    } else {", "    if (e instanceof RenderTemplateException) {\n        RenderTemplateException render = (RenderTemplateException) e;\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        Capability capability = render.getCapability();\n        if (capability instanceof FormCapability) {\n            try {\n                mediaTypeHandlerContainer.write(out, mediaTypeHandler.accept(), FormCapability.class, (FormCapability) capability);\n            } catch (IOException e1) {\n                throw new RuntimeException(e1);\n            }\n        }\n        return new Response(render.getCode(), new String(out.toByteArray()));\n    } else if (e instanceof AbstractHtmlException) {\n        return new Response(((AbstractHtmlException) e).getCode(), e.getMessage());\n    } else {", "@Test\nvoid test() {\n    String sutUrl = \"https://bonigarcia.dev/selenium-webdriver-java/\";\n    driver.get(sutUrl);\n    String title = driver.getTitle();", "@Override\npublic void failed(Exception e) {", "        jc.usage();\n        System.exit(-1);\n    }\n    if (arguments.help) {\n        jc.usage();\n        System.exit(-1);\n    }\n    Configuration conf = new CompositeConfiguration();\n    conf.setProperty(Stats.STATS_PROVIDER_CLASS, PrometheusMetricsProvider.class.getName());\n    conf.setProperty(\"prometheusStatsHttpPort\", arguments.statsPort);\n    Stats.loadStatsProvider(conf);\n    StatsProvider provider = Stats.get();\n    provider.start(conf);\n    Runtime.getRuntime().addShutdownHook(new Thread(() -> provider.stop(), \"benchmark-worker-shutdown-thread\"));\n    // Dump configuration variables", "public void testElementToTypeMapping() throws Exception {\n    File schema1 = new File(BASEDIR, \"src/test/resources/schema/schema4.xsd\");\n    log.debug(\"SCHEMA 4\");\n    Map map = parse(schema1);\n    assertEquals(3, map.size());\n    Map elements = schemaInfoBuilder.getElementToTypeMap();\n    log.debug(\"ELEMENT MAP\");", "private void log(String s) {\n    s = s.strip();\n    switch(level) {\n        case INFO ->", "@Test(timeout = 120 * 1000)\npublic void testRecoverWhenSomeLogsAreMissing() throws Exception {\n    fillUpSomeLogFiles();\n    int jobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();", "@ParameterizedTest\n@EnumSource(names = { \"DEFAULT\", \"X32\", \"X64\" })\nvoid testLatestVersion(Architecture architecture) throws Exception {\n    WebDriverManager wdm = WebDriverManager.getInstance(driverClass);\n    String osLabel = \"\";\n    if (os != null) {\n        wdm.operatingSystem(os);\n        osLabel = \" os=\" + os;\n    }\n    if (architecture != DEFAULT) {\n        wdm.architecture(architecture);\n    }", "private void createTopic(TopicConfiguration topicConfiguration) {\n    String topic = topicConfiguration.getTopic();\n    int partitions = topicConfiguration.getPartitions();\n    String containerBrokerList = format(\"%s:%d\", KAFKA_HOST_NAME, kafkaProperties.getInternalBrokerPort());\n    String[] createTopicCmd = getCreateTopicCmd(topic, partitions, containerBrokerList);\n    Container.ExecResult execResult = executeInContainer(this.kafka, createTopicCmd);", "@Test\nvoid edgeVersionTest() throws Exception {\n    Config config = new Config();\n    HttpClient httpClient = new HttpClient(config);\n    VersionDetector versionDetector = new VersionDetector(config, httpClient);\n    Optional<String> driverVersion = Optional.empty();\n    URL driverUrl = new URL(\"https://msedgedriver.azureedge.net/\");\n    Charset versionCharset = UTF_16;\n    String driverName = \"msedgedriver\";\n    String versionLabel = \"LATEST_STABLE\";\n    Optional<String> osLabel = Optional.empty();\n    Optional<String> driverVersionFromRepository = versionDetector.getDriverVersionFromRepository(driverVersion, driverUrl, versionCharset, driverName, versionLabel, versionLabel, osLabel);\n    assertThat(driverVersionFromRepository).isPresent();\n    String edgeVersion = driverVersionFromRepository.get();", "public Response requestRpt(String grantType, String ticket, String claimToken, String claimTokenFormat, String pctCode, String rptCode, String scope, HttpServletRequest httpRequest, HttpServletResponse httpResponse) {\n    try {", "protected ExtendedSelenium createSeleniumClient(String url) throws Exception {\n    super.setUp();\n    if (url == null) {\n        // url = \"http://localhost:\" + SeleniumServer.DEFAULT_PORT;\n        // post 1.0-beta-1 builds don't define DEFAULT_PORT\n        url = \"http://localhost:4444\";\n    }\n    String browser = System.getProperty(\"browser\", \"*firefox\");", "@GET\n@Path(\"/session_status\")\n@Produces({ MediaType.APPLICATION_JSON })\npublic Response requestCheckSessionStatus(@Context HttpServletRequest httpRequest, @Context HttpServletResponse httpResponse, @Context SecurityContext securityContext) throws IOException {\n    String sessionIdCookie = cookieService.getSessionIdFromCookie(httpRequest);", "        return;\n    } else if (!validPassword(password)) {\n        passwordId.requestFocus();\n        DailogUtil.showTipDailogCenter(\"\u5bc6\u7801\u9519\u8bef\", getThisStage());\n        return;\n    }\n    //\u89e3\u5bc6\u94b1\u5305\u5e76\u5224\u65ad\u7ed3\u679c\n    AccountKit accountKit = InchainInstance.getInstance().getAccountKit();\n    Result result = accountKit.decryptAccount(password, null, 2);\n    if (result.isSuccess()) {\n        resetAndclose();\n        if (callback != null) {\n            callback.ok(null);\n        }\n    } else {", "@Override\npublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n    if (failed || isShuttingDown(ctx)) {\n        return;\n    }\n    // log only the first exception to not pollute the log\n    failed = true;\n    try {\n        // Netty throws a NativeIoException on connection reset - directly importing that class\n        // caused a host of linking errors, because it depends on JNI to work. Hence, we just\n        // test on the message we know we'll get.\n        if (Exceptions.contains(cause, e -> e.getMessage() != null && e.getMessage().contains(\"Connection reset by peer\"))) {\n            log.warn(\"Fatal error occurred when handling a client connection, \" + \"remote peer unexpectedly closed connection: %s\", ctx.channel());\n        } else {", "@Override\npublic Response deviceAuthorization(String clientId, String scope, HttpServletRequest httpRequest, HttpServletResponse httpResponse, SecurityContext securityContext) {\n    // it may be encoded\n    scope = ServerUtil.urlDecode(scope);\n    OAuth2AuditLog oAuth2AuditLog = new OAuth2AuditLog(ServerUtil.getIpAddress(httpRequest), Action.DEVICE_CODE_AUTHORIZATION);\n    oAuth2AuditLog.setClientId(clientId);\n    oAuth2AuditLog.setScope(scope);\n    try {", "public Optional<ServerProject> getSonarProject(String connectionId, String sonarProjectKey) {\n    try {\n        return singleProjectsCache.get(new SonarProjectKey(connectionId, sonarProjectKey), () -> {", "                String name = destination.getString(\"name\");\n                Map<String, String> options = new HashMap<>();\n                options.put(\"type\", destination.getString(\"type\"));\n                String typeLocation = null;\n                if (destination.getString(\"type\").equalsIgnoreCase(\"file\")) {\n                    typeLocation = \"file\";\n                } else if (destination.getString(\"type\").equalsIgnoreCase(\"eventBus\")) {\n                    typeLocation = \"address\";\n                    options.put(\"metadata\", StringUtils.getStringOrEmpty(destination.getString(\"metadata\")));\n                    options.put(\"transmission\", StringUtils.getStringOrDefault(destination.getString(\"transmission\"), \"publish\"));\n                }\n                if (typeLocation != null) {\n                    options.put(typeLocation, destination.getString(typeLocation));\n                    destinationEntries.put(name, options);\n                } else {", "@Override\npublic Appendable targetUTF8(String name, long id) {", "@POST\n@Path(\"/revoke_session\")\n@Produces({ MediaType.APPLICATION_JSON })\npublic Response requestRevokeSession(@FormParam(\"user_criterion_key\") String userCriterionKey, @FormParam(\"user_criterion_value\") String userCriterionValue, @Context HttpServletRequest request, @Context HttpServletResponse response, @Context SecurityContext sec) {\n    try {", "    if (upToDate(serverPlugin, storedPluginsByKey)) {\n        LOG.debug(\"[SYNC] Code analyzer '{}' is up-to-date. Skip downloading it.\", serverPlugin.getKey());\n        return false;\n    }\n    if (!serverPlugin.isSonarLintSupported()) {\n        LOG.debug(\"[SYNC] Code analyzer '{}' does not support SonarLint. Skip downloading it.\", serverPlugin.getKey());\n        return false;\n    }\n    if (sonarSourceDisabledPluginKeys.contains(serverPlugin.getKey())) {\n        LOG.debug(\"[SYNC] Code analyzer '{}' is disabled in SonarLint (language not enabled). Skip downloading it.\", serverPlugin.getKey());\n        return false;\n    }\n    var pluginVersion = VersionUtils.getJarVersion(serverPlugin.getFilename());\n    if (!pluginsMinVersions.isVersionSupported(serverPlugin.getKey(), pluginVersion)) {\n        var minimumVersion = pluginsMinVersions.getMinimumVersion(serverPlugin.getKey());", "private static void handleException(String msg, Throwable throwable) {", "@Override\npublic TrustedIdpProtocolHandler getProtocolHandler(String protocol) {\n    for (TrustedIdpProtocolHandler protocolHandler : protocolHandlers) {\n        if (protocolHandler.getProtocol().equals(protocol)) {\n            return protocolHandler;\n        }\n    }", "@Override\npublic void exec(int executionCounter) {\n    List<String> args = RedisUtils.toPayload(luaScriptState.getSha(), keys.size(), keys, arguments);\n    redisAPI.evalsha(args, event -> {\n        if (event.succeeded()) {\n            Response response = event.result();\n            if (response != null && response.size() != 0) {\n                promise.complete(response);\n            } else {\n                promise.complete(MultiType.EMPTY_MULTI);\n            }\n        } else {\n            String message = event.cause().getMessage();\n            if (message != null && message.startsWith(\"NOSCRIPT\")) {\n                log.warn(\"RemoveExpiredQueuesRedisCommand script couldn't be found, reload it\");", "@Test\nvoid testCachePathStartsWithTildeSlash() {\n    String customPath = \"~/webdrivers\";\n    wdm.config().setCachePath(customPath);\n    String cachePath = wdm.config().getCachePath();", "    final WorkloadGenerationTool.Arguments arguments = new WorkloadGenerationTool.Arguments();\n    JCommander jc = new JCommander(arguments);\n    jc.setProgramName(\"workload-generator\");\n    try {\n        jc.parse(args);\n    } catch (ParameterException e) {\n        System.err.println(e.getMessage());\n        jc.usage();\n        System.exit(-1);\n    }\n    if (arguments.help) {\n        jc.usage();\n        System.exit(-1);\n    }\n    // Dump configuration variables", "@Override\npublic JobMetadata getDeletedJobMetadata(String jobId) throws IOException, JobNotFoundException {", "@Override\npublic void partialRecovery(RecoveryPredicate recoveryPredicate, CommittedTransactionRepresentation lastTransaction) {", "@Override\npublic void onException(IOException error) {\n    synchronized (this) {\n        setHasExpired(true);\n        // only log if not stopped\n        if (!stopped.get()) {", "private void registerEnvironment(GenericContainer<?> azurite, ConfigurableEnvironment environment, AzuriteProperties properties) {\n    Integer mappedBlobStoragePort = azurite.getMappedPort(properties.getBlobStoragePort());\n    Integer mappedQueueStoragePort = azurite.getMappedPort(properties.getQueueStoragePort());\n    Integer mappedTableStoragePort = azurite.getMappedPort(properties.getTableStoragePort());\n    String host = azurite.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.azurite.host\", host);\n    map.put(\"embedded.azurite.blobStoragePort\", mappedBlobStoragePort);\n    map.put(\"embedded.azurite.queueStoragePor\", mappedQueueStoragePort);\n    map.put(\"embedded.azurite.tableStoragePort\", mappedTableStoragePort);\n    map.put(\"embedded.azurite.account-name\", AzuriteProperties.ACCOUNT_NAME);\n    map.put(\"embedded.azurite.account-key\", AzuriteProperties.ACCOUNT_KEY);\n    map.put(\"embedded.azurite.blob-endpoint\", \"http://\" + host + \":\" + mappedBlobStoragePort + \"/\" + AzuriteProperties.ACCOUNT_NAME);\n    map.put(\"embedded.azurite.queue-endpoint\", \"http://\" + host + \":\" + mappedQueueStoragePort + \"/\" + AzuriteProperties.ACCOUNT_NAME);\n    map.put(\"embedded.azurite.table-endpoint\", \"http://\" + host + \":\" + mappedTableStoragePort + \"/\" + AzuriteProperties.ACCOUNT_NAME);", "@Override\npublic CompletableFuture<Void> createTopic(String topic, int partitions) {\n    topic = cleanName(topic);", "private void failed(Throwable e) {\n    while (e.getCause() != null && e.getClass() == RuntimeException.class) {\n        e = e.getCause();\n    }\n    setException(e);", "@Override\nprotected void setBatch(MessageId messageId) throws Exception {\n    if (LOG.isTraceEnabled()) {", "private boolean authorize(String username, String desiredRole) {\n    try {\n        String[] listOfRoles = MicroIntegratorSecurityUtils.getUserStoreManager().getRoleListOfUser(username);\n        if (LOG.isDebugEnabled()) {", "@Override\npublic void error(Throwable cause) {", "public HttpService getHttpService() throws Exception {\n    if (httpService == null) {\n        String msg = \"Before activating Carbon Core bundle, an instance of \" + HttpService.class.getName() + \" should be in existance\";", "public Optional<String> getDriverFromCache(String driverVersion, String driverName, DriverManagerType driverManagerType, Architecture arch, String os) {", "protected boolean addToAlreadyInterestedConsumers(ConsumerInfo info, boolean isForcedDurable) {\n    //If a network subscription and a queue check if isConduitNetworkQueueSubscriptions is true\n    //If true then we want to try and conduit\n    //For topics we always want to conduit regardless of network subscription or not\n    if (info.isNetworkSubscription() && info.getDestination().isQueue() && !configuration.isConduitNetworkQueueSubscriptions()) {\n        return false;\n    }\n    boolean matched = false;\n    // search through existing subscriptions and see if we have a match\n    for (DemandSubscription ds : subscriptionMapByLocalId.values()) {\n        DestinationFilter filter = DestinationFilter.parseFilter(ds.getLocalInfo().getDestination());\n        if (canConduit(ds) && filter.matches(info.getDestination())) {", "@Override\npublic void dispatchEvent(IEvent event) {", "private void handleException(IOSession session, MLLPContext mllpContext, Exception e) {", "private static Predicate<? super SonarLintRuleDefinition> isExcludedByConfiguration(Set<String> excludedRules) {\n    return r -> {\n        if (excludedRules.contains(r.getKey())) {\n            return false;\n        }\n        for (String deprecatedKey : r.getDeprecatedKeys()) {\n            if (excludedRules.contains(deprecatedKey)) {", "@Override\npublic void onSharedObjectDelete(ISharedObjectBase so, String arg1) {", " * When the configuration resource contains invalid regex patterns, a warning will be logged and the corresponding\n * {@link ContentTypeConstraint} object will not be included in the returned list.\n *\n * @param constraintResourceBuffer the resource to create the {@link ContentTypeConstraint}s from\n * @return a list of {@link ContentTypeConstraint} objects\n */\nstatic List<ContentTypeConstraint> create(Buffer constraintResourceBuffer) {\n    List<ContentTypeConstraint> constraints = new ArrayList<>();\n    JsonObject config = constraintResourceBuffer.toJsonObject();\n    for (String urlPattern : config.fieldNames()) {\n        try {\n            Pattern pattern = Pattern.compile(urlPattern);\n            final List<PatternHolder> allowedTypes = extractAllowedTypes(config.getJsonObject(urlPattern));\n            if (!allowedTypes.isEmpty()) {\n                constraints.add(new ContentTypeConstraint(new PatternHolder(pattern.pattern()), allowedTypes));", "String ofInstance(Object component, SonarLintLogger log) {\n    var key = component.toString();\n    if (IDENTITY_HASH_PATTERN.matcher(key).matches()) {\n        if (!objectsWithoutToString.add(component.getClass())) {", "public void putValueInResolutionCacheIfEmpty(String key, String value, int ttl) {\n    if (ttl > 0 && getValueFromResolutionCache(key) == null) {\n        props.put(key, value);\n        long now = new Date().getTime();\n        Date expirationDate = new Date(now + SECONDS.toMillis(ttl));\n        String expirationDateStr = formatDate(expirationDate);\n        props.put(getExpirationKey(key), expirationDateStr);\n        if (log.isDebugEnabled()) {", "@Test\nvoid testCachePath() throws IOException {\n    Path tmpFolder = createTempDirectory(\"\").toRealPath();\n    wdm.config().setCachePath(tmpFolder.toString());", "@ParameterizedTest\n@ValueSource(strings = { \"chrome\", \"firefox\" })\nvoid test(String defaultBrowser) {\n    System.setProperty(\"wdm.defaultBrowser\", defaultBrowser);\n    wdm = WebDriverManager.getInstance();\n    driver = wdm.create();\n    String sutUrl = \"https://bonigarcia.dev/selenium-webdriver-java/\";\n    driver.get(sutUrl);\n    String title = driver.getTitle();", "public String getSessionId(WebDriver webDriver) {\n    String sessionId = ((RemoteWebDriver) webDriver).getSessionId().toString();", "protected void unregisterMBean(ObjectName name) {\n    if (name != null) {\n        try {\n            managementContext.unregisterMBean(name);\n        } catch (Throwable e) {", " * @param sourcePrincipal the principal in the source realm\n * @param targetRealm the target realm of the Principal\n * @return the principal in the target realm\n */\npublic Principal mapPrincipal(String sourceRealm, Principal sourcePrincipal, String targetRealm) {\n    if (sourcePrincipal == null) {\n        return null;\n    }\n    String name = sourcePrincipal.getName().toLowerCase();\n    if (name.contains(delimiter)) {\n        // Remove previous realm\n        name = name.substring(0, name.indexOf(delimiter));\n    }\n    // Add target realm\n    name = name + getDelimiter() + targetRealm;", "@Test\nvoid test() {\n    String sutUrl = \"https://bonigarcia.dev/selenium-webdriver-java/\";\n    driver.get(sutUrl);\n    String title = driver.getTitle();", "@Override\npublic JobScheduler getJobScheduler(String name) throws Exception {\n    this.lock.lock();\n    try {\n        InMemoryJobScheduler result = this.schedulers.get(name);\n        if (result == null) {", "private long getStateInitValue(final String lastId) {\n    long stateInitValue = 0L;\n    if (lastId != null) {\n        try {\n            stateInitValue = Long.parseLong(lastId) + 1;\n        } catch (NumberFormatException nfe) {", "private void registerEnvironment(GenericContainer<?> prometheus, ConfigurableEnvironment environment, PrometheusProperties properties) {\n    Integer mappedPort = prometheus.getMappedPort(properties.port);\n    String host = prometheus.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.prometheus.host\", host);\n    map.put(\"embedded.prometheus.port\", mappedPort);", "public Xid[] recover(int arg0) throws XAException {\n    Xid[] answer = null;", "@Test\npublic void testSerialize() throws Exception {\n    TemporaryFolder folder = new TemporaryFolder();\n    folder.create();\n    File source = folder.newFile();\n    MessageTest.writeContentsToFile(source, testString);\n    Message in = new FileMessage(source, \"UTF-8\");\n    assertEquals(testStringLength, in.size());\n    byte[] wire = serializationTester.serialize(in);", "    Iterator iterator = result.getChildrenWithLocalName(\"timeStamp\");\n    String timeStampString = null;\n    while (iterator.hasNext()) {\n        OMElement timeStamp = (OMElement) iterator.next();\n        if (timeStampString == null) {\n            timeStampString = timeStamp.getChildrenWithLocalName(\"testTimeStamp\").next().toString();\n            log.info(\"TimeStamp Recv:\" + timeStampString);\n            Assert.assertTrue(timeStampString.contains(\"1970-01-02T05:00:00.000+00:00\"));\n        } else {\n            String tempTimeStamp = timeStamp.getChildrenWithLocalName(\"testTimeStamp\").next().toString();\n            log.info(\"Timestamp Comapre:\" + timeStampString + \"|\" + tempTimeStamp);\n            Assert.assertFalse(timeStampString.equals(tempTimeStamp));\n        }\n    }\n    Assert.assertNotNull(result, \"Response message null \");", "@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    if (log.isDebugEnabled()) {", "/**\n * Checks if there exists a handling for the given <code>statusCode</code> in the\n * rules for this request.\n *\n * @param statusCode the original status code\n * @param rule the rule matching the current request\n * @param log extra configured logger\n * @return the translated status or if no translation was carried out the original status code.\n */\npublic static int translateStatusCode(int statusCode, Rule rule, Logger log) {\n    Integer translatedStatus = null;\n    if (rule.getTranslateStatus() != null) {\n        for (Map.Entry<Pattern, Integer> entry : rule.getTranslateStatus().entrySet()) {\n            if (entry.getKey().matcher(\"\" + statusCode).matches()) {\n                if (log != null) {", "/**\n * {@inheritDoc}\n */\n@Override\npublic void exceptionCaught(IoSession session, Throwable cause) throws Exception {", "@Override\npublic Future<Long> cacheEntriesCount() {\n    Promise<Long> promise = Promise.promise();\n    redisAPI.scard(CACHED_REQUESTS, reply -> {\n        if (reply.failed()) {\n            String message = \"Failed to get count of cached requests. Cause: \" + logCause(reply);", "/**\n * Registers a plug-in.\n *\n * @param plugin\n *            plugin\n */\npublic static void register(IRed5Plugin plugin) {", "/**\n * Transitions from <code>fromState</code> to <code>toState</code>.\n *\n * @param fromState Previous state\n * @param toState New state\n * @return <code>true</code> if successful\n */\npublic boolean transition(Value fromState, Value toState) {\n    Preconditions.checkArgument(fromState != toState, \"fromState must be different than toState\");\n    boolean success = value.compareAndSet(fromState, toState);\n    if (success) {\n        fireValueChangedEvent();\n    } else {", "@Override\npublic void info(String message, Throwable cause) {", "void addKafkaProducer(KafkaConfiguration config) {", "public DeferredChanged<List<Optional<? super T>>> build() {\n    if (deferredValues.isEmpty()) {\n        return DeferredChanged.empty();\n    }\n    log.debug(\"Building collected deferred {}\", DeferredLogger.logValue(deferredValues));\n    final PendingChanged<List<Optional<? super T>>> changed = new PendingChanged<>();\n    whenSet.forEach(changed::whenSet);\n    Optional[] values = new Optional[deferredValues.size()];\n    IntStream.range(0, deferredValues.size()).forEach(i -> {\n        DeferredChanged<? extends T> deferredItem = deferredValues.get(i);\n        deferredItem.whenSet(value -> {\n            values[i] = value;", "protected void consumeBatch() throws Exception {\n    Destination destination = session.createQueue(DESTINATION);\n    final MessageConsumer messageConsumer = session.createConsumer(destination);\n    try {\n        for (int i = 0; i < 10; ++i) {\n            final Message message = messageConsumer.receive(1000L);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"vault\")\nToxiproxyContainer.ContainerProxy vaultContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_VAULT) VaultContainer vault, ConfigurableEnvironment environment, VaultProperties properties) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(vault, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.vault.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.vault.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.vault.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedVaultToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Override\npublic void run() {\n    try {\n        String name = THREAD_NAME_PREFIX + Thread.currentThread().getName();", "        for (Peer peer : peerKit.findAvailablePeers()) {\n            if (excludePeer == null || (excludePeer != null && !peer.equals(excludePeer))) {\n                try {\n                    peer.sendMessage(message);\n                    successCount++;\n                } catch (NotYetConnectedException | IOException e) {\n                    log.warn(\"\u5e7f\u64ad\u6d88\u606f\u51fa\u9519\uff0c\u53ef\u80fd\u539f\u56e0\u662f\u8be5\u8282\u70b9\u8fde\u63a5\u5df2\u5173\u95ed, {}\", e.getMessage());\n                }\n            }\n        }\n        return successCount;\n    } else {\n        log.warn(\"\u5e7f\u64ad\u6d88\u606f\u5931\u8d25\uff0c\u6ca1\u6709\u53ef\u5e7f\u64ad\u7684\u8282\u70b9\");\n    }\n    if (log.isDebugEnabled()) {", "private void registerMySQLEnvironment(MySQLContainer mysql, ConfigurableEnvironment environment, MySQLProperties properties) {\n    Integer mappedPort = mysql.getMappedPort(properties.getPort());\n    String host = mysql.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.mysql.port\", mappedPort);\n    map.put(\"embedded.mysql.host\", host);\n    map.put(\"embedded.mysql.schema\", properties.getDatabase());\n    map.put(\"embedded.mysql.user\", properties.getUser());\n    map.put(\"embedded.mysql.password\", properties.getPassword());\n    String jdbcURL = \"jdbc:mysql://{}:{}/{}\";", "@Override\nprotected void failed() {\n    try {\n        Throwable exception = getException();\n        errorHandlers.stream().filter(handler -> handler.handles(exception)).findFirst().ifPresentOrElse(exceptionHandler -> {\n            exceptionHandler.handle(exception);\n        }, () -> {", "public void stopping(Artifact configurationId) {", "    final StringBuilder log = new StringBuilder(0);\n    for (final Map.Entry<Votes, Integer> ent : this.voters.entrySet()) {\n        dirs.add(\"vote\").attr(\"author\", ent.getKey().toString()).attr(\"weight\", ent.getValue());\n        for (final String login : this.logins) {\n            log.setLength(0);\n            try {\n                dirs.add(\"person\").attr(\"login\", login).attr(\"points\", ent.getKey().take(login, log)).set(log.toString()).up();\n            } catch (final IOException err) {\n                throw new IllegalStateException(\"Failed to vote\", err);\n            }\n        }\n        dirs.up();\n    }\n    final String ltag = \"com.zerocracy.election\";\n    if (Logger.isDebugEnabled(ltag)) {", "protected void readMessagesOnBroker(int count) throws Exception {\n    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n    Queue queue = session.createQueue(getDestinationName());\n    MessageConsumer consumer = session.createConsumer(queue);\n    for (int i = 0; i < MESSAGE_COUNT; ++i) {\n        Message message = consumer.receive(RECEIVE_TIMEOUT);\n        assertNotNull(message);", "        repeatId.requestFocus();\n        DailogUtil.showTipDailogCenter(\"\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u4e0d\u4e00\u81f4\", getThisStage());\n        return;\n    } else if (!validPassword(password)) {\n        passwordId.requestFocus();\n        DailogUtil.showTipDailogCenter(\"\u8f93\u5165\u7684\u5bc6\u7801\u97006\u4f4d\u6216\u4ee5\u4e0a\uff0c\u4e14\u5305\u542b\u5b57\u6bcd\u548c\u6570\u5b57\", getThisStage());\n        return;\n    }\n    //\u52a0\u5bc6\u5e76\u5224\u65ad\u7ed3\u679c\n    AccountKit accountKit = InchainInstance.getInstance().getAccountKit();\n    Result result = accountKit.encryptWallet(password, null);\n    if (result.isSuccess()) {\n        DailogUtil.showTipDailogCenter(result.getMessage(), getThisStage());\n        resetAndclose();\n    } else {", "public void execute(ISchedulingService service) {\n    log.debug(\"Reaper running...\");\n    if (sessions != null) {\n        if (!sessions.isEmpty()) {\n            long now = System.currentTimeMillis();\n            for (Map.Entry<String, ISession> entry : sessions.entrySet()) {\n                ISession session = entry.getValue();\n                long creationTime = session.getCreated();\n                // check if session life exceeds max lifetime\n                if (now - creationTime > SessionManager.maxLifetime) {\n                    String key = session.getSessionId();", "public void succeeded(Artifact configurationId) {", "@Override\nprotected void failed() {\n    final var throwable = super.getException();", "@Test\nvoid ignoredVersionsFirefox() {\n    String[] ignoredVersions = { \"0.28.0\", \"0.29.0\" };\n    wdm = WebDriverManager.firefoxdriver().ignoreDriverVersions(ignoredVersions);\n    wdm.setup();\n    String driverVersion = wdm.getDownloadedDriverVersion();", "    driver.findElement(By.xpath(\"//span[text()='=']\")).click();\n    // ... should be 4, wait for it\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    wait.until(ExpectedConditions.textToBe(By.className(\"screen\"), \"4\"));\n    wdm.stopRecording();\n    long timeoutMs = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(REC_TIMEOUT_SEC);\n    File recFile;\n    do {\n        recFile = new File(targetFolder, REC_FILENAME + REC_EXT);\n        if (System.currentTimeMillis() > timeoutMs) {\n            fail(\"Timeout of \" + REC_TIMEOUT_SEC + \" seconds waiting for recording \" + recFile);\n            break;\n        }\n        Thread.sleep(POLL_TIME_MSEC);\n    } while (!recFile.exists());", "private ObjectName toObjectName(String objectName) {\n    ObjectName result = null;\n    try {\n        result = new ObjectName(objectName);\n    } catch (Exception e) {", "@Override\npublic Future<Result<Buffer, StatusCode>> fetchData(final String requestUri, HeadersMultiMap requestHeaders, long requestTimeoutMs) {\n    Promise<Result<Buffer, StatusCode>> promise = Promise.promise();\n    requestHeaders.remove(cacheControlHeader);\n    clientRequestCreator.createClientRequest(HttpMethod.GET, requestUri, requestHeaders, requestTimeoutMs, event -> {\n        log.warn(\"Got an error while fetching cache data\", event);\n        promise.complete(Result.err(StatusCode.INTERNAL_SERVER_ERROR));\n    }).onComplete(event -> {\n        if (event.failed()) {", "private static void log(InternalLog log, int level, String message, Throwable throwable) {\n    if (level <= Level.FINE.intValue()) {\n        if (throwable == null) {", "@Override\npublic void visitSequenceOpen(String name, long id, int length) {\n    tab++;", "/**\n * Redirect to HTTP port.\n */\n@Override\nprotected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    HttpClient client = HttpConnectionUtil.getClient(connectionTimeout);\n    //setup POST\n    HttpPost post = null;\n    try {\n        post = new HttpPost(postAcceptorURL);\n        String path = req.getContextPath();\n        if (path == null) {\n            path = \"\";\n        }", "@Bean(name = BEAN_NAME_EMBEDDED_NATS_TOXI_PROXY)\n@ConditionalOnToxiProxyEnabled(module = \"nats\")\nToxiproxyContainer.ContainerProxy natsContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_NATS) GenericContainer<?> natsContainer, NatsProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(natsContainer, properties.getClientPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.nats.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.nats.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.nats.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedNatsToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "            try {\n                LOG.info(\"Adding admin users from group: \" + groupName);\n                Group group = provider.getGroup(groupName);\n                if (group != null) {\n                    results.addAll(group.getMembers());\n                }\n            } catch (GroupNotFoundException gnfe) {\n                LOG.error(\"Error when trying to load the members of group:\" + groupName, gnfe);\n            }\n        }\n    }\n    if (results.isEmpty()) {\n        // Add default admin account when none was specified\n        results.add(new JID(\"admin\", XMPPServer.getInstance().getServerInfo().getXMPPDomain(), null, true));\n    }", "@ParameterizedTest\n@MethodSource(\"data\")\nvoid testServerResolver(String path, String driver) throws IOException {\n    String serverUrl = String.format(\"http://localhost:%s/%s\", serverPort, path);\n    try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n        HttpUriRequestBase request = new HttpGet(serverUrl);\n        // Assert response", "public String parse(final String input) {\n    if (input == null) {\n        throw new IllegalArgumentException(\"input\");\n    }", "public boolean modifyIdTokenMethod(CustomScriptConfiguration script, JsonWebResponse jsonWebResponse, ExternalUpdateTokenContext context) {\n    try {", "@Override\npublic Response toResponse(final Exception ex) {", "@SuppressWarnings(\"deprecation\")\n@Override\npublic void append(LogEvent event) {\n    if (event.getThrown() != null && event.getThrown() instanceof TransportDisposedIOException) {\n        // Prevent StackOverflowException so we can see a sane stack trace.\n        if (gotExceptionInLog.get()) {\n            return;\n        }\n        gotExceptionInLog.set(Boolean.TRUE);", " * @param str\n *            String representation of XML\n * @return DOM object\n * @throws IOException\n *             I/O exception\n */\npublic static Document stringToDoc(String str) throws IOException {\n    if (StringUtils.isNotEmpty(str)) {\n        try (Reader reader = new StringReader(str)) {\n            DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n            EntityResolver noop = (publicId, systemId) -> new InputSource(new StringReader(\"\"));\n            db.setEntityResolver(noop);\n            Document doc = db.parse(new InputSource(reader));\n            return doc;\n        } catch (Exception ex) {", "/**\n * \u666e\u901a\u8d26\u6237\u7684\u7b7e\u540d\n */\n@Override\npublic boolean signOneInputs(Transaction tx, ECKey key, int inputIndex) {\n    int numInputs = tx.getInputs().size();\n    if (numInputs < inputIndex + 1) {\n        log.warn(\"\u4ea4\u6613\u8f93\u5165index\u8d8a\u754c\");\n        return false;\n    }\n    TransactionInput txIn = (TransactionInput) tx.getInput(inputIndex);\n    if (txIn.getFroms() == null || txIn.getFroms().size() == 0) {", "@Override\npublic boolean recoverMessageReference(MessageId messageReference) throws Exception {\n    Message msg = this.store.getMessage(messageReference);\n    if (msg != null) {\n        return recoverMessage(msg);\n    } else {\n        String err = \"Failed to retrieve message for id: \" + messageReference;", "@ParameterizedTest\n@MethodSource(\"data\")\nvoid testChromeDriverVersions(WebDriverManager wdm) {\n    List<String> versions = wdm.getDriverVersions();", "@Override\npublic ApplicationProtocolHandler getProtocolHandler(String protocol) {\n    for (ApplicationProtocolHandler protocolHandler : protocolHandlers) {\n        if (protocolHandler.getProtocol() != null && protocolHandler.getProtocol().equals(protocol)) {\n            return protocolHandler;\n        }\n    }", "    }\n    VersionMessage peerVersion = peer.getPeerVersionMessage();\n    if (peerVersion != null) {\n        peerVersion.setBestHeight(block.getHeight());\n    }\n    for (Transaction tx : block.getTxs()) {\n        //\u79fb\u9664\u5167\u5b58\u4e2d\u7684\u4ea4\u6613\n        MempoolContainer.getInstace().remove(tx.getHash());\n    }\n    //\u533a\u5757\u53d8\u5316\u76d1\u542c\u5668\n    if (peerKit.getBlockChangedListener() != null) {\n        peerKit.getBlockChangedListener().onChanged(-1l, block.getHeight(), null, hash);\n    }\n    //\u8f6c\u53d1\u65b0\u533a\u5757\u6d88\u606f\n    if (log.isDebugEnabled()) {", "    // Only process PUT requests and request, which URL can be found\n    if (request.method().equals(HttpMethod.PUT) && propertyUrls.containsKey(request.uri())) {\n        log.info(\"Got a request to update propertyUrl=[{}]\", request.uri());\n        // process body\n        request.bodyHandler(buffer -> {\n            Map<String, String> idProperties = propertyUrls.get(request.uri());\n            JsonObject body = new JsonObject(buffer.toString());\n            boolean found = false;\n            for (String keyId : idProperties.keySet()) {\n                // try to find a watched key in the body\n                if (body.containsKey(keyId)) {\n                    // save the value in the properties\n                    props.put(idProperties.get(keyId), body.getValue(keyId));\n                    // refresh all refreshables\n                    refresh();", "public boolean externalForceAuthorization(CustomScriptConfiguration scriptConfiguration, ExternalPostAuthnContext context) {\n    try {", "@Test\npublic void patternUpdate() {\n    final String msg = \"pattern\";\n    StdoutRecorder stdoutRecorder = new StdoutRecorder();\n    final String log = stdoutRecorder.record(new Runnable() {\n\n        @Override\n        public void run() {\n            logger = Logger.getLogger(\"patternUpdateLogback\");", "@Override\npublic void transactionalLogRecordReadFailure(long[] transactionOffsets, int transactionIndex, long logVersion) {", "@Test\npublic void testA7SliceBug() {\n    log.info(\"\\n testA7SliceBug\");\n    Path path = Paths.get(\"target/test-classes/fixtures/ipadmini-A7.flv\");\n    try {\n        File file = path.toFile();\n        log.info(\"Reading: {}\", file.getName());\n        FLVReader reader = new FLVReader(file, true);\n        ITag tag = null;\n        AVCVideo video = new AVCVideo();\n        while (reader.hasMoreTags()) {\n            tag = reader.readTag();\n            int timestamp = tag.getTimestamp();", "public void setAdditionalTLDs(List<String> additionalTLDs) {\n    // Support additional top level domains\n    if (additionalTLDs != null && !additionalTLDs.isEmpty()) {\n        try {\n            String[] tldsToAddArray = additionalTLDs.toArray(new String[0]);", "@Override\npublic void exec(int executionCounter) {\n    List<String> args = RedisUtils.toPayload(luaScriptState.getSha(), keys.size(), keys, arguments);\n    redisAPI.evalsha(args, event -> {\n        if (event.succeeded()) {\n            Integer insertCount = event.result().toInteger();\n            Boolean timerStarted = insertCount != null && insertCount > 0;\n            promise.complete(timerStarted);\n        } else {\n            String message = event.cause().getMessage();\n            if (message != null && message.startsWith(\"NOSCRIPT\")) {\n                log.warn(\"StartQueueTimerRedisCommand script couldn't be found, reload it\");", "public void handleEvent(Event event) {\n    String topic = event.getTopic();\n    if (topic.equals(SlingConstants.TOPIC_RESOURCE_CHANGED)) {\n        try {\n            String path = (String) event.getProperty(SlingConstants.PROPERTY_PATH);", "public void notifyEndUser(String scope, String acrValues, String authReqId, String deviceRegistrationToken) {\n    try {\n        if (externalCibaEndUserNotificationService.isEnabled()) {\n            log.debug(\"CIBA: Authorization request sending to the end user with custom interception scripts\");\n            ExternalCibaEndUserNotificationContext context = new ExternalCibaEndUserNotificationContext(scope, acrValues, authReqId, deviceRegistrationToken, appConfiguration, cibaEncryptionService);", "public boolean uploadDataServiceFile(String fileName, String serviceHierarchy, DataHandler dh) throws ExceptionException, RemoteException {\n    if (log.isDebugEnabled()) {\n        log.debug(\"path to file :\" + dh.getName());\n    }\n    String response = dataServiceFileUploaderStub.uploadService(fileName, serviceHierarchy, dh);\n    if (\"successful\".equalsIgnoreCase(response)) {\n        log.info(\"Artifact Uploaded\");\n        return true;\n    } else {", "@Override\npublic void initialize(File configurationFile, StatsLogger statsLogger) throws IOException {\n    config = mapper.readValue(configurationFile, Config.class);\n    PropertiesConfiguration propsConf = new PropertiesConfiguration();\n    DistributedLogConfiguration conf = new DistributedLogConfiguration();\n    try {\n        propsConf.load(new StringReader(config.dlogConf));\n        conf.loadConf(propsConf);\n    } catch (ConfigurationException e) {\n        log.error(\"Failed to load dlog configuration : \\n{}\\n\", config.dlogConf, e);\n        throw new IOException(\"Failed to load configuration : \\n\" + config.dlogConf + \"\\n\", e);\n    }\n    URI dlogUri = URI.create(config.dlogUri);\n    dlshade.org.apache.bookkeeper.stats.StatsLogger dlStatsLogger = new CachingStatsLogger(new StatsLoggerAdaptor(statsLogger.scope(\"dlog\")));\n    namespace = NamespaceBuilder.newBuilder().conf(conf).uri(dlogUri).statsLogger(dlStatsLogger).build();", "public void copyToRepository(InputStream source, int size, Artifact destination, FileWriteMonitor monitor) throws IOException {\n    if (!destination.isResolved()) {\n        throw new IllegalArgumentException(\"Artifact \" + destination + \" is not fully resolved\");\n    }\n    // is this a writable repository\n    if (!rootFile.canWrite()) {\n        throw new IllegalStateException(\"This repository is not writable: \" + rootFile.getAbsolutePath() + \")\");\n    }\n    // where are we going to install the file\n    File location = getLocation(destination);\n    // assure that there isn't already a file installed at the specified location\n    if (location.exists()) {\n        throw new IllegalArgumentException(\"Destination \" + location.getAbsolutePath() + \" already exists!\");\n    }\n    ArtifactTypeHandler typeHandler = typeHandlers.get(destination.getType());\n    if (typeHandler == null)\n        typeHandler = DEFAULT_TYPE_HANDLER;\n    typeHandler.install(source, size, destination, monitor, location);\n    if (destination.getType().equalsIgnoreCase(\"car\")) {\n        log.debug(\"Installed module configuration; id={}; location={}\", destination, location);\n    }", "@Override\npublic void didRemoveConfigurationScope(DidRemoveConfigurationScopeParams params) {\n    var idToRemove = params.getRemovedId();\n    var removed = repository.remove(idToRemove);\n    if (removed == null) {", "@Test(groups = \"wso2.esb\", description = \"Test-Without No_ENTITY_BODY Property\", enabled = false)\npublic void testWithoutOutOnlyPropertyTest() throws Exception {\n    SimpleHttpClient httpClient = new SimpleHttpClient();\n    Map<String, String> headers = new HashMap<String, String>();\n    headers.put(\"Content-Type\", \"text/xml\");\n    headers.put(\"SOAPAction\", \"urn:mediate\");\n    String payload = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/\" + \"envelope/\\\">\\n\" + \"   <soapenv:Header/>\\n\" + \"   <soapenv:Body/>My Request</soapenv:Envelope>\\n\" + \"</soapenv:Envelope>\";", "private Date getExpirationDateFromResolutionCache(String key) {\n    Date result = new Date(0);\n    try {\n        result = dateFormat.parse(props.getProperty(getExpirationKey(key)));\n        return result;\n    } catch (Exception e) {", "@Test\nvoid edgeVersionsTest() {\n    String[] expectedVersions = { \"75.0.139.20\", \"76.0.183.0\", \"77.0.237.0\", \"78.0.277.0\", \"79.0.313.0\", \"80.0.361.111\", \"81.0.409.0\", \"82.0.459.1\" };\n    List<String> driverVersions = WebDriverManager.edgedriver().getDriverVersions();", "public void resolving(Artifact configurationId) {", "@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    VersionMessage versionMessage = (VersionMessage) message;\n    if (peer.getPeerVersionMessage() != null)\n        throw new ProtocolException(\"Got two version messages from peer\");\n    peer.setPeerVersionMessage(versionMessage);\n    // Switch to the new protocol version.\n    long peerTime = versionMessage.getTime();", "@Override\npublic void visitBytes(String name, long id, ByteBuffer value) {", "public static void main(String[] args) throws Exception {\n    if (args.length == 2 || args.length == 4) {\n        String zkQuorum = args[0];\n        String zkPath = args[1];", "public void startupFinished() {\n    try {\n        Set gbeans = kernel.listGBeans((AbstractNameQuery) null);\n        for (Iterator it = gbeans.iterator(); it.hasNext(); ) {\n            AbstractName name = (AbstractName) it.next();\n            int state = kernel.getGBeanState(name);\n            if (state != State.RUNNING_INDEX) {", "public String submit(RequestContext context, String homeRealm) {\n    // Check if home realm is known already\n    Cookie homeRealmCookie = homeRealmReminder.readCookie(context);\n    if (homeRealmCookie != null) {", "@Override\npublic void onException(IOException error) {\n    synchronized (this) {\n        setHasExpired(true);\n        // only log if not stopped\n        if (!stopped.get()) {", "public void debug(String s) {", "private String getFrontchannelHtml(CustomScriptConfiguration scriptConf, EndSessionContext context) {\n    try {", "private void registerLocalStackEnvironment(LocalStackContainer localStack, ConfigurableEnvironment environment, LocalStackProperties properties) {\n    String host = localStack.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.localstack.host\", host);\n    map.put(\"embedded.localstack.accessKey\", localStack.getAccessKey());\n    map.put(\"embedded.localstack.secretKey\", localStack.getSecretKey());\n    String prefix = \"embedded.localstack.\";\n    Integer mappedPort = localStack.getMappedPort(properties.getEdgePort());\n    for (LocalStackContainer.Service service : properties.services) {\n        map.put(prefix + service, localStack.getEndpointConfiguration(service).getServiceEndpoint());\n        map.put(prefix + service + \".port\", mappedPort);\n    }", "private void startDatabase(StandaloneDatabaseContext context) {\n    var namedDatabaseId = context.database().getNamedDatabaseId();\n    try {", "@Test\npublic void testFBLivePublish() throws InterruptedException {\n    log.info(\"\\n testFBLivePublish\");\n    String host = \"rtmp-api.facebook.com\";\n    int port = 80;\n    String app = \"rtmp\";\n    final String publishName = \"1567066673326082?ds=1&s_l=1&a=ATiBCGoo4bLDTa4c\";", "/**\n * {@inheritDoc}\n */\npublic void decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws ProtocolCodecException {\n    // get the connection from the session\n    String sessionId = (String) session.getAttribute(RTMPConnection.RTMP_SESSION_ID);", "private void registerKeycloakEnvironment(KeycloakContainer keycloak) {\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.keycloak.host\", keycloak.getIp());\n    map.put(\"embedded.keycloak.http-port\", keycloak.getHttpPort());\n    map.put(\"embedded.keycloak.auth-server-url\", keycloak.getAuthServerUrl());", "    Topic topic = session.createTopic(topicFilter);\n    MessageConsumer consumer = session.createDurableSubscriber(topic, testName.getMethodName());\n    assertNotNull(consumer);\n    Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic(ActiveMQDestination.createDestination(topicA, ActiveMQDestination.TOPIC_TYPE));\n    session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n    MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);\n    // start throwing messages at the consumer one for an ongoing series of\n    // matching topics for the subscription's filter.\n    MessageProducer producer = session.createProducer(null);\n    // Send one to the destination where we want a matching advisory\n    producer.send(session.createTopic(topicA), session.createMessage());\n    for (int i = 0; i < MESSAGE_COUNT; i++) {\n        BytesMessage m = session.createBytesMessage();\n        m.writeBytes(new byte[1024]);\n        Topic newTopic = session.createTopic(topicPrefix + UUID.randomUUID().toString());", "public void store(String projectKey, ProjectBranches projectBranches) {\n    var pbFilePath = getProjectBranchesFilePath(projectKey);\n    FileUtils.mkdirs(pbFilePath.getParent());\n    var data = adapt(projectBranches);", "public void removedBundle(Bundle bundle, BundleEvent event, Object object) {\n    List<Driver> drivers = (List<Driver>) object;\n    unregister(drivers);", " *\n * @param lockImpl the lock implementation\n * @param lock the lock\n * @param token the unique token\n * @param lockExpiryMs the expiry of the lock\n * @param log the logger\n * @return A boolean {@link Future} whether the lock could has been acquired or not\n */\npublic static Future<Boolean> acquireLock(Lock lockImpl, String lock, String token, long lockExpiryMs, Logger log) {\n    Promise<Boolean> promise = Promise.promise();\n    if (lockImpl == null) {\n        log.info(\"No lock implementation defined, going to pretend like we got the lock\");\n        promise.complete(Boolean.TRUE);\n        return promise.future();\n    }", "@Override\npublic void deleteDruidCluster(String clusterId) throws IOException, ClusterNotFoundException {", "                }\n                // extract the specific resource\n                int len = 0;\n                while ((len = inputStream.read(ZIP_BUFFER_SIZE)) > 0) {\n                    contentBuffer.appendBytes(ZIP_BUFFER_SIZE, 0, len);\n                }\n                foundEntry = true;\n                // only one resource my be extracted this way\n                break;\n            }\n            if (foundEntry) {\n                // append content to response\n                createResponse(req, StatusCode.OK.getStatusCode(), StatusCode.OK.getStatusMessage(), contentBuffer, mimeTypeResolver.resolveMimeType(insidePath));\n            } else {\n                // return 404 - not found", "@Test\npublic void patternUpdate() {\n    final String msg = \"pattern\";\n    StdoutRecorder stdoutRecorder = new StdoutRecorder();\n    String log = stdoutRecorder.record(new Runnable() {\n\n        @Override\n        public void run() {\n            logger = LogManager.getLogger(\"patternUpdateLogback\");", "private void registerClickHouseEnvironment(ClickHouseContainer clickHouseContainer, ConfigurableEnvironment environment, ClickHouseProperties properties, String username, String password) {\n    Integer mappedPort = clickHouseContainer.getMappedPort(properties.port);\n    String host = clickHouseContainer.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.clickhouse.schema\", \"default\");\n    map.put(\"embedded.clickhouse.host\", host);\n    map.put(\"embedded.clickhouse.port\", mappedPort);\n    map.put(\"embedded.clickhouse.user\", username);\n    map.put(\"embedded.clickhouse.password\", password);", "protected TextWireFormat asTextWireFormat(WireFormat wireFormat) {\n    if (wireFormat instanceof TextWireFormat) {\n        return (TextWireFormat) wireFormat;\n    }", "    });\n    client.setExceptionHandler(new ClientExceptionHandler() {\n\n        @Override\n        public void handleException(Throwable throwable) {\n            throwable.printStackTrace();\n        }\n    });\n    IPendingServiceCallback connectCallback = new IPendingServiceCallback() {\n\n        @Override\n        public void resultReceived(IPendingServiceCall call) {\n            log.info(\"connectCallback\");\n            ObjectMap<?, ?> map = (ObjectMap<?, ?>) call.getResult();\n            String code = (String) map.get(\"code\");", "private void fillBuffer(IoBuffer buf, String byteDumpFile) throws Exception {\n    File f = new File(String.format(\"%s/target/test-classes/%s\", System.getProperty(\"user.dir\"), byteDumpFile));\n    FileInputStream fis = new FileInputStream(f);", "@Override\npublic void ioException(OutputStream stream, IOException e) {", "@Override\npublic void addRoute(String urlPattern, Route route) {", "@Override\npublic Future<Optional<Buffer>> cachedRequest(String cacheIdentifier) {\n    Promise<Optional<Buffer>> promise = Promise.promise();\n    redisAPI.get(CACHE_PREFIX + cacheIdentifier, event -> {\n        if (event.failed()) {\n            String message = \"Failed to get cached request '\" + cacheIdentifier + \"'. Cause: \" + logCause(event);", "@Override\npublic void handle(ServerEvent event) {\n    Class<? extends ServerEvent> eventType = event.getClass();\n    if (routes.containsKey(eventType)) {\n        routes.get(eventType).forEach(handler -> handler.handle(event));\n    } else {", "@Override\npublic Optional<IssueChangedEvent> parse(String jsonData) {\n    var payload = gson.fromJson(jsonData, IssueChangedEventPayload.class);\n    if (payload.isInvalid()) {", "@Override\npublic void exceptionOccurred(Connection conn, Exception exp) {", "private void registerDb2Environment(Db2Container db2Container, ConfigurableEnvironment environment, Db2Properties properties) {\n    Integer mappedPort = db2Container.getMappedPort(Db2Container.DB2_PORT);\n    String host = db2Container.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.db2.port\", mappedPort);\n    map.put(\"embedded.db2.host\", host);\n    map.put(\"embedded.db2.database\", properties.getDatabase());\n    map.put(\"embedded.db2.user\", properties.getUser());\n    map.put(\"embedded.db2.password\", properties.getPassword());\n    String jdbcURL = \"jdbc:db2://{}:{}/{}\";", "public CustomScriptConfiguration determineScript(String[] scriptNames) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"azurite\")\nToxiproxyContainer.ContainerProxy azuriteBlobContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(AZURITE_BEAN_NAME) GenericContainer<?> azurite, AzuriteProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(azurite, properties.getBlobStoragePort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.azurite.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.azurite.toxiproxy.blobStoragePort\", proxy.getProxyPort());\n    map.put(\"embedded.azurite.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedAzuriteBlobToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Override\npublic void onStreamEvent(Notify notify) {", "@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    if (log.isDebugEnabled()) {", "public void testLoadTempAdvisoryTopics() throws Exception {\n    for (int i = 0; i < MESSAGE_COUNT; i++) {\n        TemporaryTopic tempTopic = session.createTemporaryTopic();\n        MessageConsumer consumer = session.createConsumer(tempTopic);\n        MessageProducer producer = session.createProducer(tempTopic);\n        consumer.close();\n        producer.close();\n        tempTopic.delete();\n    }\n    AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(AdvisoryBroker.class);\n    assertTrue(ab.getAdvisoryDestinations().size() == 0);\n    assertTrue(ab.getAdvisoryConsumers().size() == 0);\n    assertTrue(ab.getAdvisoryProducers().size() == 0);\n    RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);\n    for (Destination dest : rb.getDestinationMap().values()) {", "@Test\npublic void testRemvoeJob() throws Exception {\n    JobSchedulerViewMBean view = getJobSchedulerMBean();\n    assertNotNull(view);\n    assertTrue(view.getAllJobs().isEmpty());\n    scheduleMessage(60000, 0, 0);\n    assertFalse(view.getAllJobs().isEmpty());\n    TabularData jobs = view.getAllJobs();\n    assertEquals(1, jobs.size());\n    for (Object key : jobs.keySet()) {\n        String jobId = ((List<?>) key).get(0).toString();", "public void checkSignature(String appId, ClientData clientData, RawAuthenticateResponse rawAuthenticateResponse, byte[] publicKey) throws BadInputException {\n    String rawClientData = clientData.getRawClientData();\n    byte[] signedBytes = packBytesToSign(signatureVerification.hash(appId), rawAuthenticateResponse.getUserPresence(), rawAuthenticateResponse.getCounter(), signatureVerification.hash(rawClientData));", "protected final void log2SecurityLog(String message, String issuedBy) {\n    String logMessage = (StringUtils.isEmpty(issuedBy)) ? message : message + \" issued by \" + issuedBy;", "protected void printMessage(final String message, final PrintStream stream, final int priority) {\n    assert message != null;\n    assert stream != null;\n    switch(priority) {\n        case Project.MSG_ERR:", "public String generateId(IdType p_idType, String p_idPrefix) {\n    String inum;\n    int counter = 0;\n    try {\n        while (true) {\n            final StringBuilder sb = new StringBuilder();\n            sb.append(p_idPrefix).append(InumGenerator.SEPARATOR).append(p_idType.getInum()).append(InumGenerator.SEPARATOR);\n            if ((IdType.CLIENTS == p_idType) || (IdType.PEOPLE == p_idType)) {\n                sb.append(INumGenerator.generate(4));\n            } else {\n                sb.append(INumGenerator.generate(2));\n            }\n            inum = sb.toString();\n            if (StringUtils.isBlank(inum)) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"consul\")\nToxiproxyContainer.ContainerProxy consulContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_CONSUL) GenericContainer<?> consulContainer, ConsulProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(consulContainer, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.consul.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.consul.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.consul.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedConsulToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "public SchemaDiffOperation addSchema(RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right) {\n    if (!cache.containsKey(key)) {", "@Override\npublic void handle(final Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n    String name = null;\n    for (Callback callback : callbacks) {\n        if (callback instanceof RealmCallback) {\n            ((RealmCallback) callback).setText(XMPPServer.getInstance().getServerInfo().getXMPPDomain());\n        } else if (callback instanceof NameCallback) {\n            name = ((NameCallback) callback).getName();\n            if (name == null) {\n                name = ((NameCallback) callback).getDefaultName();\n            }", "private void removeMetric(final String metric) {", " * but with additional support for changing the coded timeout with an extended value.\n *\n * @return either a {@link FailOnTimeout}, or the supplied {@link Statement} as appropriate.\n */\n@SuppressWarnings(\"deprecation\")\n@Override\nprotected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {\n    long testTimeout = getOriginalTimeout(frameworkMethod);\n    if (testTimeout > 0) {\n        String multiplierString = System.getProperty(\"org.apache.activemq.junit.testTimeoutMultiplier\");\n        double multiplier = 0.0;\n        try {\n            multiplier = Double.parseDouble(multiplierString);\n        } catch (NullPointerException npe) {\n        } catch (NumberFormatException nfe) {", "            allowing(brokerService).stop();\n            then(broker.is(\"stopped\"));\n        }\n    });\n    LeaseLockerIOExceptionHandler underTest = new LeaseLockerIOExceptionHandler();\n    underTest.setBrokerService(brokerService);\n    try {\n        underTest.handle(new IOException());\n        fail(\"except suppress reply ex\");\n    } catch (SuppressReplyException expected) {\n    }\n    assertTrue(\"broker stopped state triggered\", Wait.waitFor(new Wait.Condition() {\n\n        @Override\n        public boolean isSatisified() throws Exception {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"neo4j\")\nToxiproxyContainer.ContainerProxy neo4jContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_NEO4J) Neo4jContainer neo4j, Neo4jProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(neo4j, properties.getBoltPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.neo4j.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.neo4j.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.neo4j.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedNeo4jToxiProxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "            if (eventPublisherConfig == null) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Newly creating publisher configuration.\");\n                }\n                synchronized (HL7EventPublisher.class) {\n                    eventPublisherConfig = new EventPublisherConfig();\n                    DataPublisher asyncDataPublisher;\n                    try {\n                        if (serverConfig.getSecureUrl() != null) {\n                            asyncDataPublisher = new DataPublisher(DataEndpointConstants.THRIFT_DATA_AGENT_TYPE, serverConfig.getUrl(), serverConfig.getSecureUrl(), serverConfig.getUsername(), serverConfig.getPassword());\n                        } else {\n                            asyncDataPublisher = new DataPublisher(serverConfig.getUrl(), serverConfig.getUsername(), serverConfig.getPassword());\n                        }\n                    } catch (DataEndpointAgentConfigurationException | DataEndpointException | DataEndpointConfigurationException | DataEndpointAuthenticationException | TransportException e) {\n                        String errorMsg = \"Error occurred while creating data publisher\";", "@Override\npublic void visitSequenceClose(String name, long id) {\n    tab--;", "@ParameterizedTest\n@EnumSource(names = { \"DEFAULT\", \"X32\", \"X64\" })\nvoid testSpecificVersions(Architecture architecture) throws Exception {\n    for (String specificVersion : specificVersions) {\n        WebDriverManager wdm = WebDriverManager.getInstance(driverClass).avoidResolutionCache().driverVersion(specificVersion);\n        if (architecture != DEFAULT) {\n            wdm.architecture(architecture);\n        }\n        String osLabel = \"\";\n        if (os != null) {\n            wdm.operatingSystem(os);\n            osLabel = \" os=\" + os;\n        }", "@Override\npublic CompletableFuture<Void> createTopic(String topic, int partitions) {\n    return CompletableFuture.runAsync(() -> {\n        try {\n            namespace.createLog(topic);\n            if (partitions > 1) {\n                for (int i = 0; i < partitions; i++) {\n                    namespace.createLog(getFullyQualifiedPartitionedStreamName(topic, i));\n                }\n            }", "@Override\npublic void started(Path logFile, long logVersion) {", "/**\n * \u751f\u4ea7\u9632\u4f2a\u7801\uff0c\u8c03\u7528accountKit\u91cc\u9762\u5c01\u88c5\u597d\u7684\u65b9\u6cd5\n * @throws IOException\n * @throws VerificationException\n */\n@Test\npublic void makeAntifakeCode() throws VerificationException, IOException {\n    log.info(\"make anti code------------------------------------------------------- \", network.getBestBlockHeight());\n    BroadcastMakeAntifakeCodeResult result = null;\n    for (int i = 0; i < 1; i++) {\n        String productTx = \"ec0618332cd5330f82fb4d28b931b9e88c74db802b2ff7fff9bf84fa7f13187f\";\n        Coin reward = Coin.ZERO;\n        result = accountKit.makeAntifakeCode(productTx, reward, \"inchain123\");\n        log.info(\"code :\" + (i + 1));", "public void contextInitialized(ServletContextEvent event) {\n    LOG.debug(\"Initializing ActiveMQ WebConsole...\");\n    String webconsoleType = getWebconsoleType();\n    ServletContext servletContext = event.getServletContext();\n    WebApplicationContext context = createWebapplicationContext(servletContext, webconsoleType);\n    initializeWebClient(servletContext, context);\n    // for embedded console log what port it uses\n    if (\"embedded\".equals(webconsoleType)) {\n        // show the url for the web consoles / main page so people can spot it\n        String port = System.getProperty(\"jetty.port\");\n        String host = System.getProperty(\"jetty.host\");\n        if (host != null && port != null) {", "@Test\npublic void testGetNextScheduledJob() throws Exception {\n    JobSchedulerViewMBean view = getJobSchedulerMBean();\n    assertNotNull(view);\n    assertTrue(view.getAllJobs().isEmpty());\n    scheduleMessage(60000, 0, 0);\n    assertFalse(view.getAllJobs().isEmpty());\n    long before = System.currentTimeMillis() + 57 * 1000;\n    long toLate = System.currentTimeMillis() + 63 * 1000;\n    String next = view.getNextScheduleTime();\n    long nextTime = JobSupport.getDataTime(next);", "private static Optional<? extends ServerEvent> parse(Event event) {\n    var eventType = event.getType();\n    if (!parsersByType.containsKey(eventType)) {", "public static void printMBeanInfo(ObjectName objectName, String className) {", "@Test\npublic void testClientDigest() throws InterruptedException {\n    log.info(\"\\ntestClientDigest\");\n    OutboundHandshake out = new OutboundHandshake();\n    int algorithm = 0;\n    byte[] handshakeBytes = out.generateClientRequest1().array();\n    // get the handshake digest\n    int digestPos = out.getDigestOffset(algorithm, handshakeBytes, 0);", "public void variousLogMessageSafe(Log log) {\n    String input = \"\";", "/**\n * Release a lock.\n *\n * @param lockImpl the lock implementation\n * @param lock the lock\n * @param token the unique token\n * @param log the Logger\n */\npublic static void releaseLock(Lock lockImpl, String lock, String token, Logger log) {\n    if (lockImpl == null) {\n        log.info(\"No lock implementation defined, going to pretend like we released the lock\");\n        return;\n    }", "private void registerCouchbaseEnvironment(CouchbaseContainer couchbase, ConfigurableEnvironment environment, CouchbaseProperties properties) {\n    Integer mappedHttpPort = couchbase.getBootstrapHttpDirectPort();\n    Integer mappedCarrierPort = couchbase.getBootstrapCarrierDirectPort();\n    String host = couchbase.getHost();\n    System.setProperty(\"com.couchbase.bootstrapHttpDirectPort\", String.valueOf(mappedHttpPort));\n    System.setProperty(\"com.couchbase.bootstrapCarrierDirectPort\", String.valueOf(mappedCarrierPort));\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.couchbase.bootstrapHttpDirectPort\", mappedHttpPort);\n    map.put(\"embedded.couchbase.bootstrapCarrierDirectPort\", mappedCarrierPort);\n    map.put(\"embedded.couchbase.host\", host);\n    map.put(\"embedded.couchbase.bucket\", properties.bucket);\n    map.put(\"embedded.couchbase.user\", properties.user);\n    map.put(\"embedded.couchbase.password\", properties.password);", "private void addVault(Path pathToVault) {\n    try {\n        if (pathToVault.getFileName().toString().endsWith(CRYPTOMATOR_FILENAME_EXT)) {\n            vaultListManager.add(pathToVault.getParent());\n        } else {\n            vaultListManager.add(pathToVault);\n        }\n    } catch (IOException e) {", "@Override\npublic void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {", "@Override\npublic void run() {\n    final FileTime now = FileTime.fromMillis(System.currentTimeMillis());\n    for (final Handler handler : this.server.getChildHandlersByClass(WebAppContext.class)) {\n        final File tempDirectory = ((WebAppContext) handler).getTempDirectory();\n        try {", "private static void log(String message) {", "        return true;\n    }\n    if (!this.canHandleData(data)) {\n        return false;\n    }\n    byte first = data.get();\n    //log.trace(\"First byte: {}\", HexDump.toHexString(first));\n    data.rewind();\n    // get frame type\n    int frameType = (first & MASK_VIDEO_FRAMETYPE) >> 4;\n    if (frameType != FLAG_FRAMETYPE_KEYFRAME) {\n        // Not a keyframe\n        try {\n            int lastInterframe = numInterframes.getAndIncrement();\n            if (frameType != FLAG_FRAMETYPE_DISPOSABLE) {", "    driver.findElement(By.xpath(\"//span[text()='=']\")).click();\n    // ... should be 4, wait for it\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    wait.until(ExpectedConditions.textToBe(By.className(\"screen\"), \"4\"));\n    wdm.stopRecording();\n    long timeoutMs = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(REC_TIMEOUT_SEC);\n    File recFile;\n    do {\n        recFile = new File(targetFolder, REC_FILENAME + REC_EXT);\n        if (System.currentTimeMillis() > timeoutMs) {\n            fail(\"Timeout of \" + REC_TIMEOUT_SEC + \" seconds waiting for recording \" + recFile);\n            break;\n        }\n        Thread.sleep(POLL_TIME_MSEC);\n    } while (!recFile.exists());", "@Override\npublic void run() {\n    try {\n        int i = 0;\n        while (consumer.receive(1000) != null) {\n            i++;\n            if (i % 1000 == 0) {", "private void loggingThroughFile(OAuth2AuditLog oAuth2AuditLog) {\n    try {", "@Override\npublic boolean accept(File dir, String name) {", "/**\n * \u6d4b\u8bd5\u7f51\u7edc\u7684\u521b\u4e16\u5757\n */\n@Override\npublic BlockStore getGengsisBlock() {\n    BlockStore gengsisBlock = new BlockStore(this, Hex.decode(\"\"));\n    Sha256Hash merkleHash = gengsisBlock.getBlock().buildMerkleHash();\n    if (log.isDebugEnabled()) {", "/**\n * Assigns the property name to an id value of a given url. <br >\n * You can add for example:\n *\n * <pre>\n * addProperty(\"/vehicle/v1/id\", \"identityId\", \"identity.id\")\n * addProperty(\"/vehicle/v1/id\", \"vehicleId\", \"vehicle.id\")\n * </pre>\n *\n * @param url\n * @param value\n * @param propertyName\n */\npublic void addProperty(String url, String value, String propertyName) {", "public List<DockerHubTag> listTags(String dockerImageFormat) {\n    log.debug(\"Getting browser image list from Docker Hub\");\n    List<DockerHubTag> results = new ArrayList<>();\n    String dockerHubUrl = config.getDockerHubUrl();\n    String repo = dockerImageFormat.substring(0, dockerImageFormat.indexOf(\":\"));\n    Object url = String.format(GET_IMAGE_TAGS_PATH_FORMAT, dockerHubUrl, repo, 1);\n    Gson gson = new GsonBuilder().create();\n    try {\n        do {", "@Test(timeout = 60000)\npublic void testTempQueueIssue() throws JMSException, InterruptedException {\n    ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false&broker.useJmx=false\");\n    final PooledConnectionFactory cf = new PooledConnectionFactory();\n    cf.setConnectionFactory(factory);\n    Connection connection = cf.createConnection();\n    connection.start();\n    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);", "@Override\npublic void onWebSocketClose(int arg0, String arg1) {\n    try {\n        if (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {", "private boolean executeExternalAuthenticate(CustomScriptConfiguration customScriptConfiguration, ExternalResourceOwnerPasswordCredentialsContext context) {\n    try {", "@Override\nprotected void channelRead0(ChannelHandlerContext ctx, RequestMessage msg) throws Exception {", "// doc comment inherited from LogWriter\npublic void logReceivedException(Logger log, IOException error) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"oracle\")\nToxiproxyContainer.ContainerProxy oracleContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_ORACLE) OracleContainer oracle, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(oracle, ORACLE_PORT);\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.oracle.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.oracle.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.oracle.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedOracleToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@GET\n@Path(\"{id}\")\n@Produces({ UmaConstants.JSON_MEDIA_TYPE })\npublic Response getScopeDescription(@PathParam(\"id\") String id) {", "    // Add \"Authenticated\" role\n    List<String> roles = wfRes.getRoles();\n    if (roles == null || roles.isEmpty()) {\n        roles = Collections.singletonList(\"Authenticated\");\n    } else if (getFedizContext().isAddAuthenticatedRole()) {\n        roles = new ArrayList<>(roles);\n        roles.add(\"Authenticated\");\n    }\n    // proceed creating the JAAS Subject\n    FedizPrincipal principal = new FederationPrincipalImpl(wfRes.getUsername(), roles, wfRes.getClaims(), wfRes.getToken());\n    Session session = ((Request) request).getSessionInternal();\n    // Save Federation response in our session\n    session.setNote(FederationAuthenticator.FEDERATION_NOTE, wfRes);\n    // Save Federation response in public session\n    request.getSession(true).setAttribute(FederationAuthenticator.SECURITY_TOKEN, wfRes.getToken());", "    params.put(\"ignore\", \".csv\");\n    String url = YahooFinance.HISTQUOTES_BASE_URL + \"?\" + Utils.getURLParameters(params);\n    // Get CSV from Yahoo\n    log.info(\"Sending request: \" + url);\n    URL request = new URL(url);\n    RedirectableRequest redirectableRequest = new RedirectableRequest(request, 5);\n    redirectableRequest.setConnectTimeout(YahooFinance.CONNECTION_TIMEOUT);\n    redirectableRequest.setReadTimeout(YahooFinance.CONNECTION_TIMEOUT);\n    URLConnection connection = redirectableRequest.openConnection();\n    InputStreamReader is = new InputStreamReader(connection.getInputStream());\n    BufferedReader br = new BufferedReader(is);\n    // skip the first line\n    br.readLine();\n    // Parse CSV\n    for (String line = br.readLine(); line != null; line = br.readLine()) {", "        for (String excludedPath : excludedPaths) {\n            String requestURI = httpRequest.getRequestURI();\n            if (requestURI.startsWith(excludedPath)) {\n                chain.doFilter(httpRequest, httpResponse);\n                return;\n            }\n        }\n    }\n    RequestWrapper requestWrapper = new RequestWrapper(httpRequest);\n    ResponseWrapper responseWrapper = new ResponseWrapper(httpResponse);\n    chain.doFilter(httpRequest, httpResponse);\n    Duration duration = duration(start);\n    // yuriyz: log request and response only after filter handling.\n    // #914 - we don't want to effect server functionality due to logging. Currently content can be messed if it is InputStream.\n    if (log.isDebugEnabled()) {", "private void registerRabbitMQEnvironment(RabbitMQContainer rabbitMQ, ConfigurableEnvironment environment, RabbitMQProperties properties) {\n    Integer mappedPort = rabbitMQ.getMappedPort(properties.getPort());\n    Integer mappedHttpPort = rabbitMQ.getMappedPort(properties.getHttpPort());\n    String host = rabbitMQ.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.rabbitmq.port\", mappedPort);\n    map.put(\"embedded.rabbitmq.host\", host);\n    map.put(\"embedded.rabbitmq.vhost\", properties.getVhost());\n    map.put(\"embedded.rabbitmq.user\", rabbitMQ.getAdminUsername());\n    map.put(\"embedded.rabbitmq.password\", rabbitMQ.getAdminPassword());\n    map.put(\"embedded.rabbitmq.httpPort\", mappedHttpPort);", "@Override\nprotected void addGraph(final String name, final String configurationFile) {\n    try {\n        final Graph newGraph = GraphFactory.open(configurationFile);\n        putGraph(name, newGraph);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"influxdb\")\nToxiproxyContainer.ContainerProxy influxdbContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(EMBEDDED_INFLUX_DB) ConcreteInfluxDbContainer influxdb, InfluxDBProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(influxdb, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.influxdb.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.influxdb.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.influxdb.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedInfluxDBToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "/**\n * Return scope associated with given path from given root scope.\n *\n * @param root\n *            Scope to start from\n * @param path\n *            Scope path\n * @return Scope object\n */\npublic IScope resolveScope(IScope root, String path) {", "@Override\npublic void visitFragmentClose(String name, long id) {\n    tab--;", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"postgresql\")\nToxiproxyContainer.ContainerProxy postgresqlContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_POSTGRESQL) PostgreSQLContainer postgresql, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(postgresql, PostgreSQLContainer.POSTGRESQL_PORT);\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.postgresql.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.postgresql.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.postgresql.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedPostgresqlToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "public boolean revokeToken(CustomScriptConfiguration script, RevokeTokenContext context) {\n    try {", "/**\n * Performs the initial GET request of the zip resource.\n *\n * @param req\n * @param zipUrl\n * @param insidePath\n */\nprotected void performGETRequest(final HttpServerRequest req, final String zipUrl, final String insidePath) {\n    Logger log = RequestLoggerFactory.getLogger(ZipExtractHandler.class, req);\n    // perform Initial GET request\n    selfClient.request(HttpMethod.GET, zipUrl).onComplete(asyncReqResult -> {\n        if (asyncReqResult.failed()) {", "@Test\npublic void testFLVReaderFileWithMetaData() {\n    log.info(\"\\n testFLVReaderFileWithMetaData\");\n    String[] paths = new String[] { \"target/test-classes/fixtures/flashContent.flv\", \"target/test-classes/fixtures/flashContent1.flv\" };\n    try {\n        for (String path : paths) {\n            File file = Paths.get(path).toFile();\n            if (file.exists() && file.canRead()) {\n                log.info(\"Reading: {}\", file.getName());\n                FLVReader reader = new FLVReader(file, false);\n                ITag tag = null;\n                while (reader.hasMoreTags()) {\n                    tag = reader.readTag();\n                    if (tag != null && tag.getDataType() > 9) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"pulsar\")\nToxiproxyContainer.ContainerProxy pulsarContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(EMBEDDED_PULSAR) PulsarContainer embeddedPulsar, PulsarProperties pulsarProperties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(embeddedPulsar, pulsarProperties.getBrokerPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.pulsar.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.pulsar.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.pulsar.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedPulsarToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "private void updateConnection(AbstractConnectionConfiguration connectionConfiguration) {\n    var connectionId = connectionConfiguration.getConnectionId();\n    var previous = repository.addOrReplace(connectionConfiguration);\n    if (previous == null) {", "public MqttAsyncClient getMqttClient(String identifier) {\n    if (tenantLoadingFlagMap.containsKey(identifier)) {\n        //this is manually tenant loading case should return the client\n        return mqttClientMap.get(identifier);\n    } else {\n        MqttAsyncCallback callback = mqttCallbackMap.get(identifier);\n        //this is the case where recreation of same bounded inbound endpoint for server host\n        //server port, client id\n        String msg = \"Client ID: \" + callback.getMqttConnectionConsumer().getMqttAsyncClient().getClientId() + \" Server Host: \" + callback.getMqttConnectionConsumer().getMqttConnectionFactory().getServerHost() + \" Server Port: \" + callback.getMqttConnectionConsumer().getMqttConnectionFactory().getServerPort() + \" is bound to existing MQTT Inbound Endpoint.\";", "public void commence(final HttpServletRequest servletRequest, final HttpServletResponse response, final AuthenticationException authenticationException) throws IOException, ServletException {\n    FedizContext fedContext = federationConfig.getFedizContext();", "        ngramInfoIterator = ngramInfo.iterator();\n        for (String term : terms) {\n            try {\n                if (ngramInfoIterator.seekExact(new BytesRef(term.getBytes(\"UTF-8\")))) {\n                    PostingsEnum docEnum = ngramInfoIterator.postings(null);\n                    int doc = 0;\n                    while ((doc = docEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n                        //tf in document\n                        int tfid = docEnum.freq();\n                        feature.increment(term, tfid);\n                        feature.incrementTermFrequencyInDocument(term, doc, tfid);\n                    }\n                    totalSuccess++;\n                } else {\n                    String warning = String.format(\"'%s'  is a candidate term, but not indexed in the n-gram \" + \"information field. It's score may be mis-computed. You may have used different text \" + \"analysis process (e.g., different tokenizers, different analysis order, limited \" + \"n-gram range) for the text-2-candidate-term and text-2-ngram fields.) \", term);", "@Override\npublic CompletableFuture<Void> createTopic(String topic, int partitions) {\n    try {\n        JetStreamManagement jsm = connection.jetStreamManagement();\n        StreamInfo streamInfo = jsm.addStream(StreamConfiguration.builder().name(topic).subjects(topic).storageType(StorageType.File).replicas(config.replicationFactor).build());", "@Override\npublic void visitUTF8(String name, long id, CharSequence value) {", "@Override\npublic void recoveryCleanupRegistered(Path indexFile, IndexDescriptor index) {", "@Override\npublic void pauseDetected(VmPauseMonitor.VmPauseInfo info) {", "public void fatalError(SAXParseException exception) {", "@Override\npublic void uncaughtException(Thread t, Throwable e) {\n    if (e instanceof OutOfMemoryError) {", "Optional<URL> buildUrl(String driverVersion, Config config) {\n    Optional<URL> optionalUrl = empty();\n    if (!config.isUseMirror()) {\n        String downloadUrlPattern = config.getEdgeDownloadUrlPattern();\n        OperatingSystem os = config.getOperatingSystem();\n        Architecture arch = config.getArchitecture();\n        String archLabel = os.isWin() ? arch.toString() : \"64\";\n        String osName = arch != ARM64 ? os.getName() : \"arm\";\n        String builtUrl = os == MAC && arch == ARM64 ? String.format(downloadUrlPattern, driverVersion, \"mac\", \"64_m1\") : String.format(downloadUrlPattern, driverVersion, osName, archLabel);", "public void reading(Artifact configurationId) {", "public void stopScheduledReport(String reportName) throws Exception {\n    try {\n        reportingAdminServiceStub.stopScheduledReport(reportName);\n    } catch (Exception e) {\n        String msg = \"Unable to stop the scheduled report\";", "private void registerEnvironment(GenericContainer<?> grafana, ConfigurableEnvironment environment, GrafanaProperties properties) {\n    Integer mappedPort = grafana.getMappedPort(properties.port);\n    String host = grafana.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.grafana.host\", host);\n    map.put(\"embedded.grafana.port\", mappedPort);\n    map.put(\"embedded.grafana.username\", properties.getUsername());\n    map.put(\"embedded.grafana.password\", properties.getPassword());", "private void handleException(String msg, Exception ex) {", "public void scheduleReport(ReportConfigurationBean configuration) throws Exception {\n    try {\n        reportingAdminServiceStub.scheduleReport(configuration);\n    } catch (Exception e) {\n        String msg = \"Unable to schedule the report\";", "@Override\npublic Void extractData(ResultSet rs) throws SQLException, DataAccessException {\n    Upgrade19DataPointRowMapper dprw = new Upgrade19DataPointRowMapper();\n    try (PrintWriter pw = new PrintWriter(createUpdateLogOutputStream())) {\n        while (rs.next()) {\n            RawDataPoint rdp = dprw.mapRow(rs, rs.getRow());\n            if (rdp.dataTypeId != null) {\n                String message = \"Updating dpid: \" + rdp.id + \" setting data type id to: \" + rdp.dataTypeId;\n                if (LOG.isDebugEnabled())", "@Logging(logEvent = true)\npublic String handleRequest(final ScheduledEvent input, final Context context) {\n    String queueUrl = System.getenv(\"QUEUE_URL\");\n    // Push 5 messages on each invoke.\n    List<SendMessageBatchRequestEntry> batchRequestEntries = IntStream.range(0, 5).mapToObj(value -> {\n        Map<String, MessageAttributeValue> attributeValueHashMap = new HashMap<>();\n        attributeValueHashMap.put(\"Key\" + value, MessageAttributeValue.builder().dataType(\"String\").stringValue(\"Value\" + value).build());\n        byte[] array = new byte[7];\n        random.nextBytes(array);\n        return SendMessageBatchRequestEntry.builder().messageAttributes(attributeValueHashMap).id(input.getId() + value).messageBody(\"Sample Message \" + value).build();\n    }).collect(toList());\n    SendMessageBatchResponse sendMessageBatchResponse = sqsClient.sendMessageBatch(SendMessageBatchRequest.builder().queueUrl(queueUrl).entries(batchRequestEntries).build());", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"artifactory\")\nToxiproxyContainer.ContainerProxy artifactoryContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(ARTIFACTORY_BEAN_NAME) GenericContainer<?> artifactory, ArtifactoryProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(artifactory, properties.getRestApiPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.artifactory.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.artifactory.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.artifactory.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedArtifactoryToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "SonarLintInputFile create(ClientInputFile inputFile) {\n    var defaultInputFile = new SonarLintInputFile(inputFile, f -> {\n        LOG.debug(\"Initializing metadata of file {}\", f.uri());\n        var charset = f.charset();\n        InputStream stream;\n        try {\n            stream = f.inputStream();\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Failed to open a stream on file: \" + f.uri(), e);\n        }\n        return fileMetadata.readMetadata(stream, charset != null ? charset : Charset.defaultCharset(), f.uri(), exclusionsScanner.createCharHandlerFor(f));\n    });\n    defaultInputFile.setType(inputFile.isTest() ? Type.TEST : Type.MAIN);\n    var fileLanguage = inputFile.language();\n    if (fileLanguage != null) {", "/**\n * This is to get the GenericInboundListener instance for given params\n *\n * @param inboundParams\n * @return\n */\npublic static synchronized GenericInboundListener getInstance(InboundProcessorParams inboundParams) {\n    String classImpl = inboundParams.getClassImpl();\n    String name = inboundParams.getName();\n    if (null == classImpl) {\n        String msg = \"GenericEndpointManager class not found\";", "@Override\npublic void visitSignedInteger(String name, long id, int value) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"rabbitmq\")\nToxiproxyContainer.ContainerProxy rabbitmqContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_RABBITMQ) RabbitMQContainer rabbitmq, ConfigurableEnvironment environment, RabbitMQProperties properties) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(rabbitmq, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.rabbitmq.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.rabbitmq.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.rabbitmq.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedRabbitmqToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "            for (VirtualDestination existingVirtualDest : existingVirtualDests) {\n                if (!newVirtualDests.contains(existingVirtualDest)) {\n                    removedVirtualDests.add(existingVirtualDest);\n                }\n            }\n            virtualDestinationInterceptor.setVirtualDestinations(getVirtualDestinations());\n            plugin.info(\"applied updates to: \" + virtualDestinationInterceptor);\n            updatedExistingInterceptor = true;\n            ConnectionContext connectionContext;\n            try {\n                connectionContext = plugin.getBrokerService().getAdminConnectionContext();\n                //signal updates\n                if (plugin.getBrokerService().isUseVirtualDestSubs()) {\n                    for (VirtualDestination removedVirtualDest : removedVirtualDests) {\n                        plugin.virtualDestinationRemoved(connectionContext, removedVirtualDest);", "public SessionId getConsentSession(HttpServletRequest httpRequest, HttpServletResponse httpResponse, String userDn, boolean create) {\n    String cookieId = cookieService.getConsentSessionIdFromCookie(httpRequest);", "public Path dumpState(Locks lm, LockWorker... workers) throws IOException {\n    try (OutputStream out = Files.newOutputStream(file)) {\n        InternalLogProvider logProvider = new Log4jLogProvider(out);\n        //  * locks held by the lock manager\n        lm.accept(new DumpLocksVisitor(logProvider.getLog(LockWorkFailureDump.class)));\n        //  * rag manager state;\n        //  * workers state\n        InternalLog log = logProvider.getLog(getClass());\n        for (LockWorker worker : workers) {\n            // - what each is doing and have up to now", "@Override\npublic void onAcceptError(Exception error) {", "private void processLine(String line) {\n    if (line.trim().length() == 0) {\n        return;\n    }\n    // first check the single regexp patterns that can be used to totally exclude a file\n    for (Pattern pattern : allFilePatterns) {\n        if (pattern.matcher(line).find()) {\n            // nothing more to do on this file", "/**\n * {@inheritDoc}\n */\n@Override\nprotected void startConnector(String server, int port) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"mssqlserver\")\nToxiproxyContainer.ContainerProxy mssqlserverContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_MSSQLSERVER) EmbeddedMSSQLServerContainer mssqlserver, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(mssqlserver, MSSQLServerContainer.MS_SQL_SERVER_PORT);\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.mssqlserver.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.mssqlserver.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.mssqlserver.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedMSSQLServerToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "    for (IssuePattern pattern : multicriteriaPatterns) {\n        if (pattern.matchRule(issue.ruleKey())) {\n            atLeastOneRuleMatched = true;\n            var component = ((DefaultFilterableIssue) issue).getComponent();\n            if (component.isFile()) {\n                var file = (SonarLintInputFile) component;\n                if (pattern.matchFile(file.relativePath())) {\n                    atLeastOnePatternFullyMatched = true;\n                    matchingPattern = pattern;\n                }\n            }\n        }\n    }\n    if (atLeastOneRuleMatched) {\n        if (atLeastOnePatternFullyMatched) {", "private static void parseSetting(Map<SettingKey, Serializable> settings, String name, String value) {\n    SettingKey settingKey = SettingKey.definedSettingKeys().get(name.toLowerCase(Locale.ROOT));\n    if (settingKey != null) {\n        settings.put(settingKey, settingKey.type().deserializeURL(value));\n    } else {", "                            feature.mweHasSymbol(term, true);\n                        else\n                            feature.mweHasSymbol(term, false);\n                        if (metadata.getMetaData(MWEMetadataType.HAS_NUMERIC_TOKEN).equalsIgnoreCase(\"true\"))\n                            feature.mweHasNumber(term, true);\n                        else\n                            feature.mweHasNumber(term, false);\n                        if (metadata.getMetaData(MWEMetadataType.HAS_ACRONYM_TOKEN).equalsIgnoreCase(\"true\"))\n                            feature.mweHasAcronym(term, true);\n                        else\n                            feature.mweHasAcronym(term, false);\n                    }\n                    totalSuccess++;\n                } else {\n                    String warning = String.format(\"'%s'  is a candidate term, but not indexed in the n-gram \" + \"information field. It's score may be mis-computed. You may have used different text \" + \"analysis process (e.g., different tokenizers, different analysis order, limited \" + \"n-gram range) for the text-2-candidate-term and text-2-ngram fields.) \", term);", "@Override\npublic void onException(JMSException exception) {", "private void tryToEnqueueFileOpenRequest(AppLaunchEvent launchEvent) {\n    if (!launchEventQueue.offer(launchEvent)) {", "@Override\npublic void onSharedObjectUpdate(ISharedObjectBase so, Map<String, Object> map) {", "@Override\npublic void onCommand(Object command) {\n    if (command.getClass() == ConnectionInfo.class || command.getClass() == BrokerInfo.class) {\n        synchronized (this) {\n            try {", "// fail only when we get an authoritative answer from the db w/o exceptions\n@Override\nprotected boolean hasLockOwnership() throws IOException {\n    boolean hasLock = true;\n    if (broker.getPersistenceAdapter() instanceof LockableServiceSupport) {\n        Locker locker = ((LockableServiceSupport) broker.getPersistenceAdapter()).getLocker();\n        if (locker != null) {\n            try {\n                if (!locker.keepAlive()) {\n                    hasLock = false;\n                }\n            } catch (SuppressReplyException ignoreWhileHandlingInProgress) {\n            } catch (IOException ignored) {\n            }\n            if (!hasLock) {", "@Override\npublic Message formatException(String origin, String arg1, Message arg2, Throwable arg3) {\n    NotImplementedException e = new NotImplementedException();", "    }\n    Crypto issuerCrypto = CertsUtils.getCryptoFromCertificate(idp.getCertificate());\n    X509Certificate[] issuerCerts = null;\n    String issuerKeyName = null;\n    if (issuerCrypto != null) {\n        CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n        issuerKeyName = issuerCrypto.getDefaultX509Identifier();\n        cryptoType.setAlias(issuerKeyName);\n        issuerCerts = issuerCrypto.getX509Certificates(cryptoType);\n    }\n    if (issuerCerts == null || issuerCerts.length == 0) {\n        throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, \"empty\", new Object[] { \"No issuer certs were found to sign the SAML Assertion using issuer name: \" + issuerKeyName });\n    }\n    String sigAlgo = SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1;\n    String pubKeyAlgo = issuerCerts[0].getPublicKey().getAlgorithm();", "@Override\npublic void enable(long reconciledTransactionId) {\n    requireNonNegative(reconciledTransactionId);\n    initializationLock.writeLock().lock();\n    try {\n        if (sequence == null) {", "@Override\nprotected List<File> postDownload(File archive) {", "public void log(AuditLogEntry entry) {\n    for (AuditLog log : factory.getAuditLogs()) {", "        errorMap.put(\"exceptionClass\", throwable.getClass().getName());\n        errorMap.put(\"message\", throwable.getMessage());\n        errorMap.put(\"path\", path);\n        if (statusCode < 300) {\n            statusCode = 500;\n        }\n        errorMap.put(\"code\", Integer.toString(statusCode));\n        if (throwable.getCause() != null) {\n            try {\n                errorMap.put(\"cause\", objectMapper.valueToTree(throwable.getCause()));\n            } catch (Exception e) {\n                errorMap.put(\"cause\", throwable.getCause().getMessage());\n            }\n        }\n        if (throwable.getStackTrace() != null && statusCode >= 500) {", "@Test\nvoid test() {\n    String browserContainerId = wdm.getDockerBrowserContainerId();\n    String[] command = { \"ls\", \"-l\" };\n    String result = wdm.getDockerService().execCommandInContainer(browserContainerId, command);", "public Object addingBundle(Bundle bundle, BundleEvent event) {\n    URL providerURL = bundle.getEntry(\"META-INF/services/java.sql.Driver\");\n    if (providerURL != null) {\n        List<Driver> drivers = loadDrivers(bundle, providerURL);\n        register(drivers);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"grafana\")\nToxiproxyContainer.ContainerProxy grafanaContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(GRAFANA_BEAN_NAME) GenericContainer<?> grafana, GrafanaProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(grafana, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.grafana.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.grafana.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.grafana.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedGrafanaToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Override\npublic Response requestBackchannelDeviceRegistrationPost(String idTokenHint, String deviceRegistrationToken, HttpServletRequest httpRequest, HttpServletResponse httpResponse, SecurityContext securityContext) {\n    OAuth2AuditLog oAuth2AuditLog = new OAuth2AuditLog(ServerUtil.getIpAddress(httpRequest), Action.BACKCHANNEL_DEVICE_REGISTRATION);\n    // ATTENTION : please do not add more parameter in this debug method because it will not work with Seam 2.2.2.Final,\n    // there is limit of 10 parameters (hardcoded), see: org.jboss.seam.core.Interpolator#interpolate", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"mysql\")\nToxiproxyContainer.ContainerProxy mysqlContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_MYSQL) MySQLContainer mysql, MySQLProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(mysql, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.mysql.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.mysql.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.mysql.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedMysqlToxiProxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", " * @param algorithm               The encryption / decryption algorithm\n * @param javaSecurityAPIProvider\n * @return The cleartext\n * @throws CryptoException If something unexpected happens during the decryption operation.\n */\npublic byte[] decrypt(byte[] ciphertext, String algorithm, String javaSecurityAPIProvider) throws CryptoException {\n    try {\n        Cipher cipher;\n        if (StringUtils.isBlank(javaSecurityAPIProvider)) {\n            cipher = Cipher.getInstance(algorithm);\n        } else {\n            cipher = Cipher.getInstance(algorithm, javaSecurityAPIProvider);\n        }\n        cipher.init(Cipher.DECRYPT_MODE, getPrivateKeyFromKeyStore());\n        if (log.isDebugEnabled()) {", "public void onStatus(IConnection conn, ObjectMap<String, Object> status) {", "private void traceOrDebug(boolean traceOn, String msg) {\n    if (traceOn) {\n        trace.info(msg);\n    }\n    if (log.isDebugEnabled()) {", "@Override\npublic void put(final String uri, MultiMap headers, Buffer buffer, final Handler<Integer> doneHandler) {\n    client.request(HttpMethod.PUT, uri).onComplete(asyncResult -> {\n        if (asyncResult.failed()) {", "public void variousLogMessageUnsafe(String input, Log log) {", "public static File getRootDirectory(String path) {\n    if (path == null) {\n        String msg = \"Path can not be null\";", "    } catch (Exception e) {\n        log.warn(\"Could not replace wildcards with environment properties for the router configuration \" + \"due to following reason: {}\", e.getMessage());\n        return Optional.empty();\n    }\n    Integer requestHopsLimit = config.getInteger(REQUEST_HOPS_LIMIT_PROPERTY);\n    JsonObject authConfigs = config.getJsonObject(AUTH_CONFIGS_PROPERTY);\n    if (authConfigs == null) {\n        return Optional.of(new RouterConfiguration(requestHopsLimit, Collections.emptyMap()));\n    }\n    Map<OAuthId, OAuthConfiguration> oAuthConfigurationsMap = new HashMap<>();\n    for (String authConfigId : authConfigs.fieldNames()) {\n        JsonObject authConfig = authConfigs.getJsonObject(authConfigId);\n        String flowTypeStr = authConfig.getString(FLOWTYPE_PROPERTY);\n        OAuth2FlowType flowType = flowTypeFromStr(flowTypeStr);\n        if (flowType == null) {", "public TextSearchIndex<ServerProject> getTextSearchIndex(String connectionId) {\n    try {\n        return textSearchIndexCache.get(connectionId, () -> {", "protected InternalServerErrorException internalServerError(Exception e) {", "private void handleCreateProducers(Context ctx) throws Exception {\n    List<String> topics = (List<String>) mapper.readValue(ctx.body(), List.class);", "private void sendTestMessages(int numMessages) throws JMSException {\n    Session session = connection.createSession(true, Session.SESSION_TRANSACTED);\n    MessageProducer producer = session.createProducer(queue);\n    final TextMessage textMessage = session.createTextMessage();\n    textMessage.setText(\"Message\");\n    for (int i = 1; i <= numMessages; i++) {\n        producer.send(textMessage);\n        if (i % 1000 == 0) {", "@Override\npublic void exec(int executionCounter) {\n    List<String> args = RedisUtils.toPayload(luaScriptState.getSha(), keys.size(), keys, arguments);\n    redisAPI.evalsha(args, event -> {\n        if (event.succeeded()) {\n            promise.complete();\n        } else {\n            String message = event.cause().getMessage();\n            if (message != null && message.startsWith(\"NOSCRIPT\")) {\n                log.warn(\"ReOpenCircuitRedisCommand script couldn't be found, reload it\");", "@Override\npublic CompletableFuture<BenchmarkProducer> createProducer(String topic) {\n    return CompletableFuture.supplyAsync(() -> {\n        try {\n            DistributedLogManager dlm = namespace.openLog(topic);", "@EventListener\n@Async(\"taskExecutor\")\npublic void processArticleDeleteEvent(ArticleDeleteEvent articleDeleteEvent) throws InterruptedException {\n    Thread.sleep(1000);", "@Override\npublic void offerReconciledTransactionId(long reconciledTransactionId) {\n    requireNonNegative(reconciledTransactionId);\n    initializationLock.readLock().lock();\n    try {\n        if (sequence == null) {", "public String[] getAttributeNames(String className) throws Exception {\n    try {\n        return reportingAdminServiceStub.getAttributeNames(className);\n    } catch (Exception e) {\n        String msg = \"Unable to get attribute names\";", "public void deleteSavedReport(String name) throws Exception {\n    try {\n        reportingAdminServiceStub.deleteSavedReport(name);\n    } catch (Exception e) {\n        String msg = \"Unable to delete saved report\";", "    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    Output output = new Output(out);\n    kryoTL.get().writeObject(output, mapping);\n    output.flush();\n    /* [1] -> flowData */\n    eventData[1] = compress(out.toByteArray());\n    if (log.isDebugEnabled()) {\n        ObjectMapper mapper = new ObjectMapper();\n        String jsonString = null;\n        try {\n            jsonString = mapper.writeValueAsString(mapping);\n        } catch (JsonProcessingException e) {\n            log.error(\"Unable to convert\", e);\n        }\n        log.debug(\"Uncompressed data :\");", "/**\n * {@inheritDoc}\n */\npublic void run() {\n    while (isStarted && providerPipe != null && consumerPipe != null) {\n        try {\n            IMessage message = providerPipe.pullMessage();\n            if (log.isDebugEnabled()) {", "@Override\npublic void onStreamEvent(Notify notify) {", "public void handle() throws FacesException {\n    final Iterator<ExceptionQueuedEvent> i = getUnhandledExceptionQueuedEvents().iterator();\n    while (i.hasNext()) {\n        ExceptionQueuedEvent event = i.next();\n        ExceptionQueuedEventContext context = (ExceptionQueuedEventContext) event.getSource();\n        Throwable t = context.getException();\n        final FacesContext fc = FacesContext.getCurrentInstance();\n        final ExternalContext externalContext = fc.getExternalContext();\n        try {\n            if (isInvalidSessionStateException(t)) {", "public DataHandler modifyExcelURL(String dbsFilePath) throws XMLStreamException, IOException {\n    try {\n        OMElement dbsFile = AXIOMUtil.stringToOM(FileManager.readFile(dbsFilePath));\n        OMElement dbsConfig = dbsFile.getFirstChildWithName(new QName(\"config\"));\n        Iterator configElement1 = dbsConfig.getChildElements();\n        String productFilePath = resourceFileLocation + File.separator + \"resources\" + File.separator + \"Products-sql.xls\";\n        while (configElement1.hasNext()) {\n            OMElement property = (OMElement) configElement1.next();\n            String value = property.getAttributeValue(new QName(\"name\"));\n            if (\"url\".equals(value)) {\n                property.setText(\"jdbc:wso2:excel:filePath=\" + productFilePath);\n            }\n        }", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"prometheus\")\nToxiproxyContainer.ContainerProxy prometheusContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(PROMETHEUS_BEAN_NAME) GenericContainer<?> prometheus, ConfigurableEnvironment environment, PrometheusProperties properties) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(prometheus, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.prometheus.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.prometheus.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.prometheus.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedPrometheusToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "        URL url = new URL(containerEndpoint + \"/_internal/config\");\n        connection = (HttpURLConnection) url.openConnection();\n        connection.setConnectTimeout(5_000);\n        connection.setReadTimeout(5_000);\n        connection.setRequestMethod(\"PUT\");\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        connection.setRequestProperty(\"Accept\", \"application/json\");\n        try (OutputStreamWriter osw = new OutputStreamWriter(connection.getOutputStream())) {\n            osw.write(requestBody);\n            osw.flush();\n        }\n        int responseCode = connection.getResponseCode();\n        if (responseCode != 200) {\n            String response = getResponseBody(connection);", "@Nullable\nprivate static OAuth2FlowType flowTypeFromStr(String flowTypeStr) {\n    try {\n        return OAuth2FlowType.valueOf(flowTypeStr);\n    } catch (IllegalArgumentException ex) {", "// doc comment inherited from LogWriter\npublic void logOneWay(Logger log, Object command) {", "@Override\npublic void decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws ProtocolCodecException {\n    if (log.isDebugEnabled()) {", "public static DockerImageName getDockerImageName(CommonContainerProperties properties) {\n    String customImageName = properties.getDockerImage();\n    String defaultDockerImageName = properties.getDefaultDockerImage();\n    if (customImageName == null && defaultDockerImageName == null) {\n        throw new IllegalStateException(\"Please specify dockerImage for the container.\");\n    }\n    if (customImageName == null) {\n        return setupImage(defaultDockerImageName, properties);\n    }\n    DockerImageName customImage = setupImage(customImageName, properties);\n    if (defaultDockerImageName == null) {\n        return customImage;\n    }\n    DockerImageName defaultImage = DockerImageName.parse(defaultDockerImageName);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"dynamodb\")\nToxiproxyContainer.ContainerProxy dynamodbContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_DYNAMODB) GenericContainer<?> dynamoDb, DynamoDBProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(dynamoDb, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.dynamodb.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.dynamodb.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.dynamodb.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedDynamoDBToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "private void logCryptomatorSystemProperty(String propertyName) {", "@Override\npublic void onWSDisconnect(WebSocketConnection conn) {", "@Override\npublic void onMessage(Message message) {", "@ExceptionHandler(Exception.class)\npublic ResponseEntity<Object> prepareException(Exception e, WebRequest request) {", "//\n// TODO: See if start-server can share some of this code\n//\nprotected void doExecute() throws Exception {\n    log.info(\"Waiting for Geronimo server...\");\n    // Setup a callback to time out verification\n    final ObjectHolder verifyTimedOut = new ObjectHolder();\n    TimerTask timeoutTask = new TimerTask() {\n\n        public void run() {\n            verifyTimedOut.set(Boolean.TRUE);\n        }\n    };\n    if (timeout > 0) {\n        log.debug(\"Starting verify timeout task; triggers in: \" + timeout + \"s\");\n        timer.schedule(timeoutTask, timeout * 1000);\n    }\n    // Verify server started\n    ServerProxy server = new ServerProxy(hostname, port, username, password);\n    boolean started = false;\n    while (!started) {\n        if (verifyTimedOut.isSet()) {\n            throw new MojoExecutionException(\"Unable to verify if the server was started in the given time\");\n        }\n        started = server.isFullyStarted();\n        if (!started) {\n            Throwable error = server.getLastError();\n            if (error != null) {\n                log.debug(\"Server query failed; ignoring\", error);\n            }\n            Thread.sleep(1000);\n        }\n    }\n    server.closeConnection();\n    // Stop the timer, server should be up now\n    timeoutTask.cancel();\n    log.info(\"Geronimo server started\");", "public synchronized void executePeriodically(final Runnable task, long period) {\n    TimerTask existing = timerTasks.get(task);\n    if (existing != null) {", "public void setDestinationDirectory(String destinationDir) {", "@Test\nvoid testCachePathContainsTilde() {\n    String customPath = \"C:\\\\user\\\\abcdef~1\\\\path\";\n    wdm.config().setCachePath(customPath);\n    String cachePath = wdm.config().getCachePath();", "public List getDLQContents(QueueBrowser qb) {\n    List list = new ArrayList();\n    try {\n        for (Enumeration e = qb.getEnumeration(); e.hasMoreElements(); ) {\n            Object o = e.nextElement();\n            list.add(o);\n        }\n        connection.stop();\n        dlqBrowser.close();\n        session.close();\n        connection.close();\n    } catch (Exception e) {", "/**\n * Checks the whether the provided uri matches the provided {@link RuleFeatures.Feature}.\n *\n * @param feature the feature to check against\n * @param uri the uri to check\n * @return returns true when the uri matches the feature, else returns false.\n */\npublic boolean isFeatureRequest(RuleFeatures.Feature feature, String uri) {\n    for (RuleFeatures features : getFeaturesList()) {\n        if (features.getUrlPattern().matcher(uri).matches()) {\n            if (features.hasFeature(feature)) {", "        c.setOpTosUri(appConfiguration.getOpTosUri());\n        c.setOpPolicyUri(appConfiguration.getOpPolicyUri());\n        c.setJwksUri(appConfiguration.getJwksUri());\n        c.setServiceDocumentation(appConfiguration.getServiceDocumentation());\n        c.setUmaProfilesSupported(new String[0]);\n        c.setRegistrationEndpoint(appConfiguration.getRegistrationEndpoint());\n        c.setTokenEndpoint(appConfiguration.getTokenEndpoint());\n        c.setAuthorizationEndpoint(appConfiguration.getAuthorizationEndpoint());\n        c.setIntrospectionEndpoint(baseEndpointUri + \"/rpt/status\");\n        c.setResourceRegistrationEndpoint(baseEndpointUri + \"/host/rsrc/resource_set\");\n        c.setPermissionEndpoint(baseEndpointUri + \"/host/rsrc_pr\");\n        c.setScopeEndpoint(baseEndpointUri + UMA_SCOPES_SUFFIX);\n        c.setClaimsInteractionEndpoint(baseEndpointUri + UMA_CLAIMS_GATHERING_PATH);\n        // convert manually to avoid possible conflicts between resteasy providers, e.g. jettison, jackson\n        final String entity = ServerUtil.asPrettyJson(c);", "/**\n * {@inheritDoc}\n */\n@Override\npublic void messageReceived(IoSession session, Object in) {\n    if (log.isDebugEnabled()) {\n        if (in instanceof IoBuffer) {\n            log.debug(\"Handskake\");\n            return;\n        }\n        try {\n            final Packet packet = (Packet) in;\n            final Object message = packet.getMessage();\n            final Header source = packet.getHeader();", "@Override\npublic void onSharedObjectSend(ISharedObjectBase so, String arg1, List<?> list) {", "@Override\npublic void deleteClaim(String claimType) {\n    Query query = em.createQuery(\"select c from Claim c where c.claimType=:claimtype\");\n    query.setParameter(\"claimtype\", claimType);\n    Object claimObj = query.getSingleResult();\n    em.remove(claimObj);", "/**\n * @param buffer\n * @param bufferIndex\n * @param maxLen\n * @return position of terminating null bytes\n */\npublic static int findUNITermination(byte[] buffer, int bufferIndex, int maxLen) {\n    int len = 0;\n    while (buffer[bufferIndex + len] != (byte) 0x00 || buffer[bufferIndex + len + 1] != (byte) 0x00) {\n        len += 2;\n        if (len > maxLen) {\n            if (log.isDebugEnabled()) {\n                log.warn(\"Failed to find string termination with max length \" + maxLen);", "@ParameterizedTest\n@MethodSource(\"data\")\nvoid testServerSeleniumServer(Capabilities capabilities) throws Exception {\n    String serverUrl = String.format(\"http://localhost:%s/\", serverPort);\n    WebDriver driver = new RemoteWebDriver(new URL(serverUrl), capabilities);\n    String sutUrl = \"https://bonigarcia.dev/selenium-webdriver-java/\";\n    driver.get(sutUrl);\n    String title = driver.getTitle();", "public int compare(String v1, String v2) {\n    String[] v1split = v1.split(\"\\\\.\");\n    String[] v2split = v2.split(\"\\\\.\");\n    int length = max(v1split.length, v2split.length);\n    for (int i = 0; i < length; i++) {\n        try {\n            int v1Part = i < v1split.length ? parseInt(v1split[i]) : 0;\n            int v2Part = i < v2split.length ? parseInt(v2split[i]) : 0;\n            if (v1Part < v2Part) {\n                return -1;\n            }\n            if (v1Part > v2Part) {\n                return 1;\n            }\n        } catch (Exception e) {", "/**\n * \u8ba4\u8bc1\u8d26\u6237\u7684\u7b7e\u540d\n * @param tx\n * @param eckeys\n * @param txid\n * @param hash160\n */\npublic boolean signCertAccountInputs(Transaction tx, ECKey[] eckeys, byte[] txid, byte[] hash160) {\n    int numInputs = tx.getInputs().size();\n    for (int i = 0; i < numInputs; i++) {\n        TransactionInput txIn = (TransactionInput) tx.getInput(i);\n        if (txIn.getFroms() == null || txIn.getFroms().size() == 0) {", "@ParameterizedTest\n@ValueSource(strings = { \"chrome\", \"firefox\", \"edge\", \"opera\", \"chromium\", \"not-a-browser\" })\nvoid pathTest(String browser) {\n    Optional<Path> detectedPath = versionDetector.getBrowserPath(browser);\n    if (detectedPath.isPresent()) {", "public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof HomeRealmCallback) {\n            HomeRealmCallback callback = (HomeRealmCallback) callbacks[i];\n            String homeRealm = (String) callback.getRequest().getParameter(FederationConstants.PARAM_HOME_REALM);\n            if (homeRealm == null || homeRealm.length() == 0) {\n                LOG.debug(\"No home realm found in request\");\n            } else {", "// doc comment inherited from LogWriter\npublic void logReceivedException(Logger log, IOException error) {", "/*\n     * (non-Javadoc)\n     * \n     * @see java.io.OutputStream#write(int)\n     */\n@Override\npublic void write(int arg0) throws IOException {\n    try {\n        byte b = (byte) arg0;\n        if (LOG.isDebugEnabled())", "private void collectMetrics(Buffer buffer) {\n    Map<String, String> map = new HashMap<>();\n    Splitter.on(System.lineSeparator()).omitEmptyStrings().trimResults().splitToList(buffer.toString()).stream().filter(input -> input != null && input.contains(DELIMITER) && !input.contains(\"executable\") && !input.contains(\"config_file\")).forEach(entry -> {\n        List<String> keyValue = Splitter.on(DELIMITER).omitEmptyStrings().trimResults().splitToList(entry);\n        if (keyValue.size() == 2) {\n            map.put(keyValue.get(0), keyValue.get(1));\n        }\n    });", "/**\n * \u63a5\u6536\u5230\u5171\u8bc6\u6d88\u606f\uff0c\u5728\u6b64\u505a2\u4e2a\u9a8c\u8bc1\uff0c\u7b2c\u4e00\u7b7e\u540d\u662f\u5426\u6b63\u786e\uff0c\u7b2c\u4e8c\u662f\u5426\u662f\u5171\u8bc6\u8282\u70b9\u53d1\u51fa\u7684\u6d88\u606f\uff0c\u9a8c\u8bc1\u901a\u8fc7\u4e4b\u540e\uff0c\u5c31\u653e\u5230\u5171\u8bc6\u4f1a\u8bae\u8bb0\u5f55\u91cc\u9762\u53bb\uff0c\u7136\u540e\u8f6c\u53d1\u8be5\u6761\u6d88\u606f\n */\n@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    ConsensusMessage consensusMessage = (ConsensusMessage) message;\n    MessageProcessResult result = new MessageProcessResult(consensusMessage.getId(), false);\n    //\u9a8c\u8bc1\u7b7e\u540d\u662f\u5426\u6b63\u786e\n    //\u6240\u6709\u8282\u70b9\u53c2\u4e0e\u5171\u8bc6\uff0c\u5fc5\u987b\u4ee5\u4e66\u9762\u534f\u8bae\u5f62\u5f0f\u8fdb\u884c\u7b7e\u540d\uff0c\u786e\u4fdd\u6076\u610f\u8282\u70b9\u80fd\u88ab\u8ffd\u8e2a\u5904\u7406\n    if (consensusMessage.getSigns() == null) {", "@Override\npublic void onException(JMSException e) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"mariadb\")\nToxiproxyContainer.ContainerProxy mariadbContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_MARIADB) MariaDBContainer mariadbContainer, MariaDBProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(mariadbContainer, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.mariadb.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.mariadb.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.mariadb.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedMariadbToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Test\nvoid testEdgeMac() {\n    String libName = \"libc++.dylib\";\n    String driverVersion = \"87.0.664.75\";\n    WebDriverManager wdm = WebDriverManager.edgedriver().driverVersion(driverVersion).mac();\n    wdm.setup();\n    String downloadedDriverPath = wdm.getDownloadedDriverPath();", "@Override\npublic boolean beforeExecute(ForestRequest request) {\n    log.info(\"invoke Base Error beforeExecute\");\n    Object[] args = request.getArguments();", "private void handleSpanChunk(PSpanChunk spanChunk) {\n    if (isDebug) {", "@ParameterizedTest\n@ValueSource(strings = { \"chrome\", \"firefox\", \"edge\", \"opera\", \"chromium\" })\nvoid commandsTest(String browser) {\n    Optional<String> detectedVersion = versionDetector.getBrowserVersionFromTheShell(browser);\n    if (detectedVersion.isPresent()) {", "private static void handleException(String msg, Exception e) {", "public Object resolve(String name, Class clz) throws NamingException {\n    Context ctx = new InitialContext();\n    ctx = (Context) ctx.lookup(\"java:comp/env\");", "public void assertBeanMarshalls(Object original) throws IOException {\n    super.assertBeanMarshalls(original);\n    String xml = getXStreamWireFormat().marshalText(original);\n    LOG.info(original.getClass().getName() + \" as XML is:\");", "/**\n * Return a static value MapMetastore\n * @param tileTable The table name with tile data\n * @param pointTable The table name with point data\n * @return The metastore\n */\npublic static MapMetastore newStaticMapsMeta(String tileTable, String pointTable) {", "    }\n    final QueueViewMBean queueView = getProxyToQueue(dlq.getQueueName());\n    assertTrue(\"Message should be DLQ'd\", Wait.waitFor(new Wait.Condition() {\n\n        @Override\n        public boolean isSatisified() throws Exception {\n            return queueView.getQueueSize() == MSG_COUNT;\n        }\n    }));\n    LOG.info(\"DLQ has captured all expired messages\");\n    Deque<String> browsed = new LinkedList<String>();\n    CompositeData[] elements = queueView.browse();\n    assertEquals(MSG_COUNT, elements.length);\n    for (CompositeData element : elements) {\n        String messageID = (String) element.get(\"JMSMessageID\");", "@Override\npublic void delete(final String uri, final Handler<Integer> doneHandler) {\n    client.request(HttpMethod.DELETE, uri).onComplete(asyncResult -> {\n        if (asyncResult.failed()) {", "@Override\npublic void removeFromClusterIdIndex(String clusterId) {", "@GET\n@Path(\"{id}\")\n@Produces({ UmaConstants.JSON_MEDIA_TYPE })\npublic Response getScopeDescription(@PathParam(\"id\") String id) {", "@Override\nprotected boolean hasLockOwnership() throws IOException {\n    boolean hasLock = true;\n    if (broker.getPersistenceAdapter() instanceof JDBCPersistenceAdapter) {\n        JDBCPersistenceAdapter jdbcPersistenceAdapter = (JDBCPersistenceAdapter) broker.getPersistenceAdapter();\n        Locker locker = jdbcPersistenceAdapter.getLocker();\n        if (locker != null) {\n            try {\n                if (!locker.keepAlive()) {\n                    hasLock = false;\n                }\n            } catch (SuppressReplyException ignoreWhileHandlingInProgress) {\n            } catch (IOException ignored) {\n            }\n            if (!hasLock) {", "@Override\npublic void exec(int executionCounter) {\n    List<String> args = RedisUtils.toPayload(luaScriptState.getSha(), keys.size(), keys, arguments);\n    redisAPI.evalsha(args, event -> {\n        if (event.succeeded()) {\n            Response result = event.result();\n            promise.complete(result);\n        } else {\n            String message = event.cause().getMessage();\n            if (message != null && message.startsWith(\"NOSCRIPT\")) {\n                log.warn(\"UnlockSampleQueuesRedisCommand script couldn't be found, reload it\");", "public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List<Subscription> consumers) throws Exception {\n    List<Subscription> duplicateFreeSubs = new ArrayList<Subscription>();\n    synchronized (consumers) {\n        for (Subscription sub : consumers) {\n            ConsumerInfo info = sub.getConsumerInfo();\n            if (info.isNetworkSubscription()) {\n                boolean highestPrioritySub = true;\n                for (Iterator<Subscription> it = duplicateFreeSubs.iterator(); it.hasNext(); ) {\n                    Subscription candidate = it.next();\n                    if (matches(candidate, info)) {\n                        if (hasLowerPriority(candidate, info)) {\n                            it.remove();\n                        } else {\n                            // higher priority matching sub exists\n                            highestPrioritySub = false;", "@Override\npublic void warn(String s, Throwable throwable) {", "@Override\npublic void deleteRole(String name) {\n    Query query = em.createQuery(\"select r from Role r where r.name=:name\");\n    query.setParameter(\"name\", name);\n    Object roleObj = query.getSingleResult();\n    em.remove(roleObj);", "private void deleteTopics() {\n    synchronized (createdTopics) {\n        for (String topic : createdTopics) {", "        }\n    }\n    producerConnection.close();\n    LOG.info(\"Mem usage after producer done: \" + broker.getSystemUsage().getMemoryUsage().getPercentUsage() + \"%\");\n    // Browse the queue.\n    Connection connection = factory.createConnection();\n    connection.start();\n    Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n    QueueBrowser browser = session.createBrowser(queue);\n    Enumeration<?> enumeration = browser.getEnumeration();\n    int browsed = 0;\n    while (enumeration.hasMoreElements()) {\n        TextMessage m = (TextMessage) enumeration.nextElement();\n        browsed++;\n        if ((browsed % 1000) == 0) {", "@ParameterizedTest\n@MethodSource(\"data\")\nvoid testFilterCacheBy(String version, int expectedVersions) {\n    CacheHandler cacheHandler = new CacheHandler(new Config());\n    List<File> filteredList = cacheHandler.filterCacheBy(getInputFileList(), version, true);", "@Override\npublic MessageProcessResult process(Message message, Peer peer) {", "private RecoveryCondition createIndexRecoveryCondition(final InternalLogProvider logProvider, final TokenNameLookup tokenNameLookup) {\n    return new RecoveryCondition() {\n\n        private final InternalLog log = logProvider.getLog(IndexSamplingController.class);\n\n        @Override\n        public boolean test(IndexDescriptor descriptor) {\n            IndexSample indexSample = indexStatisticsStore.indexSample(descriptor.getId());\n            long samples = indexSample.sampleSize();\n            long size = indexSample.indexSize();\n            boolean empty = (samples == 0) || (size == 0);\n            if (empty) {", "private void loadingKeyFailed(Throwable e) {\n    if (e instanceof UnlockCancelledException) {\n        // ok\n    } else if (e instanceof VaultKeyInvalidException) {\n        //TODO: specific error screen", "@Override\npublic void exec(int executionCounter) {\n    List<String> args = RedisUtils.toPayload(luaScriptState.getSha(), keys.size(), keys, arguments);\n    redisAPI.evalsha(args, event -> {\n        if (event.succeeded()) {\n            promise.complete();\n        } else {\n            String message = event.cause().getMessage();\n            if (message != null && message.startsWith(\"NOSCRIPT\")) {\n                log.warn(\"CloseCircuitRedisCommand script couldn't be found, reload it\");", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"mongodb\")\nToxiproxyContainer.ContainerProxy mongodbContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_MONGODB) GenericContainer<?> mongodb, MongodbProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(mongodb, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.mongodb.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.mongodb.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.mongodb.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedMongodbToxiProxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "private void registerMongodbEnvironment(GenericContainer<?> mongodb, ConfigurableEnvironment environment, MongodbProperties properties) {\n    Integer mappedPort = mongodb.getMappedPort(properties.getPort());\n    String host = mongodb.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.mongodb.port\", mappedPort);\n    map.put(\"embedded.mongodb.host\", host);\n    map.compute(\"embedded.mongodb.username\", (k, v) -> properties.getUsername());\n    map.compute(\"embedded.mongodb.password\", (k, v) -> properties.getPassword());\n    map.put(\"embedded.mongodb.database\", properties.getDatabase());", "@Override\npublic void errorOccurred(Connection conn, String error) {", "    HeadersMultiMap headers = defaultRequestHeaders();\n    headers.add(\"Accept\", \"application/json\");\n    headers.add(SELF_REQUEST_HEADER, \"true\");\n    clientRequestCreator.createClientRequest(HttpMethod.GET, schemaLocation.schemaLocation(), headers, TIMEOUT_MS, event -> {\n        log.warn(\"Got an error while fetching schema\", event);\n        promise.complete(Optional.empty());\n    }).onComplete(asyncResult -> {\n        HttpClientRequest fetchSchemaRequest = asyncResult.result();\n        fetchSchemaRequest.setChunked(true);\n        fetchSchemaRequest.send(responseAsyncResult -> {\n            HttpClientResponse cRes = responseAsyncResult.result();\n            cRes.bodyHandler(data -> {\n                if (StatusCode.OK.getStatusCode() == cRes.statusCode()) {\n                    String contentType = cRes.getHeader(CONTENT_TYPE_HEADER);\n                    if (contentType != null && !contentType.contains(CONTENT_TYPE_JSON)) {", "@Test\npublic void testCtor() throws Exception {\n    File file = new File(\"target/test-classes/fixtures/sample.m4a\");\n    M4AReader reader = new M4AReader(file);\n    ITag tag = reader.readTag();", "private void closeStreamFromURL(String strURL, InputStream inputStream) {\n    if (inputStream != null) {\n        try {\n            inputStream.close();\n        } catch (Exception e) {", "private void updateLoggingResources(Buffer buffer) throws ValidationException {\n    extractLoggingFilterValues(buffer);\n    for (Map<String, String> payloadFilters : getLoggingResource().getPayloadFilters()) {", "                if (tag != null) {\n                    switch(tag.getDataType()) {\n                        case IoConstants.TYPE_AUDIO:\n                            audio++;\n                            break;\n                        case IoConstants.TYPE_VIDEO:\n                            video++;\n                            break;\n                        case IoConstants.TYPE_METADATA:\n                            meta++;\n                            break;\n                    }\n                }\n            }\n            reader.close();", "public boolean externalForceReAuthentication(CustomScriptConfiguration scriptConfiguration, ExternalPostAuthnContext context) {\n    try {", "@Override\npublic Response requestAccessToken(String token, String tokenTypeHint, String clientId, HttpServletRequest request, HttpServletResponse response, SecurityContext sec) {", "/**\n * Logs the given {@link Throwable} and try ending the response.\n *\n * @param throwable the {@link Throwable} to log in error.\n * @param response the response to end.\n *\n * @return a completed {@link Completable} in any circumstances.\n */\nprivate Completable handleError(Throwable throwable, HttpServerResponse response) {", "@Override\npublic void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n    if (ctx.channel().isWritable()) {\n        if (reaperFuture != null) {\n            reaperFuture.cancel(false);\n            reaperFuture = null;\n        }\n    } else {\n        if (reaperFuture == null) {\n            reaperFuture = ctx.executor().schedule(() -> {\n                var ex = new TransportThrottleException(this.maxWriteLockMillis);", "@Override\npublic void storeXDeltaResponseHeader(String xDeltaResponseNumber) {\n    if (log.isTraceEnabled()) {", "@Override\npublic void handleSimple(ServerRequest<GeneratedMessageV3> serverRequest) {\n    final GeneratedMessageV3 data = serverRequest.getData();\n    if (data instanceof PSpan) {\n        handleSpan((PSpan) data);\n    } else {", "            driverManagerType = FIREFOX;\n            break;\n        case \"org/openqa/selenium/opera/OperaDriver\":\n            driverManagerType = OPERA;\n            break;\n        case \"org/openqa/selenium/edge/EdgeDriver\":\n            driverManagerType = EDGE;\n            break;\n        case \"org/openqa/selenium/ie/InternetExplorerDriver\":\n            driverManagerType = IEXPLORER;\n            break;\n        default:\n            break;\n    }\n    if (driverManagerType != null) {", "        message.setLongProperty(\"sendTime\", sendTime);\n        producer.send(message);\n        LOG.debug(\"Receiving message \" + i);\n        Message receivedMessage = consumer.receive(5000);\n        assertNotNull(\"On message \" + i, receivedMessage);\n        assertTrue(\"On message \" + i, receivedMessage instanceof BytesMessage);\n        BytesMessage receivedBytesMessage = (BytesMessage) receivedMessage;\n        int numElements = 0;\n        try {\n            while (true) {\n                receivedBytesMessage.readBoolean();\n                numElements++;\n            }\n        } catch (Exception ex) {\n        }", "private static void log(String title, SonarLintPathPattern[] patterns) {\n    if (patterns.length > 0) {", "public DeferredChanged<ChangedSchema> getOrAddSchema(RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right) {\n    // don't allow recursive references to schemas\n    if (refSet.contains(key)) {", "@Override\npublic void handle(Exception ex) {", "public boolean externalModify(JSONObject rptAsJson, CustomScriptConfiguration scriptConfiguration, ExternalUmaRptClaimsContext context) {\n    try {", "@Override\npublic void failToRecoverTransactionsAfterPosition(Throwable t, LogPosition recoveryFromPosition) {", "                for (ConsumerInfo nc : networkConsumerList) {\n                    if (!nc.isNetworkConsumersEmpty()) {\n                        for (ConsumerId id : nc.getNetworkConsumerIds()) {\n                            if (id.equals(info.getConsumerId())) {\n                                nc.removeNetworkConsumerId(id);\n                                if (nc.isNetworkConsumersEmpty()) {\n                                    gcList.add(nc);\n                                }\n                            }\n                        }\n                    }\n                }\n                for (ConsumerInfo nc : gcList) {\n                    networkConsumerList.remove(nc);\n                    super.removeConsumer(context, nc);", "private void registerConsulEnvironment(GenericContainer<?> consul, ConfigurableEnvironment environment, ConsulProperties properties) {\n    Integer mappedPort = consul.getMappedPort(properties.getPort());\n    String host = consul.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.consul.port\", mappedPort);\n    map.put(\"embedded.consul.host\", host);", "@Idempotent\npublic APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n    handlerExecuted = true;\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"Content-Type\", \"application/json\");\n    headers.put(\"Access-Control-Allow-Origin\", \"*\");\n    headers.put(\"Access-Control-Allow-Methods\", \"GET, OPTIONS\");\n    headers.put(\"Access-Control-Allow-Headers\", \"*\");\n    APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent().withHeaders(headers);\n    try {\n        String address = JsonConfig.get().getObjectMapper().readTree(input.getBody()).get(\"address\").asText();\n        final String pageContents = this.getPageContents(address);\n        String output = String.format(\"{ \\\"message\\\": \\\"hello world\\\", \\\"location\\\": \\\"%s\\\" }\", pageContents);", "@Override\npublic void visitDecimal(String name, long id, int exp, long mant) {", "/**\n * Merges headers, makes sure that only one value of all headers ends up in the destination MultiMap.\n *\n * Note: This is not 100% in line with https://www.rfc-editor.org/rfc/rfc7230#section-3.2.2 to be further looked into.\n *\n * @param context optional context information to be used for logging purposes, not used for the actual merge\n */\npublic static void mergeHeaders(@Nonnull MultiMap destination, @Nonnull MultiMap source, @Nullable String context) {\n    source.forEach(sourceHeader -> {\n        if (destination.contains(sourceHeader.getKey())) {\n            // we already have such a header\n            String destinationValue = destination.get(sourceHeader.getKey());\n            String sourceValue = source.get(sourceHeader.getKey());\n            if (!destinationValue.equals(sourceValue)) {", "@Override\npublic void get(final String path, final Handler<Buffer> bodyHandler) {", "private double nextRate(long periodNanos, long actual, long expected, long backlog, String type) {", "@Override\npublic void recoveryCleanupClosed(Path indexFile, IndexDescriptor index) {", "@Override\npublic void warning(String message) {", "public void failed(Artifact configurationId, Throwable cause) {", "public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof HomeRealmCallback) {\n            HomeRealmCallback callback = (HomeRealmCallback) callbacks[i];\n            final String loginHint = (String) callback.getRequest().getParameter(\"login_hint\");\n            if (loginHint == null || loginHint.isEmpty()) {\n                LOG.debug(\"No login_hint found in request to set home realm\");\n            } else {\n                String[] homeRealm = loginHint.split(\"@\");\n                if (homeRealm.length == 2) {\n                    LOG.debug(\"Home realm '{}' found in request\", StringEscapeUtils.escapeHtml4(homeRealm[1]));\n                    callback.setHomeRealm(homeRealm[1]);\n                } else {", "@Override\npublic void readExternal(IDataInput in) {\n    log.debug(\"CommandMessage - Read external\");\n    super.readExternal(in);\n    short[] flagsArray = readFlags(in);\n    for (int i = 0; i < flagsArray.length; ++i) {\n        short flags = flagsArray[i];", "Optional<Pair<KafkaProducer<String, String>, Pattern>> findMatchingKafkaProducer(String topic) {\n    for (Map.Entry<Pattern, KafkaProducer<String, String>> entry : kafkaProducers.entrySet()) {\n        Matcher matcher = entry.getKey().matcher(topic);\n        if (matcher.matches()) {", "private void registerSchemaRegistryEnvironment(GenericContainer<?> schemaRegistry, ConfigurableEnvironment environment, SchemaRegistryConfigurationProperties properties) {\n    String host = schemaRegistry.getHost();\n    Integer port = schemaRegistry.getMappedPort(properties.getPort());\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.kafka.schema-registry.host\", host);\n    map.put(\"embedded.kafka.schema-registry.port\", port);\n    if (properties.isBasicAuthenticationEnabled()) {\n        map.put(\"embedded.kafka.schema-registry.username\", SchemaRegistryConfigurationProperties.USERNAME);\n        map.put(\"embedded.kafka.schema-registry.password\", SchemaRegistryConfigurationProperties.PASSWORD);\n    }", "@Override\npublic void debug(String s, Throwable throwable) {", "    JsonObject config;\n    List<KafkaConfiguration> configurations = new ArrayList<>();\n    try {\n        replacedConfig = StringUtils.replaceWildcardConfigs(configurationResourceBuffer.toString(UTF_8), properties);\n        config = new JsonObject(Buffer.buffer(replacedConfig));\n    } catch (Exception e) {\n        log.warn(\"Could not replace wildcards with environment properties for kafka configurations due to following reason: {}\", e.getMessage());\n        return configurations;\n    }\n    for (String topicPattern : config.fieldNames()) {\n        try {\n            Pattern pattern = Pattern.compile(topicPattern);\n            final Map<String, String> additionalConfig = extractAdditionalConfig(config.getJsonObject(topicPattern));\n            setUniqueClientId(additionalConfig);\n            configurations.add(new KafkaConfiguration(pattern, additionalConfig));", "@Test\npublic void test() throws IOException {\n    // get dummy scope\n    WebScope scope = (WebScope) applicationContext.getBean(\"web.scope\");\n    // test file fixture\n    File file = new File(\"target/test-classes/fixtures/test.flv\");\n    // new file provider instance\n    FileProvider provider = new FileProvider(scope, file);\n    // data pipe\n    IPipe pipe = new InMemoryPullPullPipe();\n    // subscribe the provider to the pipe\n    pipe.subscribe(provider, null);\n    // grab a message from the pipe (can do this until no messages are remaining)\n    IMessage msg = pipe.pullMessage();", "public void info(String s, Throwable t) {", "public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {", "public boolean checkKeyInResolutionCache(String key, boolean showLog) {\n    String valueFromResolutionCache = getValueFromResolutionCache(key);\n    boolean valueInResolutionCache = valueFromResolutionCache != null && !valueFromResolutionCache.isEmpty();\n    if (valueInResolutionCache) {\n        Date expirationDate = getExpirationDateFromResolutionCache(key);\n        valueInResolutionCache &= checkValidity(key, valueFromResolutionCache, expirationDate);\n        if (valueInResolutionCache) {\n            String strDate = formatDate(expirationDate);\n            if (showLog) {", "@Override\npublic void setBus(Bus bus) {\n    if (bus != null) {\n        String busInfo = String.format(\"Successfully created %s with SpringBus [%s]\", getName(), bus.getId());", "@Override\npublic void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {", "        }\n        final Set<GrantedAuthority> authorities = new HashSet<>();\n        if (currentAuth.getAuthorities() != null) {\n            authorities.addAll(currentAuth.getAuthorities());\n        }\n        Iterator<? extends GrantedAuthority> authIt = currentAuth.getAuthorities().iterator();\n        while (authIt.hasNext()) {\n            GrantedAuthority ga = authIt.next();\n            String roleName = ga.getAuthority();\n            try {\n                Role role = roleDAO.getRole(roleName.substring(5), Arrays.asList(\"all\"));\n                for (Entitlement e : role.getEntitlements()) {\n                    authorities.add(new SimpleGrantedAuthority(e.getName()));\n                }\n            } catch (Exception ex) {", "@Async(\"taskExecutor\")\n@EventListener\npublic void processCommentCreatedEvent(CommentEvent commentEvent) throws InterruptedException {", "private void deleteEmployeeBatchRequest() throws AxisFault, XPathExpressionException {\n    OMElement payload = fac.createOMElement(\"deleteEmployee_batch_req\", omNs);\n    for (int i = 10; i < 36; i++) {\n        OMElement batchRequest = fac.createOMElement(\"addEmployee\", omNs);\n        OMElement empNo = fac.createOMElement(\"employeeNumber\", omNs);\n        empNo.setText(i + \"\");\n        batchRequest.addChild(empNo);\n        payload.addChild(batchRequest);\n    }\n    if (log.isDebugEnabled()) {", "@Test(timeout = 60000)\npublic void testCreditNotGrantedUntilBacklogClears() throws Exception {\n    final int MSG_COUNT = 1000;\n    AmqpClient client = createAmqpClient();\n    AmqpConnection connection = trackConnection(client.connect());\n    AmqpSession session = connection.createSession();\n    AmqpReceiver receiver = session.createReceiver(\"queue://\" + getTestName());\n    AmqpSender sender = session.createSender(\"queue://\" + getTestName(), true);\n    for (int i = 1; i <= MSG_COUNT; ++i) {\n        AmqpMessage message = new AmqpMessage();\n        message.setText(\"Test-Message: \" + i);\n        sender.send(message);\n        if (i % 1000 == 0) {", "@Override\npublic synchronized void panic(Throwable cause) {\n    if (!healthy) {\n        return;\n    }\n    Objects.requireNonNull(cause, \"Must provide a non null cause for the database panic\");\n    this.causeOfPanic = cause;\n    this.healthy = false;", "public ServerConfigurationService getServerConfigurationService() {\n    if (this.serverConfigurationService == null) {\n        String msg = \"Before activating javax caching  bundle, an instance of \" + \"ServerConfigurationService should be in existence\";", "@Override\npublic List<Flow> save(final FlowReferenceType flowReferenceType, final String referenceId, final List<Flow> flows) {\n    try {", "public TenantMgtConfiguration buildTenantMgtConfiguration(OMElement tenantMgtConfigElement, String tenantManagerClass) throws UserStoreException {\n    Map<String, String> tenantMgtProperties = null;\n    TenantMgtConfiguration tenantMgtConfiguration = new TenantMgtConfiguration();\n    Iterator<OMElement> iterator = tenantMgtConfigElement.getChildrenWithName(new QName(UserCoreConstants.TenantMgtConfig.LOCAL_NAME_TENANT_MANAGER));\n    for (; iterator.hasNext(); ) {\n        OMElement tenantManager = iterator.next();\n        if (tenantManagerClass != null && tenantManagerClass.equals(tenantManager.getAttributeValue(new QName(UserCoreConstants.TenantMgtConfig.ATTRIBUTE_NAME_CLASS)))) {\n            tenantMgtProperties = readChildPropertyElements(tenantManager);\n            tenantMgtConfiguration.setTenantManagerClass(tenantManagerClass);\n            tenantMgtConfiguration.setTenantStoreProperties(tenantMgtProperties);\n            return tenantMgtConfiguration;\n        }\n    }\n    String errorMessage = \"Error in locating TenantManager compatible with PrimaryUserStore.\" + \" Required a TenantManager using \" + tenantManagerClass + \" in tenant-mgt.xml.\";\n    if (log.isDebugEnabled()) {", "private void registerMariadbEnvironment(MariaDBContainer mariadb, ConfigurableEnvironment environment, MariaDBProperties properties) {\n    Integer mappedPort = mariadb.getMappedPort(properties.getPort());\n    String host = mariadb.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.mariadb.port\", mappedPort);\n    map.put(\"embedded.mariadb.host\", host);\n    map.put(\"embedded.mariadb.schema\", properties.getDatabase());\n    map.put(\"embedded.mariadb.user\", properties.getUser());\n    map.put(\"embedded.mariadb.password\", properties.getPassword());\n    String jdbcURL = \"jdbc:mysql://{}:{}/{}\";", "@Override\npublic void init(Object... objs) {", "        message.setLongProperty(\"sendTime\", sendTime);\n        producer.send(message);\n        LOG.debug(\"Receiving message \" + i);\n        Message receivedMessage = consumer.receive(5000);\n        assertNotNull(\"On message \" + i, receivedMessage);\n        assertTrue(\"On message \" + i, receivedMessage instanceof StreamMessage);\n        StreamMessage receivedStreamMessage = (StreamMessage) receivedMessage;\n        int numElements = 0;\n        try {\n            while (true) {\n                receivedStreamMessage.readBoolean();\n                numElements++;\n            }\n        } catch (Exception ex) {\n        }", "    final INetStreamEventHandler netStreamEventHandler = new INetStreamEventHandler() {\n\n        @Override\n        public void onStreamEvent(Notify notify) {\n            log.info(\"ClientStream.dispachEvent() {}\", notify);\n        }\n    };\n    client.setStreamEventHandler(netStreamEventHandler);\n    IPendingServiceCallback connectCallback = new IPendingServiceCallback() {\n\n        @Override\n        public void resultReceived(IPendingServiceCall call) {\n            log.info(\"connectCallback\");\n            ObjectMap<?, ?> map = (ObjectMap<?, ?>) call.getResult();\n            String code = (String) map.get(\"code\");", "@Override\npublic void setFeatureState(FeatureState featureState) {\n    if (customLogMessage != null) {", "@Test(timeout = 120 * 1000)\npublic void testMissingLogsCausesBrokerToFail() throws Exception {\n    fillUpSomeLogFiles();\n    int jobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();", "@Override\npublic Appendable targetASCII(String name, long id) {", "private void reportPercent(int percent) {\n    if (percent % STRIDE == 0) {", "/**\n * \u63a5\u6536\u5230\u533a\u5757\u6d88\u606f\uff0c\u8fdb\u884c\u533a\u5757\u5408\u6cd5\u6027\u9a8c\u8bc1\uff0c\u5982\u679c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u5219\u6536\u5f55\uff0c\u7136\u540e\u8f6c\u53d1\u533a\u5757\n */\n@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    if (log.isDebugEnabled()) {", "@Override\npublic void handleSimple(ServerRequest<GeneratedMessageV3> serverRequest) {\n    final GeneratedMessageV3 data = serverRequest.getData();\n    if (data instanceof PSpanChunk) {\n        handleSpanChunk((PSpanChunk) data);\n    } else {", "@Override\npublic CompletableFuture<BenchmarkConsumer> createConsumer(String topic, String subscriptionName, ConsumerCallback consumerCallback) {\n    return CompletableFuture.supplyAsync(() -> {\n        try {\n            DistributedLogManager dlm = namespace.openLog(topic);", "private void registerElasticSearchEnvironment(ElasticsearchContainer elasticSearch, ConfigurableEnvironment environment, ElasticSearchProperties properties) {\n    Integer httpPort = elasticSearch.getMappedPort(properties.getHttpPort());\n    Integer transportPort = elasticSearch.getMappedPort(properties.getTransportPort());\n    String host = elasticSearch.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.elasticsearch.clusterName\", properties.getClusterName());\n    map.put(\"embedded.elasticsearch.host\", host);\n    map.put(\"embedded.elasticsearch.httpPort\", httpPort);\n    map.put(\"embedded.elasticsearch.transportPort\", transportPort);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"elasticsearch\")\nToxiproxyContainer.ContainerProxy elasticsearchContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_ELASTIC_SEARCH) ElasticsearchContainer elasticSearch, ElasticSearchProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(elasticSearch, properties.getHttpPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.elasticsearch.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.elasticsearch.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.elasticsearch.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedElasticSearchToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Override\npublic void warn(String msg, Throwable thrown) {", "@Override\npublic void doStop() {\n    try {\n        openEjbSystem.removeApplication(appInfo, classLoader);\n    } catch (NoSuchApplicationException e) {\n        log.error(\"Module does not exist.\", e);\n    } catch (UndeployException e) {\n        List<Throwable> causes = e.getCauses();\n        log.error(e.getMessage() + \": Encountered \" + causes.size() + \" failures.\");\n        for (Throwable throwable : causes) {", "public boolean isValidSessionId(String userName, String sessionId) {\n    if (sessionId == null) {\n        log.error(\"In two step authentication workflow session_id is mandatory\");\n        return false;\n    }\n    SessionId ldapSessionId = sessionIdService.getSessionId(sessionId);\n    if (ldapSessionId == null) {", "            try {\n                peer.sendMessage(message);\n                successCount++;\n            } catch (NotYetConnectedException | IOException e) {\n                log.warn(\"\u5e7f\u64ad\u6d88\u606f\u51fa\u9519\uff0c\u53ef\u80fd\u539f\u56e0\u662f\u8be5\u8282\u70b9\u8fde\u63a5\u5df2\u5173\u95ed, {}\", e.getMessage());\n            }\n            if (successCount == count) {\n                return successCount;\n            }\n        }\n        return successCount;\n    } else {\n        log.warn(\"\u5e7f\u64ad\u6d88\u606f\u5931\u8d25\uff0c\u6ca1\u6709\u53ef\u5e7f\u64ad\u7684\u8282\u70b9\");\n    }\n    if (log.isDebugEnabled()) {", "        writer.writeNamespace(\"wsa\", WS_ADDRESSING_NS);\n        writer.writeNamespace(\"auth\", WS_FEDERATION_NS);\n        writer.writeNamespace(\"xsi\", SCHEMA_INSTANCE_NS);\n        if (\"http://docs.oasis-open.org/wsfed/federation/200706\".equals(serviceConfig.getProtocol())) {\n            writeFederationMetadata(writer, serviceConfig, serviceURL);\n        } else if (\"urn:oasis:names:tc:SAML:2.0:profiles:SSO:browser\".equals(serviceConfig.getProtocol())) {\n            writeSAMLMetadata(writer, serviceConfig, serviceURL, crypto);\n        }\n        // EntityDescriptor\n        writer.writeEndElement();\n        writer.writeEndDocument();\n        writer.close();\n        if (LOG.isDebugEnabled()) {\n            String out = DOM2Writer.nodeToString(writer.getDocument());\n            LOG.debug(\"***************** unsigned ****************\");", "/**\n * Inform when connection with server is lost.\n *\n * @param throwable Connection lost cause\n */\n@Override\npublic void connectionLost(Throwable throwable) {", "@Test\npublic void testMakeTransaction() throws Exception {\n    //\t\tProduct product = createProduct();\n    //\u6211\u7684\u8d26\u6237\n    Account account = accountKit.getDefaultAccount();\n    account.decryptionTr(\"inchain123\");\n    long nonce = RandomUtil.randomLong();\n    long password = RandomUtil.randomLong();\n    Sha256Hash productTx = Sha256Hash.wrap(\"6cb7f57548c98e9c29a698b2cb219c53850b429c448da6999868a0cfc89e2558\");\n    GeneralAntifakeTransaction tx = new GeneralAntifakeTransaction(network, productTx, nonce, password);\n    tx.makeSign(account);\n    //\u4e0d\u80fd\u5e7f\u64ad\n    //\t\ttx.verfify();\n    //\t\ttx.verfifyScript();", "private void registerDynamodbEnvironment(GenericContainer<?> container, ConfigurableEnvironment environment, DynamoDBProperties properties) {\n    Integer mappedPort = container.getMappedPort(properties.port);\n    String host = container.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.dynamodb.port\", mappedPort);\n    map.put(\"embedded.dynamodb.host\", host);\n    map.put(\"embedded.dynamodb.accessKey\", properties.getAccessKey());\n    map.put(\"embedded.dynamodb.secretKey\", properties.getSecretKey());", "private boolean isActuallyWritable(Path p) {\n    Path tmpFile = p.resolve(TEMP_FILE_FORMAT);\n    try (var chan = Files.newByteChannel(tmpFile, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE, StandardOpenOption.DELETE_ON_CLOSE)) {\n        return true;\n    } catch (IOException e) {\n        return false;\n    } finally {\n        try {\n            Files.deleteIfExists(tmpFile);\n        } catch (IOException e) {", "public void logConnectionProviderStatistic(PersistenceEntryManager ldapEntryManager, String connectionProviderName, String bindConnectionProviderName) {\n    PersistenceOperationService persistenceOperationService = ldapEntryManager.getOperationService();\n    if (!(persistenceOperationService instanceof LdapOperationService)) {\n        return;\n    }\n    LdapConnectionProvider ldapConnectionProvider = ((LdapOperationService) persistenceOperationService).getConnectionProvider();\n    LdapConnectionProvider bindLdapConnectionProvider = ((LdapOperationService) persistenceOperationService).getBindConnectionProvider();\n    if (ldapConnectionProvider == null) {", "private ClassPathBeanDefinitionScanner scan() {\n    BeanDefinitionRegistry beanDefinitionRegistry = new SimpleBeanDefinitionRegistry();\n    ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(beanDefinitionRegistry);\n    scanner.setIncludeAnnotationConfig(false);\n    scanner.addIncludeFilter(new AnnotationTypeFilter(BusAware.class));\n    BeanNameGenerator beanNameGenerator = new FullyQualifiedAnnotationBeanNameGenerator();\n    scanner.setBeanNameGenerator(beanNameGenerator);\n    int numberOfBeans = scanner.scan(packageName);", "private boolean hasRuleMatchFor(InputComponent component, FilterableIssue issue) {\n    for (WildcardPattern pattern : rulePatternByComponent.getOrDefault(component, Collections.emptyList())) {\n        if (pattern.match(issue.ruleKey().toString())) {", "public String mapSignInRequest(RequestContext requestContext, String trustedIdpRealm) {", "public boolean isAllowedBySpontaneousScope(String spontaneousScope, String scopeRequested) {\n    try {\n        boolean result = spontaneousScope.equals(scopeRequested);\n        if (!result) {\n            result = Pattern.matches(spontaneousScope, scopeRequested);\n        }\n        if (result) {", "private static void handleException(String msg, Exception e) {", "private void handleSpan(PSpan span) {\n    if (isDebug) {", "private boolean executeExternalNotifyEndUser(CustomScriptConfiguration customScriptConfiguration, ExternalCibaEndUserNotificationContext context) {\n    try {", "private void addCustomConfigurationProviderProperties(ManagerParameter parameter) {\n    final String providersStrList = System.getProperty(ConfigurationProvider.CONFIG_PROVIDERS_PROPERTY);\n    if (providersStrList != null) {\n        final String[] providersClassNames = providersStrList.split(\",\");\n        for (String providerClassName : providersClassNames) {\n            if (providerClassName == null || \"\".equals(providerClassName))\n                continue;\n            try {\n                final Class<?> providerClass = Class.forName(providerClassName.trim(), true, classLoadingUtil.getClassloader());\n                final ConfigurationProvider configurationProvider = ConfigurationProvider.class.cast(providerClass.getDeclaredConstructor().newInstance());\n                parameter.mergeProperties(configurationProvider.getProperties());\n            } catch (Exception e) {", "/**\n * {@inheritDoc}\n */\n@SuppressWarnings(\"rawtypes\")\npublic void onClientListenerEvent(IRTMPEvent event) {", "@Override\npublic Tokenizer create() {\n    Settings settings = indexSettings.getSettings().getAsSettings(\"index.analysis.tokenizer.\" + name());\n    Map<String, String> args = settings.keySet().stream().collect(Collectors.toMap(k -> k, settings::get));\n    if (args.isEmpty()) {\n        args.putAll(AnsjElasticConfigurator.getDefaults());\n        args.put(\"type\", name());\n    }", "@GET\n@Produces({ \"application/json\" })\npublic Response startAuthentication(@QueryParam(\"username\") String userName, @QueryParam(\"keyhandle\") String keyHandle, @QueryParam(\"application\") String appId, @QueryParam(\"session_id\") String sessionId) {\n    // Parameter username is deprecated. We uses it only to determine is it's one or two step workflow\n    try {\n        if (appConfiguration.getDisableU2fEndpoint()) {\n            return Response.status(Status.FORBIDDEN).build();\n        }", "@Override\npublic Future<JsonObject> getQueueRequest(String queue) {\n    Promise<JsonObject> promise = Promise.promise();\n    if (StringUtils.isEmpty(queue)) {\n        promise.fail(\"Queue is not allowed to be empty\");\n        return promise.future();\n    }\n    redisAPI.hget(QUEUE_REQUESTS, queue, reply -> {\n        if (reply.failed()) {\n            String message = \"get queue request '\" + queue + \"' from hash '\" + QUEUE_REQUESTS + \"' resulted in cause \" + logCause(reply);", "@GET\n@Produces({ \"application/json\" })\npublic Response getConfiguration() {\n    try {\n        final GluuConfiguration conf = new GluuConfiguration();\n        conf.setIdGenerationEndpoint(appConfiguration.getIdGenerationEndpoint());\n        conf.setIntrospectionEndpoint(appConfiguration.getIntrospectionEndpoint());\n        conf.setAuthLevelMapping(createAuthLevelMapping());\n        conf.setScopeToClaimsMapping(createScopeToClaimsMapping());\n        // convert manually to avoid possible conflicts between resteasy\n        // providers, e.g. jettison, jackson\n        final String entity = ServerUtil.asPrettyJson(conf);", "private List<RuleFeatures> collectRuleFeatures(List<Rule> rules) {\n    List<RuleFeatures> featuresList = new ArrayList<>();\n    for (Rule rule : rules) {\n        boolean isStorageExpand = rule.isStorageExpand();\n        boolean isExpandOnBackend = rule.isExpandOnBackend();\n        boolean isDeltaOnBackend = rule.isDeltaOnBackend();\n        try {\n            Pattern pattern = Pattern.compile(rule.getUrlPattern());\n            featuresList.add(new RuleFeatures(pattern, ImmutableMap.of(RuleFeatures.Feature.STORAGE_EXPAND, isStorageExpand, RuleFeatures.Feature.EXPAND_ON_BACKEND, isExpandOnBackend, RuleFeatures.Feature.DELTA_ON_BACKEND, isDeltaOnBackend)));", "                    uriPatternSessionKey = pv.asStringValue();\n                }\n            }\n        } catch (ParameterException e) {\n            throw new PipeRunException(this, \"exception extracting parameters\", e);\n        }\n    }\n    //hash over data genereren, uit cache lezen en teruggeven, in cache updaten, verwijderen uit cache, cache naar disk wegschrijven, cache legen\n    String cacheKey = null;\n    if (uriPatternSessionKey != null && !uriPatternSessionKey.isEmpty())\n        cacheKey = getRestPath() + \"_\" + uriPatternSessionKey.toLowerCase();\n    else\n        cacheKey = getRestPath() + \"_\" + getUriPattern();\n    if (cache != null && cache.containsKey(cacheKey)) {\n        Object returnCode = false;", "        producer.send(session.createTextMessage(\"Message 1\"));\n        // committing the session prior to the close\n        session.commit();\n        // starting a new transaction\n        producer.send(session.createTextMessage(\"Message 2\"));\n        // in a new transaction, with prefetch>0, the message\n        // 1 will be pending till second commit\n        LOG.info(\"Closing consumer 1...\");\n        consumer.close();\n        // create a consumer\n        consumer = session.createConsumer(test_data_destination);\n        LOG.info(\"Consumer 2 connected\");\n        // retrieve message previously committed to tmp queue\n        Message message = consumer.receive(10000);\n        if (message != null) {", "@Override\npublic void onStart(NetworkBridge bridge) {\n    if (!brokerService.isUseJmx()) {\n        return;\n    }\n    NetworkBridgeView view = new NetworkBridgeView(bridge);\n    view.setCreateByDuplex(createdByDuplex);\n    try {\n        ObjectName objectName = createNetworkBridgeObjectName(bridge);\n        AnnotatedMBean.registerMBean(brokerService.getManagementContext(), view, objectName);\n        bridge.setMbeanObjectName(objectName);\n        MBeanBridgeDestination mBeanBridgeDestination = new MBeanBridgeDestination(brokerService, networkBridgeConfiguration, bridge, view);\n        destinationObjectNameMap.put(bridge, mBeanBridgeDestination);\n        mBeanBridgeDestination.start();", "@Override\npublic void send(Notification notification) {\n    byte[] json = toJsonAsBytes(notification);\n    if (json != null) {\n        String response = httpPostRequest.send(json);\n        if (Strings.isNotBlank(response)) {", "@Bean(name = BEAN_NAME_EMBEDDED_REDIS, destroyMethod = \"stop\")\npublic GenericContainer<?> redis(ConfigurableEnvironment environment, @Qualifier(REDIS_WAIT_STRATEGY_BEAN_NAME) WaitStrategy redisStartupCheckStrategy, Optional<Network> network) throws Exception {\n    // CLUSTER SLOTS command returns IP:port for each node, so ports outside and inside\n    // container must be the same\n    GenericContainer<?> redis = new FixedHostPortGenericContainer(ContainerUtils.getDockerImageName(properties).asCanonicalNameString()).withFixedExposedPort(properties.getPort(), properties.getPort()).withExposedPorts(properties.getPort()).withEnv(\"REDIS_USER\", properties.getUser()).withEnv(\"REDIS_PASSWORD\", properties.getPassword()).withCopyFileToContainer(MountableFile.forHostPath(prepareRedisConf()), \"/data/redis.conf\").withCopyFileToContainer(MountableFile.forHostPath(prepareNodesConf()), \"/data/nodes.conf\").withCommand(\"redis-server\", \"/data/redis.conf\").waitingFor(redisStartupCheckStrategy);\n    network.ifPresent(redis::withNetwork);\n    redis = configureCommonsAndStart(redis, properties, log);\n    Map<String, Object> redisEnv = registerRedisEnvironment(environment, redis, properties, properties.getPort());", "/**\n * Returns true if the url represents a local server (that is port is explicitly set to 0)\n */\npublic static boolean isLocal(String url) {\n    boolean isLocal = false;\n    try {\n        URL urlValue = new URL(url);\n        isLocal = urlValue.getPort() == 0;\n        if (isLocal) {", " *\n * @param port Port number\n * @return True if port mapping is successful.\n */\npublic static boolean mapTcpPort(int port) {\n    try {\n        // Discover gateway\n        GatewayDiscover discover = new GatewayDiscover();\n        discover.discover();\n        GatewayDevice device = discover.getValidGateway();\n        if (device != null) {\n            // Gateway found\n            PortMappingEntry portMapping = new PortMappingEntry();\n            if (device.getSpecificPortMappingEntry(port, \"TCP\", portMapping)) {\n                // Mapping already registered", "@Override\npublic void dispatchEvent(IEvent event) {", "@Override\npublic void visitFragmentOpen(String name, long id, int cursor) {", "private void logException(HttpServletRequest request, AuthenticationException exception, String username) {\n    String ipAddress = request.getRemoteAddr();\n    if (exception instanceof IpAddressAuthenticationRateException) {\n        if (messageAlreadyLogged != null && messageAlreadyLogged.getIfPresent(ipAddress) != Boolean.TRUE) {\n            messageAlreadyLogged.put(ipAddress, Boolean.TRUE);\n            log.warn(\"Possible brute force attack, authentication attempt rate limit exceeded for IP address \" + ipAddress);\n        }\n    } else if (exception instanceof UsernameAuthenticationRateException) {\n        if (rateLimitUsernameLogged != null && rateLimitUsernameLogged.getIfPresent(username) != Boolean.TRUE) {\n            rateLimitUsernameLogged.put(username, Boolean.TRUE);\n            log.warn(\"Possible brute force attack, authentication attempt rate limit exceeded against username \" + username);\n        }\n    } else if (exception instanceof BadCredentialsException || exception instanceof DisabledException || exception instanceof LockedException) {\n        log.warn(\"Failed login attempt on user '\" + username + \"' from IP \" + ipAddress);\n    } else {", "public WebDriver createRemoteWebDriver(String remoteUrl, Capabilities capabilities) {\n    WebDriver webdriver = null;\n    int waitTimeoutSec = config.getTimeout();\n    long timeoutMs = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(waitTimeoutSec);\n    String browserName = capabilities.getBrowserName();", "/**\n * {@inheritDoc}\n */\n@Override\npublic boolean addData(IoBuffer data, int timestamp, boolean amf) {", "            sysp.setValue(properties.get(i));\n            javaTask.addSysproperty(sysp);\n        }\n        if (verbose) {\n            javaTask.createArg().setValue(\"--verbose\");\n        }\n        javaTask.createArg().setValue(moduleName);\n        if (moduleArguments != null) {\n            for (String m : moduleArguments) {\n                javaTask.createArg().setValue(m);\n            }\n        }\n        javaTask.execute();\n    } catch (ExitStatusException e) {\n        String tmp = \"\";", "@Override\npublic void onException(Message message, Exception exception) {", "private static void handleException(String msg) {", "/*\n     * (non-Javadoc)\n     * @see org.red5.server.adapter.MultiThreadedApplicationAdapter#appConnect(org.red5.server.api.IConnection, java.lang.Object[])\n     */\n@Override\npublic boolean appConnect(IConnection conn, Object[] params) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"cassandra\")\nToxiproxyContainer.ContainerProxy cassandraContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_CASSANDRA) CassandraContainer cassandra, CassandraProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(cassandra, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.cassandra.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.cassandra.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.cassandra.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedCassandraToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"clickhouse\")\nToxiproxyContainer.ContainerProxy clickhouseContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_CLICK_HOUSE) ClickHouseContainer clickHouseContainer, ClickHouseProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(clickHouseContainer, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.clickhouse.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.clickhouse.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.clickhouse.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedClickHouseToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "protected void doCollection(TransportConnection tc) {", "@Override\npublic boolean removeJobScheduler(String name) throws Exception {\n    boolean result = false;\n    this.lock.lock();\n    try {\n        InMemoryJobScheduler scheduler = this.schedulers.remove(name);\n        result = scheduler != null;\n        if (result) {", "@Override\npublic void onException(IOException error) {\n    synchronized (this) {\n        setHasExpired(true);\n        // only log if not stopped\n        if (!stopped.get()) {", "private String getCustomSTSParameterValue() {\n    String authRealmParameter = null;\n    if (getCustomSTSParameter() != null) {\n        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();\n        authRealmParameter = request.getParameter(getCustomSTSParameter());\n        if (authRealmParameter == null) {\n            HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getResponse();\n            SavedRequest savedRequest = requestCache.getRequest(request, response);\n            if (savedRequest != null) {\n                String[] parameterValues = savedRequest.getParameterValues(this.getCustomSTSParameter());\n                if (parameterValues != null && parameterValues.length > 0) {\n                    authRealmParameter = parameterValues[0];\n                }\n            }\n        }", "private AnalyzerConfiguration synchronizeAnalyzerConfig(ServerApi serverApi, String projectKey, ProgressMonitor progressMonitor) {", "@Test(timeout = 120000)\npublic void testGcDoneAtStop() throws Exception {\n    brokerService = createBroker(true);\n    brokerService.start();\n    produceWithScheduledDelayAndConsume();\n    LOG.info(\"job store: \" + jobSchedulerStore);\n    int numSchedulerFiles = jobSchedulerStore.getJournal().getFileMap().size();\n    LOG.info(\"kahadb store: \" + kahaDBPersistenceAdapter);\n    int numKahadbFiles = kahaDBPersistenceAdapter.getStore().getJournal().getFileMap().size();", "public void testAnyElements() throws Exception {\n    File schema1 = new File(BASEDIR, \"src/test/resources/schema/schema5.xsd\");\n    log.debug(\"SCHEMA 5\");\n    Map map = parse(schema1);\n    assertEquals(8, map.size());\n    Map elements = schemaInfoBuilder.getElementToTypeMap();\n    log.debug(\"ELEMENT MAP\");", "@Override\npublic void onWebSocketClose(int statusCode, String reason) {", "@Override\npublic void drop() {\n    indexProxyStrategy.removeStatisticsForIndex();\n    String message = \"FailedIndexProxy#drop index on \" + indexProxyStrategy.getIndexUserDescription() + \" dropped due to:\\n\" + getPopulationFailure().asString();", "public void run() {\n    List<Peer> peers = peerKit.findAvailablePeers();\n    Message sendMessage = converMessage(message, result);\n    //\u901a\u8fc7\u4e00\u534a\u7684\u5bf9\u7b49\u4f53\u5e7f\u64ad\u51fa\u53bb\uff0c\u5982\u679c\u6536\u5230\u4e00\u534a\u4ee5\u4e0a\u7684inv\u6d88\u606f\uff0c\u5219\u4ee3\u8868\u6210\u529f\n    int numConnected = peers.size();\n    int numToBroadcastTo = (int) Math.max(1, Math.round(Math.ceil(peers.size() / 2.0)));\n    int numWaitingFor = (int) Math.max(1, Math.ceil((numConnected - numToBroadcastTo) / 2.0));\n    Collections.shuffle(peers, random);\n    peers = peers.subList(0, numToBroadcastTo);", "@Override\npublic void corruptedCheckpointFile(long version, Throwable t) {", "@Override\nprotected void createModel(Object object) {\n    RateLimit rateLimit = (RateLimit) object;\n    RateLimit updatedRateLimit = rateLimitRepository.incrementAndGet(rateLimit.getKey(), rateLimit.getCounter(), () -> initialize(rateLimit)).blockingGet();\n    RATE_LIMITS.put(updatedRateLimit.getKey(), updatedRateLimit);", "    List<Driver> drivers = new ArrayList<Driver>();\n    try {\n        BufferedReader in = new BufferedReader(new InputStreamReader(providerURL.openStream()));\n        String line;\n        while ((line = in.readLine()) != null) {\n            line = line.trim();\n            try {\n                Class<?> driverClass = bundle.loadClass(line);\n                drivers.add((Driver) driverClass.newInstance());\n            } catch (Exception e) {\n                LOG.warn(\"Failed to load driver {}\", line, e);\n            }\n        }\n    } catch (IOException e) {\n        // ignore - shouldn't happen", "@POST\n@Produces({ \"application/json\" })\npublic Response finishAuthentication(@FormParam(\"username\") String userName, @FormParam(\"tokenResponse\") String authenticateResponseString) {\n    String sessionId = null;\n    try {\n        if (appConfiguration.getDisableU2fEndpoint()) {\n            return Response.status(Status.FORBIDDEN).build();\n        }", "@Override\npublic void commitsAfterLastCheckPoint(LogPosition logPosition, long firstTxIdAfterLastCheckPoint) {", "@Test\nvoid test() {\n    String sutUrl = \"https://bonigarcia.dev/selenium-webdriver-java/\";\n    driver.get(sutUrl);\n    String title = driver.getTitle();", "private void readPath(Path path, Consumer<String> consumer) throws IOException {\n    Objects.requireNonNull(path);\n    Objects.requireNonNull(consumer);\n    if (!osSupport) {\n        return;\n    }", "public DataHandler getReportBytes(ReportConfigurationBean configuration) throws Exception {\n    try {\n        return reportingAdminServiceStub.getReportBytes(configuration);\n    } catch (Exception e) {\n        String msg = \"Unable get Report in bytes\";", "@Override\npublic void contextInitialized(ServletContextEvent sce) {\n    ServletContext ctx = sce.getServletContext();\n    DefaultWsServerContainer sc = (DefaultWsServerContainer) WebSocketPlugin.getWsServerContainerInstance(ctx);", "public void validateConfigurationResource(Buffer configurationResource, String resourceSchema, Handler<AsyncResult<ValidationResult>> resultHandler) {\n    vertx.executeBlocking(future -> {\n        if (!JsonUtil.isValidJson(configurationResource)) {\n            String message = \"Unable to parse json\";", "@Test\npublic void testFLVReaderFile() {\n    log.info(\"\\n testFLVReaderFile\");\n    String[] paths = new String[] { \"target/test-classes/fixtures/h264_aac.flv\", \"target/test-classes/fixtures/h264_mp3.flv\", \"target/test-classes/fixtures/h264_speex.flv\", \"target/test-classes/fixtures/stray.flv\", \"target/test-classes/fixtures/NAPNAP.flv\", \"target/test-classes/fixtures/dummy.flv\" };\n    try {\n        for (String path : paths) {\n            File file = Paths.get(path).toFile();\n            if (file.exists() && file.canRead()) {\n                log.info(\"Reading: {}\", file.getName());\n                FLVReader reader = new FLVReader(file, true);\n                //KeyFrameMeta meta = reader.analyzeKeyFrames();\n                //log.debug(\"Meta: {}\", meta);\n                ITag tag = null;\n                for (int t = 0; t < 6; t++) {\n                    tag = reader.readTag();", "public Future<Void> storeQueueRequest(String queue, JsonObject queueRequest) {\n    Promise<Void> promise = Promise.promise();\n    if (StringUtils.isEmpty(queue)) {\n        promise.fail(\"Queue is not allowed to be empty\");\n        return promise.future();\n    }\n    if (queueRequest == null) {\n        promise.fail(\"Request is not allowed to be empty\");\n        return promise.future();\n    }\n    try {\n        String queueRequestStr = queueRequest.encode();\n        redisAPI.hset(Arrays.asList(QUEUE_REQUESTS, queue, queueRequestStr), reply -> {\n            if (reply.failed()) {\n                String message = \"Failed to store request for queue '\" + queue + \"'. Cause: \" + logCause(reply);", "public static String getSynapseConfigAbsPath(ServerContextInformation contextInformation) {\n    String carbonHome = MicroIntegratorBaseUtils.getCarbonHome();\n    ServerConfigurationInformation configInfo = getSynapseServerConfigInfo(contextInformation);\n    if (configInfo == null) {\n        String msg = \"Unable to obtain ESB server configuration information\";", "@Test\npublic void test() throws Exception {\n    stompConnect();\n    String connectFrame = \"STOMP\\n\" + \"login:system\\n\" + \"passcode:manager\\n\" + \"accept-version:1.1\\n\" + \"heart-beat:1000,0\\n\" + \"host:localhost\\n\" + \"\\n\" + Stomp.NULL;\n    stompConnection.sendFrame(connectFrame);\n    String response = stompConnection.receiveFrame().trim();", " */\n// *** THE MAGIC IS HERE ***\n@Idempotent\n@Logging(logEvent = true)\npublic APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"Content-Type\", \"application/json\");\n    headers.put(\"Access-Control-Allow-Origin\", \"*\");\n    headers.put(\"Access-Control-Allow-Methods\", \"GET, OPTIONS\");\n    headers.put(\"Access-Control-Allow-Headers\", \"*\");\n    APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent().withHeaders(headers);\n    try {\n        String address = JsonConfig.get().getObjectMapper().readTree(input.getBody()).get(\"address\").asText();\n        final String pageContents = this.getPageContents(address);\n        String output = String.format(\"{ \\\"message\\\": \\\"hello world\\\", \\\"location\\\": \\\"%s\\\" }\", pageContents);", "                    sysp.setValue(properties.get(i));\n                    javaTask.addSysproperty(sysp);\n                }\n                if (verbose) {\n                    javaTask.createArg().setValue(\"--verbose\");\n                }\n                javaTask.createArg().setValue(moduleName);\n                if (moduleArguments != null) {\n                    for (String m : moduleArguments) {\n                        javaTask.createArg().setValue(m);\n                    }\n                }\n                javaTask.execute();\n            } catch (ExitStatusException e) {\n                String tmp = \"\";", "/**\n * Returns a {@link QueueingStrategy} based on the provided hookConfiguration. When <code>null</code> is provided\n * or the hookConfiguration contains invalid configuration relating the 'queueingStrategy', a {@link DefaultQueueingStrategy}\n * instance will be returned.\n *\n * @param hookConfiguration the hook configuration containing the 'queueingStrategy' configuration values\n * @return A {@link QueueingStrategy} based on the provided hookConfiguration\n */\npublic static QueueingStrategy buildQueueStrategy(JsonObject hookConfiguration) {\n    QueueingStrategy queueingStrategy = new DefaultQueueingStrategy();\n    if (hookConfiguration == null || !hookConfiguration.containsKey(QUEUEING_STRATEGY_PROPERTY)) {\n        return queueingStrategy;\n    }\n    Object queueingStrategyConfigObj = hookConfiguration.getValue(QUEUEING_STRATEGY_PROPERTY);\n    if (!(queueingStrategyConfigObj instanceof JsonObject)) {", "/**\n * Logs the error message and throws New AxisFault.\n *\n * @param errorMsg String message which contains error information\n * @throws AxisFault throws with error information\n */\nprotected void handleException(String errorMsg) throws AxisFault {", "@Override\npublic Optional<TaintVulnerabilityRaisedEvent> parse(String jsonData) {\n    var payload = gson.fromJson(jsonData, TaintVulnerabilityRaisedEventPayload.class);\n    if (payload.isInvalid()) {", "@Test\npublic void testManyTempDestinations() throws Exception {\n    Connection connection = createConnectionFactory().createConnection();\n    connection.start();\n    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n    for (int i = 0; i < DEST_COUNT; i++) {\n        destination[i] = session.createTemporaryQueue();", "    int nextChar = code.peek();\n    while (nextChar != -1) {\n        boolean characterConsumed = false;\n        for (Channel<O> channel : channels) {\n            if (channel.consume(code, output)) {\n                characterConsumed = true;\n                break;\n            }\n        }\n        if (!characterConsumed) {\n            if (failIfNoChannelToConsumeOneCharacter) {\n                String message = \"None of the channel has been able to handle character '\" + (char) code.peek() + \"' (decimal value \" + code.peek() + \") at line \" + code.getLinePosition() + \", column \" + code.getColumnPosition();\n                if (failIfNoChannelToConsumeOneCharacter) {\n                    throw new IllegalStateException(message);\n                }", "/**\n * @see org.jivesoftware.openfire.vcard.DefaultVCardProvider#loadVCard(java.lang.String)\n */\n@Override\npublic Element loadVCard(String username) {", "public boolean isValidSigninAddress(RequestContext context, String endpointAddress, String realm) throws Exception {\n    if (endpointAddress == null) {\n        return true;\n    }\n    Idp idpConfig = (Idp) WebUtils.getAttributeFromFlowScope(context, \"idpConfig\");\n    Application serviceConfig = idpConfig.findApplication(realm);\n    if (serviceConfig == null) {", "@Override\npublic Response toResponse(Exception exception) {", "@Override\npublic void failToExtractInitialFileHeader(Exception e) {", " * This implementation uses DNS SRV records to find a list of remote hosts for the XMPP domain (as implemented by\n * {@link DNSUtil#resolveXMPPDomain(String, int)}. It then iteratively tries to create a socket connection to each\n * of them, until one socket connection succeeds.\n *\n * Either the connected Socket instance is returned, or null if no connection could be established.\n *\n * Note that this method blocks while performing network IO. The timeout as defined by\n * {@link RemoteServerManager#getSocketTimeout()} is observed.\n *\n * @param xmppDomain The XMPP domain to connect to.\n * @param port The port to connect to when DNS resolution fails.\n * @return a Socket instance that is connected, or null.\n * @see DNSUtil#resolveXMPPDomain(String, int)\n */\npublic static Map.Entry<Socket, Boolean> createSocketToXmppDomain(String xmppDomain, int port) {", "@Override\npublic ReadOnlyDatabases.Lookup lookupReadOnlyDatabases() {\n    var previous = previousLookup;\n    var next = previous;\n    try {\n        next = systemDatabase().map(this::lookupReadOnlyDatabases).map(dbs -> new SystemGraphLookup(dbs, false)).orElse(previous);\n    } catch (Exception e) {", "private void registerPubsubEnvironment(GenericContainer<?> container, ConfigurableEnvironment environment, PubsubProperties properties) {\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.google.pubsub.port\", container.getMappedPort(properties.getPort()));\n    map.put(\"embedded.google.pubsub.host\", container.getHost());\n    map.put(\"embedded.google.pubsub.project-id\", properties.getProjectId());", "@Override\npublic void removeListener(String listenerId) {", "@CheckForNull\npublic Language language(InputFile inputFile) {\n    Language detectedLanguage = null;\n    for (Entry<Language, String[]> languagePatterns : extensionsByLanguage.entrySet()) {\n        if (isCandidateForLanguage(inputFile, languagePatterns.getValue())) {\n            if (detectedLanguage == null) {\n                detectedLanguage = languagePatterns.getKey();\n            } else {\n                // Language was already forced by another pattern\n                throw MessageException.of(MessageFormat.format(\"Language of file ''{0}'' can not be decided as the file extension matches both {1} and {2}\", inputFile.uri(), getDetails(detectedLanguage), getDetails(languagePatterns.getKey())));\n            }\n        }\n    }\n    if (detectedLanguage != null) {", "@Override\npublic void visitUTF8(String name, long id, CharSequence target) {\n    boolean found = StageTester.hasBadChar(target);\n    if (found) {", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"google.pubsub\")\nToxiproxyContainer.ContainerProxy googlePubSubContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_GOOGLE_PUBSUB) GenericContainer<?> pubsub, PubsubProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(pubsub, properties.getPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.google.pubsub.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.google.pubsub.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.google.pubsub.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedGooglePubSubToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "private void checkArm(WebDriverManager wdm) {\n    wdm.avoidBrowserDetection().mac().arch64().setup();\n    String driverPath = wdm.getDownloadedDriverPath();", "// doc comment inherited from LogWriter\npublic void logReceivedCommand(Logger log, Object command) {", "private void registerEnvironment(GenericContainer<?> container, ConfigurableEnvironment environment, MinioProperties properties) {\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.minio.host\", container.getHost());\n    map.put(\"embedded.minio.port\", container.getMappedPort(properties.port));\n    map.put(\"embedded.minio.consolePort\", container.getMappedPort(properties.consolePort));\n    map.put(\"embedded.minio.accessKey\", properties.accessKey);\n    map.put(\"embedded.minio.secretKey\", properties.secretKey);\n    map.put(\"embedded.minio.region\", properties.region);", "private StandaloneDatabaseContext createDatabase(NamedDatabaseId namedDatabaseId) {", "public synchronized boolean start() {\n    // We only need to start if there are patterns and we don't already have a proxy\n    if (targetName == null) {\n        return true;\n    }\n    // assure the gbean is running\n    AbstractName abstractName = getGBeanInstance().getAbstractName();\n    if (!isRunning(getKernel(), targetName)) {", "    // Get CSV from Yahoo\n    log.info(\"Sending request: \" + url);\n    URL request = new URL(url);\n    RedirectableRequest redirectableRequest = new RedirectableRequest(request, 5);\n    redirectableRequest.setConnectTimeout(YahooFinance.CONNECTION_TIMEOUT);\n    redirectableRequest.setReadTimeout(YahooFinance.CONNECTION_TIMEOUT);\n    Map<String, String> requestProperties = new HashMap<String, String>();\n    requestProperties.put(\"Cookie\", CrumbManager.getCookie());\n    URLConnection connection = redirectableRequest.openConnection(requestProperties);\n    InputStreamReader is = new InputStreamReader(connection.getInputStream());\n    BufferedReader br = new BufferedReader(is);\n    // skip the first line\n    br.readLine();\n    // Parse CSV\n    for (String line = br.readLine(); line != null; line = br.readLine()) {", "public Optional<ServerApi> getServerApi(String connectionId) {\n    var params = connectionRepository.getEndpointParams(connectionId);\n    if (params.isEmpty()) {", "private void enableCasForSubPaths(List<String> subPaths, VaultContainer vault) {\n    for (String subPath : subPaths) {\n        if (!subPath.isEmpty()) {", "public Subscription createSubscription(String topicName, String subscriptionName, DeadLetter deadLetter) {\n    ProjectTopicName topic = ProjectTopicName.of(projectId, topicName);\n    ProjectSubscriptionName subscription = ProjectSubscriptionName.of(projectId, subscriptionName);\n    try {", "/**\n * Return hostname for URL.\n *\n * @param url\n *            URL\n * @return Hostname from that URL\n */\n@Override\nprotected String getHostname(String url) {", "public void onError(Throwable throwable) {", "static void assertNotMigrated(Path path, FileSystemAbstraction fileSystem, InternalLog log) {\n    Path migratedFile = getMigratedFile(path);\n    if (fileSystem.fileExists(migratedFile)) {\n        String message = \"The repository file '\" + path.toAbsolutePath() + \"' has been marked as migrated. \" + \"If you are sure that you want use this repository you need to manually rename the file '\" + migratedFile.toAbsolutePath() + \"' to '\" + path.getFileName() + \"'\";", "@Override\npublic List<String> groupsFromRoles(List<String> roles) {\n    if (template == null || roles == null) {\n        return roles;\n    } else {\n        List<String> renamedRoles = new ArrayList<>();\n        for (String role : roles) {\n            String renamedRole = template.replace(ROLE_MAPPING_PLACEHOLDER, role);\n            renamedRoles.add(renamedRole);", "public void createTopics(Collection<String> topics, Collection<TopicConfiguration> topicsConfiguration) {\n    Map<String, TopicConfiguration> defaultTopicToTopicConfigurationMap = topics.stream().collect(toMap(topic -> topic, topic -> new TopicConfiguration(topic, DEFAULT_PARTITION_COUNT)));\n    Map<String, TopicConfiguration> topicToTopicConfigurationMap = topicsConfiguration.stream().collect(toMap(TopicConfiguration::getTopic, topicConfiguration -> topicConfiguration));\n    defaultTopicToTopicConfigurationMap.putAll(topicToTopicConfigurationMap);\n    Collection<TopicConfiguration> topicsConfigurationToCreate = defaultTopicToTopicConfigurationMap.values();\n    if (!topicsConfigurationToCreate.isEmpty()) {", " *            Output buffer\n * @param in\n *            Input buffer\n * @param numBytesMax\n *            Number of bytes max\n * @return int Number of bytes written\n */\npublic final static int put(IoBuffer out, IoBuffer in, int numBytesMax) {\n    if (log.isTraceEnabled()) {\n        log.trace(\"Put\\nin buffer: {}\\nout buffer: {}\\nmax bytes: {}\", new Object[] { out, in, numBytesMax });\n    }\n    int numBytesRead = 0;\n    if (in != null) {\n        int limit = Math.min(in.limit(), numBytesMax);\n        byte[] inBuf = new byte[limit];", "private void traceOrDebug(boolean traceOn, String msg) {\n    if (traceOn) {\n        trace.info(msg);\n    }\n    if (log.isDebugEnabled()) {", "private void save(Settings settings, Path settingsPath) {\n    assert settings != null : \"method should only be invoked by #scheduleSave, which checks for null\";", "private void registerVaultEnvironment(VaultContainer vault, ConfigurableEnvironment environment, VaultProperties properties) {\n    Integer mappedPort = vault.getMappedPort(properties.getPort());\n    String host = vault.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.vault.host\", host);\n    map.put(\"embedded.vault.port\", mappedPort);\n    map.put(\"embedded.vault.token\", properties.getToken());", "private void sendWithReplyToTemp(ConnectionFactory cf, String serviceQueue) throws JMSException, InterruptedException {\n    Connection con = cf.createConnection();\n    con.start();\n    Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\n    TemporaryQueue tempQueue = session.createTemporaryQueue();\n    TextMessage msg = session.createTextMessage(\"Request\");\n    msg.setJMSReplyTo(tempQueue);\n    MessageProducer producer = session.createProducer(session.createQueue(serviceQueue));\n    producer.send(msg);\n    // This sleep also seems to matter\n    Thread.sleep(3000);\n    MessageConsumer consumer = session.createConsumer(tempQueue);\n    Message replyMsg = consumer.receive();", "private void registerPostgresqlEnvironment(PostgreSQLContainer postgresql, ConfigurableEnvironment environment, PostgreSQLProperties properties) {\n    Integer mappedPort = postgresql.getMappedPort(PostgreSQLContainer.POSTGRESQL_PORT);\n    String host = postgresql.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.postgresql.port\", mappedPort);\n    map.put(\"embedded.postgresql.host\", host);\n    map.put(\"embedded.postgresql.schema\", properties.getDatabase());\n    map.put(\"embedded.postgresql.user\", properties.getUser());\n    map.put(\"embedded.postgresql.password\", properties.getPassword());\n    String jdbcURL = \"jdbc:postgresql://{}:{}/{}\";", "@BeforeSuite\npublic void setupEnv() throws IOException {\n    Process process;\n    String line;\n    String[] setup = { \"sh\", \"..\" + File.separator + \"src\" + File.separator + \"test\" + File.separator + \"java\" + File.separator + \"EnvSetup.sh\" };\n    process = Runtime.getRuntime().exec(setup);\n    try (BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n        while ((line = bufferedreader.readLine()) != null) {", "private boolean validateSigninEndpointAddress(Application serviceConfig, String endpointAddress) {\n    if (serviceConfig.getPassiveRequestorEndpoint() == null && serviceConfig.getCompiledPassiveRequestorEndpointConstraint() == null) {\n        LOG.error(\"Either the 'passiveRequestorEndpoint' or the 'passiveRequestorEndpointConstraint' \" + \"configuration values must be specified for the application\");\n    } else if (serviceConfig.getPassiveRequestorEndpoint() != null && serviceConfig.getPassiveRequestorEndpoint().equals(endpointAddress)) {", "    long startTime = Long.parseLong(System.getProperty(START_TIME));\n    double startupTime = (System.currentTimeMillis() - startTime) / 1000.0;\n    try {\n        if (log.isDebugEnabled()) {\n            log.debug(\"Server           :  \" + dataHolder.getCarbonServerConfigurationService().getFirstProperty(\"Name\") + \"-\" + dataHolder.getCarbonServerConfigurationService().getFirstProperty(\"Version\"));\n        }\n    } catch (Exception e) {\n        log.debug(\"Error while retrieving server configuration\", e);\n    }\n    try {\n        ServerStatus.setServerRunning();\n    } catch (AxisFault e) {\n        String msg = \"Cannot set server to running mode\";\n        log.error(msg, e);\n    }", "    JsonObject delegateObject = new JsonObject(configString);\n    // methods of the delegate\n    Set<HttpMethod> methods = new HashSet<>();\n    delegateObject.getJsonArray(METHODS).forEach(method -> methods.add(HttpMethod.valueOf((String) method)));\n    // pattern of the delegate\n    Pattern pattern;\n    try {\n        pattern = Pattern.compile(delegateObject.getString(PATTERN));\n    } catch (Exception e) {\n        throw new ValidationException(\"Could not parse pattern [\" + delegateObject.getString(PATTERN) + \"] of delegate \" + delegateName, e);\n    }\n    // requests of the delegate\n    List<DelegateRequest> requests = new ArrayList<>();\n    for (int i = 0; i < delegateObject.getJsonArray(REQUESTS).size(); i++) {\n        if (LOG.isTraceEnabled()) {", "/**\n * \u666e\u901a\u8d26\u6237\u7684\u7b7e\u540d\n */\n@Override\npublic boolean signInputs(Transaction tx, ECKey key) {\n    int numInputs = tx.getInputs().size();\n    for (int i = 0; i < numInputs; i++) {\n        TransactionInput txIn = (TransactionInput) tx.getInput(i);\n        if (txIn.getFroms() == null || txIn.getFroms().size() == 0) {", "@Override\npublic void onWSConnect(WebSocketConnection conn) {", "@Override\npublic void exec(int executionCounter) {\n    List<String> args = RedisUtils.toPayload(luaScriptState.getSha(), keys.size(), keys, arguments);\n    redisAPI.evalsha(args, event -> {\n        if (event.succeeded()) {\n            promise.complete(event.result().toLong());\n        } else {\n            String message = event.cause().getMessage();\n            if (message != null && message.startsWith(\"NOSCRIPT\")) {\n                log.warn(\"HalfOpenCircuitRedisCommand script couldn't be found, reload it\");", "/**\n * output the result of stack trace capture to the log\n */\npublic static void result() {\n    synchronized (trackers) {\n        for (Entry<String, Tracker> t : trackers.entrySet()) {\n            LOG.info(\"Tracker: \" + t.getKey() + \", \" + t.getValue().size() + \" entry points...\");\n            for (Trace trace : t.getValue().values()) {", "@Override\npublic MessageProcessResult process(Message message, Peer peer) {\n    if (log.isDebugEnabled()) {", "private void executeExternalManipulateScope(CustomScriptConfiguration scriptConfiguration, SpontaneousScopeExternalContext context) {\n    try {", "    destination = createDestination();\n    MessageProducer producer = session.createProducer(destination);\n    producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n    for (int i = 0; i < 60; i++) {\n        BytesMessage message = session.createBytesMessage();\n        message.writeBytes(new byte[1024 * 1024]);\n        producer.send(message);\n    }\n    Thread.sleep(1000);\n    String objectNameStr = broker.getBrokerObjectName().toString();\n    objectNameStr += \",service=Health\";\n    ObjectName brokerName = assertRegisteredObjectName(objectNameStr);\n    HealthViewMBean health = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, HealthViewMBean.class, true);\n    List<HealthStatus> list = health.healthList();\n    for (HealthStatus status : list) {", "private static ProjectBranches synchronizeProjectBranches(ServerApi serverApi, String projectKey) {", "public SecurityToken mapSignInResponse(RequestContext requestContext, String trustedIdpRealm) {", "                    LOG.debug(\"Latch count down called.\");\n                }\n            }\n        }.start();\n    }\n    // Wait for all the clients to finish\n    LOG.info(\"Waiting for latch...\");\n    done.await();\n    LOG.info(\"Latch complete.\");\n    LOG.info(\"FD count: \" + openFileDescriptorCount());\n    assertTrue(\"Too many open file descriptors: \" + openFileDescriptorCount(), Wait.waitFor(new Wait.Condition() {\n\n        @Override\n        public boolean isSatisified() throws Exception {\n            long openFDs = openFileDescriptorCount();", "public ReportConfigurationBean getSavedReport(String reportName) throws Exception {\n    try {\n        return reportingAdminServiceStub.getSavedReport(reportName);\n    } catch (Exception e) {\n        String msg = \"Unable get saved report\";", "@Override\npublic void connectionLost(SocketAddress sa) {\n    String msg = \"lost memcached connection [\" + sa + \"] reconnecting...\";", "@Test(timeout = 60000)\npublic void testForConnectionLeak() throws Exception {\n    Integer expectedConnectionCount = 0;\n    for (int i = 0; i < ITERATIONS; i++) {\n        try {\n            if (i % 2 == 0) {", "private SessionId getLdapSessionId(String sessionId) {\n    if (StringHelper.isEmpty(sessionId)) {\n        return null;\n    }\n    SessionId ldapSessionId = sessionIdService.getSessionId(sessionId);\n    if (ldapSessionId == null) {", "public void error(SAXParseException exception) {", "@Override\npublic void deleteEntitlement(String name) {\n    Query query = em.createQuery(\"select e from Entitlement e where e.name=:name\");\n    query.setParameter(\"name\", name);\n    Object entitlementObj = query.getSingleResult();\n    em.remove(entitlementObj);", "public Map<UmaScriptByScope, UmaAuthorizationContext> checkNeedsInfo(Claims claims, Map<Scope, Boolean> requestedScopes, List<UmaPermission> permissions, UmaPCT pct, HttpServletRequest httpRequest, Client client) {\n    Map<UmaScriptByScope, UmaAuthorizationContext> scriptMap = new HashMap<UmaScriptByScope, UmaAuthorizationContext>();\n    Map<String, String> ticketAttributes = new HashMap<String, String>();\n    List<ClaimDefinition> missedClaims = new ArrayList<ClaimDefinition>();\n    UmaAuthorizationContextBuilder contextBuilder = new UmaAuthorizationContextBuilder(appConfiguration, attributeService, resourceService, permissions, requestedScopes, claims, httpRequest, sessionService, userService, permissionService, client);\n    for (Scope scope : requestedScopes.keySet()) {\n        List<String> authorizationPolicies = scope.getUmaAuthorizationPolicies();\n        if (authorizationPolicies != null && !authorizationPolicies.isEmpty()) {\n            for (String scriptDN : authorizationPolicies) {", "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic static boolean registerNewMBean(Class clazz, Class interfaceClass) {\n    boolean status = false;\n    try {\n        String cName = clazz.getName();\n        if (cName.indexOf('.') != -1) {\n            cName = cName.substring(cName.lastIndexOf('.')).replaceFirst(\"[\\\\.]\", \"\");\n        }", "@ParameterizedTest\n@ValueSource(classes = { ChromeDriver.class, EdgeDriver.class })\nvoid testLatestAndBetaedgedriver(Class<? extends WebDriver> driverClass) {\n    WebDriverManager wdm = WebDriverManager.getInstance(driverClass).avoidResolutionCache().avoidBrowserDetection().win();\n    wdm.setup();\n    String edgedriverStable = wdm.getDownloadedDriverVersion();", "public Object get(String str) {\n    Object r = super.get(str);", "@Override\npublic void onStreamEvent(Notify notify) {", "@Override\npublic void failedToOpenIndex(IndexDescriptor descriptor, String action, Exception cause) {\n    if (log.isDebugEnabled()) {", "public void addConfiguration(Artifact configurationId) {", "    if (StringUtils.isEmpty(alias)) {\n        aliasId.requestFocus();\n        DailogUtil.showTipDailogCenter(\"\u522b\u540d\u4e0d\u80fd\u4e3a\u7a7a\", getThisStage());\n        return;\n    }\n    //\u4fee\u6539\u5bc6\u7801\u5e76\u5224\u65ad\u7ed3\u679c\n    AccountKit accountKit = InchainInstance.getInstance().getAccountKit();\n    Result result = accountKit.setAlias(alias);\n    if (result.isSuccess()) {\n        if (callback != null) {\n            callback.ok(null);\n        }\n        DailogUtil.showTipDailogCenter(result.getMessage(), getThisStage());\n        resetAndclose();\n    } else {", "public static String resolve(String url, HttpServletRequest request) {\n    if (request == null) {\n        return url;\n    }\n    if (isLocal(url)) {\n        try {\n            URL urlValue = new URL(url);\n            URL updatedUrl = new URL(urlValue.getProtocol(), urlValue.getHost(), request.getLocalPort(), urlValue.getFile());\n            LOG.debug(\"URL updated to {}\", updatedUrl.toString());\n            return updatedUrl.toString();\n        } catch (MalformedURLException e) {", "@Override\npublic void visitTemplateClose(String name, long id) {\n    tab--;", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"db2\")\nToxiproxyContainer.ContainerProxy db2ContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_DB2) Db2Container db2, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(db2, Db2Container.DB2_PORT);\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.db2.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.db2.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.db2.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedDb2ToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Override\npublic void error(String s, Throwable throwable) {", "public boolean isValidSignoutAddress(RequestContext context, String endpointAddress, String realm) throws Exception {\n    if (endpointAddress == null) {\n        return true;\n    }\n    Idp idpConfig = (Idp) WebUtils.getAttributeFromFlowScope(context, \"idpConfig\");\n    if (idpConfig.isDisableLogoutAddressValidation()) {\n        return true;\n    }\n    Application serviceConfig = idpConfig.findApplication(realm);\n    if (serviceConfig == null) {", "void exercise(WebDriver driver, String sutUrl, String expectedTitleContains) throws Exception {\n    driver.get(sutUrl);\n    Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(30));\n    wait.until(d -> d.getTitle().contains(expectedTitleContains));\n    URL dockerSessionUrl = wdm.getDockerNoVncUrl(driver);", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"aerospike\")\nToxiproxyContainer.ContainerProxy aerospikeContainerProxy(ToxiproxyContainer toxiproxyContainer, GenericContainer<?> aerospike, AerospikeProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(aerospike, properties.port);\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.aerospike.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.aerospike.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.aerospike.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedAerospikeToxiProxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "@Override\nprotected Void processItem(List<PublishedPointVO> subgroup, int itemId) throws Exception {\n    long startTs = 0L;\n    if (log.isInfoEnabled()) {\n        startTs = Common.timer.currentTimeMillis();", "@Bean\n@ConditionalOnToxiProxyEnabled(module = \"keycloak\")\nToxiproxyContainer.ContainerProxy keycloakContainerProxy(ToxiproxyContainer toxiproxyContainer, @Qualifier(BEAN_NAME_EMBEDDED_KEYCLOAK) KeycloakContainer keycloakContainer, KeycloakProperties properties, ConfigurableEnvironment environment) {\n    ToxiproxyContainer.ContainerProxy proxy = toxiproxyContainer.getProxy(keycloakContainer, keycloakContainer.getHttpPort());\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.keycloak.toxiproxy.host\", proxy.getContainerIpAddress());\n    map.put(\"embedded.keycloak.toxiproxy.port\", proxy.getProxyPort());\n    map.put(\"embedded.keycloak.toxiproxy.proxyName\", proxy.getName());\n    MapPropertySource propertySource = new MapPropertySource(\"embeddedKeycloakToxiproxyInfo\", map);\n    environment.getPropertySources().addFirst(propertySource);", "        // raw buffer handling\n        IoBuffer in = (IoBuffer) message;\n        // filter based on current connection state\n        RTMP rtmp = conn.getState();\n        final byte connectionState = conn.getStateCode();\n        log.trace(\"connectionState: {}\", RTMP.states[connectionState]);\n        // get the handshake\n        OutboundHandshake handshake = (OutboundHandshake) conn.getAttribute(RTMPConnection.RTMP_HANDSHAKE);\n        switch(connectionState) {\n            case RTMP.STATE_CONNECT:\n                log.debug(\"Handshake - client phase 1 - size: {}\", in.remaining());\n                // 0x01\n                in.get();\n                // usually 0x03 (rtmp)\n                byte handshakeType = in.get();", "private void handleException(String msg, Exception e, MessageContext msgContext) {", "@Override\npublic void print(String message) {", "    requestBuffer.setInt(0, header.length()).appendBuffer(header);\n    int statusCode = StatusCode.OK.getStatusCode();\n    String statusMessage = StatusCode.OK.getStatusMessage();\n    /*\n         * We create a response for the client,\n         * but we discard the request and therefore\n         * do not forward it.\n         */\n    ctx.response().setStatusCode(statusCode);\n    ctx.response().setStatusMessage(statusMessage);\n    ctx.response().headers().add(\"Content-Length\", \"0\");\n    ctx.request().handler(buffer -> {\n        loggingHandler.appendRequestPayload(buffer, requestHeaders);\n        requestBuffer.appendBuffer(buffer);\n        MultiMap responseHeaders = ctx.response().headers();", "/**\n * Logs details about the request error.\n *\n * @param response\n *            http response\n * @throws IOException\n *             on IO error\n * @throws ParseException\n *             on parse error\n */\npublic static void handleError(HttpResponse response) throws ParseException, IOException {\n    log.debug(\"{}\", response.getStatusLine().toString());\n    HttpEntity entity = response.getEntity();\n    if (entity != null) {", "private void toggleNodeOrientation(@SuppressWarnings(\"unused\") ObservableValue<? extends Toggle> observable, @SuppressWarnings(\"unused\") Toggle oldValue, Toggle newValue) {\n    if (nodeOrientationLtr.equals(newValue)) {\n        settings.userInterfaceOrientation().set(NodeOrientation.LEFT_TO_RIGHT);\n    } else if (nodeOrientationRtl.equals(newValue)) {\n        settings.userInterfaceOrientation().set(NodeOrientation.RIGHT_TO_LEFT);\n    } else {", "    if (eventPublisherConfig == null) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"Newly creating publisher configuration.\");\n        }\n        synchronized (HL7EventPublisher.class) {\n            eventPublisherConfig = new EventPublisherConfig();\n            DataPublisher loadBalancingDataPublisher;\n            try {\n                if (serverConfig.getSecureUrl() != null) {\n                    loadBalancingDataPublisher = new DataPublisher(DataEndpointConstants.THRIFT_DATA_AGENT_TYPE, serverConfig.getUrl(), serverConfig.getSecureUrl(), serverConfig.getUsername(), serverConfig.getPassword());\n                } else {\n                    loadBalancingDataPublisher = new DataPublisher(serverConfig.getUrl(), serverConfig.getUsername(), serverConfig.getPassword());\n                }\n            } catch (DataEndpointAgentConfigurationException | DataEndpointException | DataEndpointConfigurationException | DataEndpointAuthenticationException | TransportException e) {\n                String errorMsg = \"Error occurred while creating data publisher\";", "public boolean getVersionMatches(String version) {\n    version = version.trim();\n    boolean result = false;\n    if (version.endsWith(\"*\")) {\n        version = version.substring(0, version.length() - 1).trim();", "@Override\npublic void resourceChanged(String resourceUri, Buffer resource) {\n    if (configResourceUri() != null && configResourceUri().equals(resourceUri)) {", "@Override\n@SuppressWarnings(\"restriction\")\nprotected Provider getProvider() {\n    if (this.provider == null) {\n        /*\n             * The smartCardNameIndex int is added at the end of the smartCard name in order to enable the successive\n             * loading of multiple pkcs11 libraries\n             */\n        String aPKCS11LibraryFileName = this.getPkcs11Path();\n        aPKCS11LibraryFileName = this.escapePath(aPKCS11LibraryFileName);\n        final StringBuilder pkcs11Config = new StringBuilder();\n        pkcs11Config.append(\"name = SmartCard\").append(UUID.randomUUID().toString()).append(\"\\n\");\n        pkcs11Config.append(\"library = \\\"\").append(aPKCS11LibraryFileName).append(\"\\\"\").append(\"\\n\");\n        pkcs11Config.append(\"slotListIndex = \").append(this.getSlotListIndex());\n        final String configString = pkcs11Config.toString();", "@Override\npublic void onException(Message message, Exception exception) {", "public void saveReport(ReportConfigurationBean configuration) throws Exception {\n    try {\n        reportingAdminServiceStub.saveReport(configuration);\n    } catch (Exception e) {\n        String msg = \"Unable to save report\";", "    }\n    // do a few quick requests\n    for (int count = 0; count < 10; count++) {\n        delete(\"res\" + count);\n        given().body(\"{ \\\"name\\\" : \\\"test\" + count + \"\\\" }\").put(\"res\" + count).then().assertThat().statusCode(200);\n        get(\"res\" + count).then().assertThat().statusCode(200);\n    }\n    // do another 1000 requests\n    for (int count = 0; count < 1000; count++) {\n        given().body(\"{ \\\"name\\\" : \\\"test\" + count + \"\\\" }\").put(\"newres\" + count).then().assertThat().statusCode(200);\n    }\n    // wait a sec\n    TestUtils.waitSomeTime(1);\n    // read the jmx infos\n    if (mbs.isRegistered(beanNameObject)) {", "protected void handleException(String msg, Exception e) {", "@Override\npublic void corruptedLogFile(long version, Throwable t) {", "private void restrictTopics(String username, Collection<String> topics) {\n    if (!topics.isEmpty()) {", "@Override\npublic void encode(IoSession session, Object message, ProtocolEncoderOutput out) throws ProtocolCodecException {\n    if (log.isDebugEnabled()) {", "public SonarLintInputFile create(ClientInputFile inputFile) {\n    var defaultInputFile = new SonarLintInputFile(inputFile, f -> {\n        LOG.debug(\"Initializing metadata of file {}\", f.uri());\n        var charset = f.charset();\n        InputStream stream;\n        try {\n            stream = f.inputStream();\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Failed to open a stream on file: \" + f.uri(), e);\n        }\n        return fileMetadata.readMetadata(stream, charset != null ? charset : Charset.defaultCharset(), f.uri(), null);\n    });\n    defaultInputFile.setType(inputFile.isTest() ? Type.TEST : Type.MAIN);\n    var fileLanguage = inputFile.language();\n    if (fileLanguage != null) {", "private boolean checkValidity(String key, String value, Date expirationDate) {\n    long now = new Date().getTime();\n    long expirationTime = expirationDate != null ? expirationDate.getTime() : 0;\n    boolean isValid = value != null && expirationTime != 0 && expirationTime > now;\n    if (!isValid) {", "private void skipMessage(String prefix, MessageReference msgRef) {", "@Override\npublic void connectionEstablished(SocketAddress sa, int reconnectCount) {\n    String msg = \"successfully established a memcache connection to [\" + sa + \"]\";\n    if (reconnectCount > 1)\n        msg += \" after [\" + reconnectCount + \"] retries\";", "protected void logError(Object service, Throwable e) {\n    Logger log = LoggerFactory.getLogger(service.getClass());", "@Test\npublic void testConnectionFailures() throws Exception {\n    final CountDownLatch failed = new CountDownLatch(1);\n    Connection connection = pooledConnFact.createConnection();", "@Override\npublic void onMessage(Message message) {", "        selectors.add(actionSelector(action.value()));\n    }\n    selectors.add(topicSelector(topic));\n    selectors.add(activeSelector(applicationContext));\n    MessageFilter filter = new MessageFilter(selectors);\n    filter.setDiscardChannel(nullChannel);\n    initializeBean(filter);\n    List<MessageHandler> handlers = new ArrayList<>();\n    handlers.add(filter);\n    handlers.add(serviceActivator);\n    MessageHandlerChain chain = new MessageHandlerChain();\n    chain.setHandlers(handlers);\n    chain.setComponentName(componentName);\n    initializeBean(chain);\n    if (channel.subscribe(chain)) {", "/**\n * {@inheritDoc}\n */\npublic boolean canHandle(File file) {\n    boolean valid = false;\n    if (file.exists()) {\n        String absPath = file.getAbsolutePath().toLowerCase();\n        int dotIndex = absPath.lastIndexOf('.');\n        if (dotIndex > -1) {\n            String fileExt = absPath.substring(dotIndex);", "@Test\npublic void testYouTubePublish() throws InterruptedException {\n    log.info(\"\\ntestYouTubePublish\");\n    String youtubeHost = \"a.rtmp.youtube.com\";\n    int youtubePort = 1935;\n    String youtubeApp = \"live2\";\n    //System.getProperty(\"youtube.streamname\");\n    final String youtubePublishName = \"dybx-y3ph-uqzx-30vx\";", "public void ioException(IOException e) {\n    if (LOG.isDebugEnabled())", "private void registerEnvironment(GenericContainer<?> artifactory, ConfigurableEnvironment environment, ArtifactoryProperties properties) {\n    Integer mappedPort = artifactory.getMappedPort(properties.generalPort);\n    String host = artifactory.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.artifactory.host\", host);\n    map.put(\"embedded.artifactory.port\", mappedPort);\n    map.put(\"embedded.artifactory.username\", properties.getUsername());\n    map.put(\"embedded.artifactory.password\", properties.getPassword());", "@Override\npublic void removeRoute(String urlPattern) {", "public Response gatherClaims(String clientId, String ticket, String claimRedirectUri, String state, Boolean reset, Boolean authenticationRedirect, HttpServletRequest httpRequest, HttpServletResponse httpResponse) {\n    try {", "@Override\npublic ByteBuffer targetBytes(String name, long id, int length) {", "public void unloading(Artifact configurationId) {", "public void abortConnection(ObjectName consumerToAbort) {\n    Subscription sub = broker.getSubscriber(consumerToAbort);\n    if (sub != null) {\n        LOG.info(\"aborting consumer connection via jmx: {}\", sub.getConsumerInfo().getConsumerId().getConnectionId());\n        strategy.abortConsumer(sub, true);\n    } else {", "public void starting(Artifact configurationId) {", "@Test\nvoid testCachePathStartsWithTilde() {\n    String customPath = \"~webdrivers\";\n    wdm.config().setCachePath(customPath);\n    String cachePath = wdm.config().getCachePath();", "public void onFailure(IOException e) {\n    if (!shuttingDown.get()) {", "@ParameterizedTest\n@MethodSource(\"data\")\nvoid testCli(String browser, String driver) {", " * @throws ServletException\n */\n@SuppressWarnings(\"deprecation\")\n@Override\npublic void start() throws ServletException {\n    log.info(\"Loading RTMPS context\");\n    rtmpsEngine = new StandardEngine();\n    rtmpsEngine.setName(\"red5RTMPSEngine\");\n    rtmpsEngine.setDefaultHost(host.getName());\n    rtmpsEngine.setRealm(embedded.getEngine().getRealm());\n    Service service = new StandardService();\n    service.setName(\"red5RTMPSEngine\");\n    service.setContainer(rtmpsEngine);\n    // add the valves to the host\n    for (Valve valve : valves) {", "public void loading(Artifact configurationId) {", "private void assertIEDriver() {\n    File driver = new File(wdm.getDownloadedDriverPath());", "private void registerMSSQLServerEnvironment(MSSQLServerContainer<?> mssqlServerContainer, ConfigurableEnvironment environment, MSSQLServerProperties properties) {\n    Integer mappedPort = mssqlServerContainer.getMappedPort(MSSQLServerContainer.MS_SQL_SERVER_PORT);\n    String host = mssqlServerContainer.getHost();\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n    map.put(\"embedded.mssqlserver.port\", mappedPort);\n    map.put(\"embedded.mssqlserver.host\", host);\n    // Database and user cannot be chosen when starting the MSSQL image\n    map.put(\"embedded.mssqlserver.database\", \"master\");\n    map.put(\"embedded.mssqlserver.user\", \"sa\");\n    map.put(\"embedded.mssqlserver.password\", properties.getPassword());\n    String jdbcURL = \"jdbc:sqlserver://{}:{};databaseName={};trustServerCertificate=true\";", "@Test(groups = \"wso2.esb\", description = \"Tests System Logs\")\npublic void testSystemLogs() throws Exception {\n    CarbonLogReader carbonLogReader = new CarbonLogReader();\n    carbonLogReader.start();\n    OMElement response = axis2Client.sendSimpleStockQuoteRequest(getProxyServiceURLHttp(\"logMediatorLevelTestProxy\"), null, \"WSO2\");\n    Assert.assertTrue(response.toString().contains(\"WSO2\"));", "public void slf4j(Logger log, DataClass tainted, String tainted2) {\n    String safe = \"\";\n    //Unsafe\n    log.info(tainted.input);", "@Override\npublic void info(String s, Throwable throwable) {", "public void input(byte[] buf, int len) {\n    if (LOG.isDebugEnabled())", "@Override\nprotected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {", "    // Get CSV from Yahoo\n    log.info(\"Sending request: \" + url);\n    URL request = new URL(url);\n    RedirectableRequest redirectableRequest = new RedirectableRequest(request, 5);\n    redirectableRequest.setConnectTimeout(YahooFinance.CONNECTION_TIMEOUT);\n    redirectableRequest.setReadTimeout(YahooFinance.CONNECTION_TIMEOUT);\n    Map<String, String> requestProperties = new HashMap<String, String>();\n    requestProperties.put(\"Cookie\", CrumbManager.getCookie());\n    URLConnection connection = redirectableRequest.openConnection(requestProperties);\n    InputStreamReader is = new InputStreamReader(connection.getInputStream());\n    BufferedReader br = new BufferedReader(is);\n    // skip the first line\n    br.readLine();\n    // Parse CSV\n    for (String line = br.readLine(); line != null; line = br.readLine()) {", "@Test\npublic void testFLVReaderFileWithPreProcessInfo() {\n    log.info(\"\\n testFLVReaderFileWithPreProcessInfo\");\n    //Path path = Paths.get(\"target/test-classes/fixtures/flv1_nelly.flv\");\n    Path path = Paths.get(\"target/test-classes/fixtures/webrtctestrecord.flv\");\n    try {\n        File file = path.toFile();\n        log.info(\"Reading: {}\", file.getName());\n        FLVReader reader = new FLVReader(file, true);\n        //KeyFrameMeta meta = reader.analyzeKeyFrames();\n        //log.debug(\"Meta: {}\", meta);\n        ITag tag = null;\n        for (int t = 0; t < 6; t++) {\n            tag = reader.readTag();", "private void assertIEDriver() {\n    File driver = new File(wdm.getDownloadedDriverPath());"], "variables": [["publishRate"], ["children"], ["message"], ["myself"], ["command"], ["i"], ["offset", "topic", "group"], ["call"], ["session"], ["configurationScopeId"], ["result"], ["command"], ["C1"], ["etagFromResources"], ["source"], ["map"], ["name"], ["message"], ["namedDatabaseId"], ["indexedFile"], ["S0S1S2"], ["dn"], ["socketPath"], ["recoveryToPosition", "t"], ["serverInfoFilePath"], ["msg"], ["javaSecurityAPIProvider", "algorithm"], ["cause"], ["cause"], ["resourceUri"], ["size"], ["cassandraEnv"], ["merkleHash"], ["tmpFile"], ["line"], ["expiredKey"], ["command"], ["command"], ["map"], ["nanosSinceTermination"], ["msg"], ["totalDataSizeGB"], ["indexFile", "index"], ["clazz"], ["message"], ["projectFilePath"], ["tempFile"], ["result"], ["result"], ["e"], ["nodeVersionStr"], ["commandName", "checkCommand", "containerId"], ["expression"], ["oAuth2User"], ["apiId"], ["httpPort", "map"], ["policyName", "apiId"], ["payload"], ["e"], ["sessionId"], ["path"], ["capabilities"], ["dockerSessionUrl"], ["map"], ["arg1", "arg0"], ["map"], ["name", "value"], ["map"], ["pairwiseIdentifier"], ["msg"], ["sensorName"], ["valve"], ["msg", "ex"], ["fileName"], ["fileName"], ["allowedTypeStr"], ["responseMessage"], ["message"], ["clusterNodes", "clusterInfo", "config", "info"], ["queueStorePrefetch"], ["text"], ["path"], ["values"], ["endpointAddress"], ["containerEndpoint"], ["map"], ["date"], ["tag"], ["deferred", "resolved"], ["code"], ["targetUri"], ["xDeltaResponseNumber"], ["key"], ["suffix"], ["exception"], ["result"], ["driverFromCache"], ["t"], ["map"], ["sce"], ["minConnections"], ["frameType"], ["executionCounter"], ["commandStr"], ["command"], ["driverPath"], ["id"], ["flowReferenceType"], ["mountPoint"], ["exception"], ["execResult"], ["map"], ["result"], ["entity"], ["builtUrl"], ["map"], ["topic"], ["message"], ["userName"], ["job"], ["expires", "timestamp"], ["name"], ["name"], ["exitCode"], ["args"], ["planTags", "apiTags"], ["code"], ["result"], ["merkleHash"], ["osName"], ["message"], ["t", "e"], ["luceneDirectory"], ["map"], ["uiThemeName"], ["type"], ["dataSizeMB"], ["p12File"], ["msg", "e"], ["cookieId"], ["cause"], ["error"], ["uiOrientationName"], ["message"], ["jobId"], ["endpointAddress"], ["message"], ["message"], ["seedDomain"], ["masterkeyFile"], ["sutUrl", "title"], ["msg", "e"], ["msg"], ["context", "responseAsJsonObject"], ["map"], ["jsonData"], ["e"], ["removedConnectionId"], ["args"], ["buffer"], ["visibleWindows"], ["topicName"], ["msg"], ["code"], ["th", "level", "message"], ["tag"], ["jsonData"], ["authReqId"], ["fileName"], ["message"], ["articleEvent"], ["name", "value"], ["dest"], ["mappedPort", "host", "map"], ["itemId"], ["plugin"], ["msg"], ["ts"], ["textValue"], ["result", "function"], ["beanName"], ["so"], ["message"], ["product"], ["map"], ["dockerImageName", "startupTime", "buildDate"], ["name"], ["expression"], ["callbackRate"], ["clusterId"], ["colIndex", "rowIndex"], ["configuredNodejsPath"], ["message"], ["deprecatedKey"], ["numKahadbFiles"], ["path"], ["info"], ["driverPath"], ["guessnot"], ["contextPath"], ["staticMemberCollection"], ["map"], ["browser"], ["driver", "operatingSystem"], ["e"], ["data"], ["map"], ["response"], ["throwable", "indexFile", "index"], ["socketPath"], ["reason"], ["y"], ["name"], ["name"], ["map"], ["result"], ["potentialVaultPath"], ["map"], ["msg"], ["output", "input", "key"], ["targetClassName", "objectName"], ["driver"], ["query"], ["referer", "remoteHost", "requestURL", "now", "length", "userAgent", "serviceTime", "user", "statusCode"], ["dn"], ["msg"], ["redisKey"], ["function"], ["msg"], ["token"], ["containerId"], ["name"], ["map"], ["resourceId", "lockIdentityHashCode", "estimatedWaitTime", "description", "transactionId", "resourceType"], ["profileKey", "language"], ["exception"], ["outname"], ["consumerToAbort"], ["e"], ["sutUrl", "title"], ["e"], ["arguments"], ["elements"], ["s"], ["jobCount"], ["osLabel", "architecture"], ["execResult", "topic", "createTopicCmd"], ["edgeVersion"], ["pctCode", "ticket", "claimToken", "rptCode", "scope", "grantType", "claimTokenFormat"], ["browser", "url"], ["sessionIdCookie"], ["result"], ["cause"], ["clientId", "scope"], ["connectionId", "sonarProjectKey"], ["name"], ["name"], ["userCriterionValue", "userCriterionKey"], ["pluginVersion", "minimumVersion"], ["msg", "throwable"], ["protocol"], ["executionCounter"], ["customPath", "cachePath"], ["arguments"], ["jobId"], ["lastTransaction"], ["error"], ["map"], ["partitions", "topic"], ["e"], ["messageId"], ["listOfRoles"], ["cause"], ["msg"], ["driverName"], ["info", "ds"], ["event"], ["e"], ["deprecatedKey"], ["arg1"], ["urlPattern"], ["key"], ["expirationDateStr", "value", "key"], ["tmpFolder"], ["sutUrl", "title"], ["sessionId"], ["name"], ["name"], ["sutUrl", "title"], ["name"], ["lastId"], ["map"], ["arg0"], ["wire"], ["result"], ["message"], ["statusCode"], ["cause"], ["message"], ["plugin"], ["fromState", "toState"], ["cause", "message"], ["config"], ["values"], ["message"], ["map"], ["name"], ["successCount", "message"], ["mappedPort", "host", "map"], ["exception"], ["configurationId"], ["ltag"], ["i"], ["result"], ["key"], ["configurationId"], ["throwable"], ["driverVersion"], ["recFile"], ["objectName"], ["requestUri"], ["message"], ["name", "length"], ["path"], ["map"], ["results"], ["serverUrl"], ["input"], ["context", "jsonWebResponse"], ["ex"], ["event"], ["str"], ["inputIndex"], ["err"], ["versions"], ["protocol"], ["hash"], ["keyId"], ["context"], ["msg"], ["logVersion"], ["timestamp"], ["tldsToAddArray"], ["executionCounter"], ["path"], ["context"], ["response"], ["dlogUri"], ["destination", "location"], ["idToRemove"], ["payload"], ["key"], ["expectedVersions"], ["configurationId"], ["peerTime"], ["name"], ["zkPath"], ["name", "state"], ["homeRealmCookie"], ["error"], ["s"], ["context"], ["map"], ["namedDatabaseId"], ["publishName"], ["sessionId"], ["map"], ["newTopic"], ["pbFilePath"], ["drivers", "bundle"], ["lockExpiryMs", "lock", "token"], ["clusterId"], ["zipUrl", "insidePath"], ["msg"], ["map"], ["wireFormat"], ["code"], ["byteDumpFile"], ["e"], ["urlPattern"], ["message"], ["eventType"], ["jsonData"], ["conn", "exp"], ["mappedPort", "host", "map"], ["scriptNames"], ["map"], ["notify"], ["message"], ["dest"], ["jobId"], ["signedBytes"], ["logMessage"], ["message"], ["inum"], ["map"], ["key"], ["name"], ["metric"], ["multiplier", "testTimeout"], ["broker"], ["map"], ["errorMsg"], ["name"], ["specificVersion", "osLabel", "architecture"], ["partitions", "topic"], ["logFile", "logVersion"], ["result"], ["port", "host"], ["next", "before"], ["eventType"], ["className"], ["digestPos"], ["input"], ["lock", "token"], ["mappedHttpPort", "map"], ["pathToVault"], ["error"], ["tempDirectory"], ["message"], ["lastInterframe"], ["recFile"], ["i"], ["oAuth2AuditLog"], ["name"], ["merkleHash"], ["propertyName", "value", "url"], ["url"], ["connection"], ["arg1", "arg0"], ["context"], ["msg"], ["error"], ["map"], ["id"], ["principal"], ["line"], ["duration", "requestWrapper"], ["map"], ["configurationFile", "name"], ["map"], ["path", "root"], ["name"], ["map"], ["context"], ["zipUrl"], ["tag"], ["map"], ["connectionId"], ["msg"], ["fedContext"], ["warning"], ["topic", "streamInfo"], ["name"], ["indexFile", "index"], ["info"], ["exception"], ["e"], ["builtUrl"], ["configurationId"], ["msg"], ["map"], ["msg", "ex"], ["msg"], ["message"], ["sendMessageBatchResponse"], ["map"], ["fileLanguage"], ["msg"], ["name"], ["map"], ["removedVirtualDest"], ["cookieId"], ["worker"], ["error"], ["pattern"], ["server", "port"], ["map"], ["matchingPattern", "issue"], ["name", "value"], ["warning"], ["exception"], ["launchEvent"], ["map"], ["command"], ["locker"], ["e"], ["pubKeyAlgo"], ["reconciledTransactionId"], ["archive"], ["entry"], ["throwable"], ["result", "command"], ["drivers", "bundle"], ["map"], ["deviceRegistrationToken", "idTokenHint"], ["map"], ["javaSecurityAPIProvider", "algorithm"], ["status"], ["msg"], ["uri"], ["input"], ["msg"], ["authConfigId"], ["connectionId"], ["e"], ["topics"], ["i"], ["executionCounter"], ["topic"], ["articleDeleteEvent"], ["reconciledTransactionId"], ["msg"], ["msg"], ["jsonString"], ["message"], ["notify"], ["t"], ["dbsFile"], ["map"], ["response", "responseCode"], ["flowTypeStr"], ["command"], ["in", "out"], ["customImage", "defaultImage"], ["map"], ["propertyName"], ["conn"], ["message"], ["e"], ["error"], ["task"], ["destinationDir"], ["customPath", "cachePath"], ["e"], ["uri"], ["entity"], ["source"], ["arg1", "list"], ["claimType"], ["len", "buffer", "bufferIndex"], ["sutUrl", "title"], ["v1", "v2"], ["i"], ["browser"], ["homeRealm"], ["error"], ["b"], ["map"], ["consensusMessage"], ["e"], ["map"], ["downloadedDriverPath"], ["args"], ["spanChunk"], ["browser"], ["msg", "e"], ["name"], ["xml"], ["tileTable", "pointTable"], ["messageID"], ["uri"], ["clusterId"], ["id"], ["locker"], ["executionCounter"], ["sub", "candidate"], ["s", "throwable"], ["name"], ["topic"], ["browsed"], ["filteredList", "version"], ["message"], ["tokenNameLookup"], ["e"], ["executionCounter"], ["map"], ["mappedPort", "host", "map"], ["conn", "error"], ["contentType"], ["tag"], ["strURL"], ["payloadFilters"], ["meta", "audio", "video"], ["context"], ["tokenTypeHint", "token"], ["throwable"], ["ex"], ["xDeltaResponseNumber"], ["serverRequest"], ["driverManagerType"], ["i", "numElements"], ["title"], ["key"], ["ex"], ["context"], ["t", "recoveryFromPosition"], ["nc"], ["map"], ["pageContents"], ["name"], ["destinationValue", "context", "sourceValue"], ["path"], ["backlog", "type"], ["indexFile", "index"], ["message"], ["cause", "configurationId"], ["loginHint"], ["flags"], ["topic"], ["port", "host", "map"], ["s", "throwable"], ["topicPattern"], ["msg"], ["s", "t"], ["applicationContext"], ["valueFromResolutionCache", "strDate", "key"], ["busInfo"], ["exception"], ["roleName"], ["commentEvent"], ["payload"], ["i"], ["cause"], ["msg"], ["flowReferenceType"], ["errorMessage"], ["mappedPort", "host", "map"], ["objs"], ["i", "numElements"], ["code"], ["featureState"], ["jobCount"], ["name"], ["percent"], ["message"], ["serverRequest"], ["topic"], ["map"], ["map"], ["msg", "thrown"], ["throwable"], ["sessionId"], ["successCount", "message"], ["out"], ["throwable"], ["tx"], ["map"], ["tmpFile"], ["connectionProviderName"], ["numberOfBeans"], ["issue", "pattern"], ["trustedIdpRealm"], ["scopeRequested", "spontaneousScope"], ["msg", "e"], ["span"], ["context"], ["providerClassName"], ["event"], ["args"], ["appId", "sessionId", "userName", "keyHandle"], ["message"], ["entity"], ["isStorageExpand", "isExpandOnBackend", "isDeltaOnBackend"], ["cacheKey"], ["message"], ["objectName", "bridge"], ["response"], ["redisEnv"], ["url"], ["port"], ["event"], ["name"], ["exception"], ["capabilities", "browserName", "remoteUrl"], ["amf", "timestamp"], ["tmp"], ["exception"], ["msg"], ["params"], ["map"], ["map"], ["tc"], ["name"], ["error"], ["authRealmParameter"], ["projectKey"], ["numKahadbFiles"], ["elements"], ["reason", "statusCode"], ["message"], ["numConnected", "sendMessage"], ["t", "version"], ["updatedRateLimit"], ["providerURL"], ["userName", "authenticateResponseString"], ["logPosition", "firstTxIdAfterLastCheckPoint"], ["sutUrl", "title"], ["path"], ["msg"], ["sc"], ["message"], ["tag"], ["message"], ["msg"], ["response"], ["pageContents"], ["tmp"], ["queueingStrategyConfigObj"], ["errorMsg"], ["jsonData"], ["i"], ["message"], ["username"], ["realm"], ["exception"], ["e"], ["xmppDomain"], ["previous"], ["map"], ["listenerId"], ["detectedLanguage"], ["name", "id"], ["map"], ["driverPath"], ["command"], ["map"], ["namedDatabaseId"], ["abstractName"], ["line"], ["connectionId"], ["subPath"], ["subscription"], ["url"], ["throwable"], ["message"], ["role", "renamedRole"], ["topicsConfigurationToCreate"], ["limit"], ["msg"], ["settingsPath"], ["mappedPort", "host", "map"], ["replyMsg"], ["mappedPort", "host", "map"], ["line"], ["endpointAddress"], ["startupTime"], ["delegateName", "i"], ["i"], ["conn"], ["executionCounter"], ["trace"], ["message"], ["context"], ["status"], ["projectKey"], ["trustedIdpRealm"], ["original", "openFDs"], ["msg"], ["msg"], ["i"], ["sessionId"], ["exception"], ["name"], ["scriptDN"], ["cName"], ["edgedriverStable"], ["str", "r"], ["notify"], ["cause"], ["configurationId"], ["result"], ["url"], ["name"], ["map"], ["s", "throwable"], ["realm"], ["dockerSessionUrl"], ["map"], ["itemId"], ["map"], ["handshakeType"], ["msg", "e"], ["message"], ["requestHeaders", "statusMessage", "statusCode"], ["entity"], ["newValue"], ["errorMsg"], ["version"], ["resourceUri"], ["configString"], ["exception"], ["msg"], ["beanNameObject"], ["msg", "e"], ["t", "version"], ["topics"], ["message", "out"], ["fileLanguage"], ["value", "key", "expirationDate"], ["prefix"], ["msg"], ["e"], ["connection"], ["message"], ["topic", "componentName"], ["absPath", "fileExt"], ["youtubePublishName"], ["e"], ["map"], ["urlPattern"], ["clientId", "ticket", "authenticationRedirect", "claimRedirectUri", "state"], ["name"], ["configurationId"], ["consumerToAbort"], ["configurationId"], ["customPath", "cachePath"], ["e"], ["browser"], ["valve"], ["configurationId"], ["driver"], ["mappedPort", "host", "map"], ["response"], ["safe"], ["s", "throwable"], ["buf", "len"], ["ex"], ["line"], ["tag"], ["driver"]], "input": [["private", "void", "handleAdjustPublishRate", "Context", "ctx", "throws", "Exception", "Double", "publishRate", "mapper", "readValue", "ctx", "body", "Double", "class"], ["private", "int", "getFileCount", "File", "dir", "if", "dir", "isDirectory", "String", "children", "dir", "list"], ["Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "if", "log", "isDebugEnabled"], ["protected", "static", "T", "extends", "Id", "T", "readOrGenerate", "SimpleStorage", "T", "storage", "InternalLog", "log", "Class", "T", "type", "Function", "UUID", "extends", "T", "creator", "Supplier", "UUID", "uuid", "T", "myself", "try", "if", "storage", "exists", "myself", "storage", "readState", "if", "myself", "null", "throw", "new", "IllegalStateException", "String", "format", "s", "storage", "was", "found", "on", "disk", "but", "it", "could", "not", "be", "read", "correctly", "type", "getSimpleName", "else"], ["catch", "IOException", "e", "throw", "new", "SenderException", "Could", "not", "read", "output", "of", "command", "getCommandLine", "command", "e", "Read", "the", "errors", "of", "the", "process", "try", "errors", "readStream", "process", "getErrorStream", "catch", "IOException", "e", "throw", "new", "SenderException", "Could", "not", "read", "errors", "of", "command", "getCommandLine", "command", "e", "Throw", "an", "exception", "if", "the", "command", "returns", "an", "error", "exit", "value", "int", "exitValue", "process", "exitValue", "if", "exitValue", "throw", "new", "SenderException", "Nonzero", "exit", "value", "exitValue", "for", "command", "getCommandLine", "command", "process", "output", "was", "output", "error", "output", "was", "errors", "if", "StringUtils", "isNotEmpty", "errors"], ["Override", "public", "void", "write", "int", "i", "throws", "IOException", "StringBuilder", "sb", "local", "get", "if", "sb", "null", "sb", "new", "StringBuilder", "look", "for", "LF", "if", "i"], ["GroupTopicPartition", "key", "GroupTopicPartition", "baseKey", "key", "if", "data", "value", "null", "data", "value", "length", "log", "warn", "Value", "is", "null", "or", "Empty", "for", "key", "toString", "return", "OffsetAndMetadata", "offsetAndMetadata", "GroupMetadataManager", "readOffsetMessageValue", "ByteBuffer", "wrap", "data", "value", "String", "group", "key", "group", "int", "partitionNo", "key", "topicPartition", "partition", "String", "topic", "key", "topicPartition", "topic", "long", "offset", "offsetAndMetadata", "offset", "if", "shouldCollectEvent", "topic", "shouldCollectConsumer", "group", "return", "Partition", "oldPartition", "Partition", "topicsMap", "executeOnKey", "topic", "new", "ConsumerOffsetChangeEntryProcessor", "group", "partitionNo", "offset", "if", "oldPartition", "null"], ["Override", "public", "void", "resultReceived", "IPendingServiceCall", "call"], ["Override", "public", "void", "destroy", "terminate", "any", "active", "websocket", "sessions", "SessionManager", "sm", "XMPPServer", "getInstance", "getSessionManager", "for", "ClientSession", "session", "sm", "getSessions", "if", "session", "instanceof", "LocalSession", "Object", "ws", "LocalSession", "session", "getSessionData", "ws", "if", "ws", "null", "Boolean", "ws"], ["CheckForNull", "private", "BindingConfigChangedEvent", "bind", "String", "configurationScopeId", "BindingConfigurationDto", "bindingConfiguration", "var", "previousBindingConfig", "repository", "getBindingConfiguration", "configurationScopeId", "if", "previousBindingConfig", "null"], ["private", "void", "getCustomerOrders", "throws", "AxisFault", "XPathExpressionException", "OMElement", "payload", "fac", "createOMElement", "customerOrders", "omNs", "OMElement", "result", "new", "AxisServiceClient", "sendReceive", "payload", "getServiceUrlHttp", "serviceName", "customerOrders", "Assert", "assertNotNull", "result", "Response", "message", "null"], ["public", "static", "String", "runAndWaitNoLog", "File", "folder", "String", "command", "String", "output", "try", "Process", "process", "new", "ProcessBuilder", "command", "directory", "folder", "redirectErrorStream", "false", "start", "process", "waitFor", "output", "IOUtils", "toString", "process", "getInputStream", "UTF_8", "catch", "Exception", "e", "if", "log", "isDebugEnabled"], ["Clientside", "test", "Test", "public", "void", "testOutboundHandshake", "log", "info", "ntestOutboundHandshake", "OutboundHandshake", "out", "new", "OutboundHandshake", "set", "the", "handshake", "type", "out", "setHandshakeType", "RTMPConnection", "RTMP_NON_ENCRYPTED", "called", "initially", "with", "null", "input", "which", "triggers", "creation", "of", "C1", "IoBuffer", "C1", "hs", "doHandshake", "null"], ["Creates", "a", "cached", "response", "br", "If", "no", "cached", "data", "is", "found", "the", "responseObject", "is", "returned", "br", "If", "cached", "data", "is", "found", "code", "null", "code", "is", "returned", "instead", "param", "req", "original", "request", "param", "etagFromResources", "new", "etags", "param", "responseObject", "the", "response", "object", "return", "private", "JsonObject", "makeCachedResponse", "HttpServerRequest", "req", "String", "etagFromResources", "JsonObject", "responseObject", "JsonObject", "result", "responseObject", "if", "log", "isTraceEnabled", "log", "trace", "Header", "from", "request", "req", "headers", "get", "IF_NONE_MATCH_HEADER"], ["Override", "public", "void", "handleError", "Throwable", "t", "if", "t", "instanceof", "UndeclaredThrowableException", "Throwable", "source", "UndeclaredThrowableException", "t", "getUndeclaredThrowable", "if", "source", "instanceof", "OutOfMemoryError"], ["private", "void", "registerNatsEnvironment", "GenericContainer", "natsContainer", "ConfigurableEnvironment", "environment", "NatsProperties", "properties", "Integer", "clientMappedPort", "natsContainer", "getMappedPort", "properties", "getClientPort", "Integer", "httpMonitorMappedPort", "natsContainer", "getMappedPort", "properties", "getHttpMonitorPort", "Integer", "routeConnectionsMappedPort", "natsContainer", "getMappedPort", "properties", "getRouteConnectionsPort", "String", "host", "natsContainer", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "nats", "host", "host", "map", "put", "embedded", "nats", "port", "clientMappedPort", "map", "put", "embedded", "nats", "httpMonitorPort", "httpMonitorMappedPort", "map", "put", "embedded", "nats", "routeConnectionsPort", "routeConnectionsMappedPort"], ["Implementation", "methods", "protected", "void", "registerMBean", "ObjectName", "name", "if", "name", "null", "try", "AnnotatedMBean", "registerMBean", "managementContext", "mbean", "name", "catch", "Throwable", "e"], ["Override", "public", "Object", "invoke", "Object", "proxy", "Method", "method", "Object", "args", "throws", "Throwable", "String", "message", "formattedMessages", "DocumentedUtils", "extractFormattedMessage", "method", "args", "DocumentedUtils", "extractMessage", "method", "if", "method", "getAnnotation", "Warning", "class", "null", "errors", "incrementAndGet"], ["private", "void", "stopDatabase", "StandaloneDatabaseContext", "context", "var", "namedDatabaseId", "context", "database", "getNamedDatabaseId", "try"], ["private", "boolean", "accept", "InputFile", "indexedFile", "InputFileFilter", "extensions", "Might", "trigger", "generation", "of", "metadata", "for", "InputFileFilter", "filter", "filters", "if", "filter", "accept", "indexedFile"], ["Test", "public", "void", "testValidate", "log", "info", "ntestValidate", "client", "side", "handshake", "handler", "OutboundHandshake", "out", "new", "OutboundHandshake", "set", "the", "handshake", "type", "out", "setHandshakeType", "RTMPConnection", "RTMP_NON_ENCRYPTED", "try", "SO12", "IoBuffer", "S0S1S2", "IoBuffer", "allocate", "S0S1S2", "put", "serverS0S1S2part1", "S0S1S2", "put", "serverS0S1S2part2", "S0S1S2", "flip", "strip", "the", "type", "byte", "S0S1S2", "get"], ["public", "Pair", "String", "String", "generateNewDN", "String", "baseDn", "final", "String", "inum", "generateInum", "final", "StringBuilder", "dnSb", "new", "StringBuilder", "inum", "dnSb", "append", "inum", "append", "append", "baseDn", "final", "String", "dn", "dnSb", "toString"], ["public", "static", "Server", "create", "Path", "socketPath", "throws", "IOException", "Files", "createDirectories", "socketPath", "getParent", "var", "address", "UnixDomainSocketAddress", "of", "socketPath", "ServerSocketChannel", "ch", "null", "try", "ch", "ServerSocketChannel", "open", "StandardProtocolFamily", "UNIX", "ch", "bind", "address"], ["Override", "public", "void", "failToRecoverTransactionsAfterCommit", "Throwable", "t", "LogEntryCommit", "commitEntry", "LogPosition", "recoveryToPosition"], ["public", "void", "store", "ServerInfo", "serverInfo", "var", "serverInfoFilePath", "getServerInfoFilePath", "FileUtils", "mkdirs", "serverInfoFilePath", "getParent", "var", "serverInfoToStore", "adapt", "serverInfo"], ["Override", "public", "void", "onWSMessage", "WSMessage", "message", "assume", "we", "have", "text", "String", "msg", "new", "String", "message", "getPayload", "array"], ["public", "byte", "encrypt", "byte", "cleartext", "String", "algorithm", "String", "javaSecurityAPIProvider", "throws", "CryptoException", "try", "Cipher", "cipher", "if", "StringUtils", "isBlank", "javaSecurityAPIProvider", "cipher", "Cipher", "getInstance", "algorithm", "else", "cipher", "Cipher", "getInstance", "algorithm", "javaSecurityAPIProvider", "Certificate", "certificate", "getCertificateFromStore", "if", "log", "isDebugEnabled", "log", "debug", "Certificate", "used", "for", "encrypting", "certificate", "cipher", "init", "Cipher", "ENCRYPT_MODE", "certificate", "getPublicKey", "byte", "ciphertext", "cipher", "doFinal", "cleartext", "if", "log", "isDebugEnabled"], ["private", "void", "registrationFailed", "Throwable", "cause"], ["Override", "public", "void", "warn", "Throwable", "cause"], ["Override", "public", "void", "resourceRemoved", "String", "resourceUri", "if", "configResourceUri", "null", "configResourceUri", "equals", "resourceUri"], ["Creates", "a", "large", "byte", "buffer", "and", "fills", "it", "with", "char", "X", "except", "for", "the", "last", "byte", "it", "gets", "value", "0x0", "assigned", "param", "size", "the", "size", "of", "the", "array", "to", "be", "created", "return", "protected", "byte", "createLargeByteBuffer", "int", "size", "byte", "buffer", "new", "byte", "size", "for", "int", "i", "i", "size", "i", "buffer", "i", "char", "X", "insert", "trailing", "0x0", "buffer", "size"], ["Bean", "name", "BEAN_NAME_EMBEDDED_CASSANDRA", "destroyMethod", "stop", "public", "CassandraContainer", "cassandra", "ConfigurableEnvironment", "environment", "CassandraProperties", "properties", "Optional", "Network", "network", "throws", "Exception", "CassandraContainer", "cassandra", "new", "CassandraContainer", "ContainerUtils", "getDockerImageName", "properties", "withExposedPorts", "properties", "getPort", "network", "ifPresent", "cassandra", "withNetwork", "cassandra", "CassandraContainer", "configureCommonsAndStart", "cassandra", "properties", "log", "initKeyspace", "properties", "cassandra", "Map", "String", "Object", "cassandraEnv", "registerCassandraEnvironment", "environment", "cassandra", "properties"], ["Override", "public", "BlockStore", "getGengsisBlock", "if", "return", "null", "BlockStore", "gengsisBlock", "new", "BlockStore", "this", "Hex", "decode", "", "Sha256Hash", "merkleHash", "gengsisBlock", "getBlock", "buildMerkleHash", "if", "log", "isDebugEnabled"], ["private", "P384KeyPair", "createAndStoreNewKeyPair", "char", "passphrase", "Path", "p12File", "throws", "IOException", "var", "keyPair", "P384KeyPair", "generate", "var", "tmpFile", "p12File", "resolveSibling", "p12File", "getFileName", "toString", "tmp", "if", "Files", "exists", "tmpFile"], ["Get", "CSV", "from", "Yahoo", "log", "info", "Sending", "request", "url", "URL", "request", "new", "URL", "url", "RedirectableRequest", "redirectableRequest", "new", "RedirectableRequest", "request", "redirectableRequest", "setConnectTimeout", "YahooFinance", "CONNECTION_TIMEOUT", "redirectableRequest", "setReadTimeout", "YahooFinance", "CONNECTION_TIMEOUT", "Map", "String", "String", "requestProperties", "new", "HashMap", "String", "String", "requestProperties", "put", "Cookie", "CrumbManager", "getCookie", "URLConnection", "connection", "redirectableRequest", "openConnection", "requestProperties", "InputStreamReader", "is", "new", "InputStreamReader", "connection", "getInputStream", "BufferedReader", "br", "new", "BufferedReader", "is", "skip", "the", "first", "line", "br", "readLine", "Parse", "CSV", "for", "String", "line", "br", "readLine", "line", "null", "line", "br", "readLine"], ["\u9488\u5bf9", "redis", "\u6570\u636e\u5931\u6548\u4e8b\u4ef6", "\u8fdb\u884c\u6570\u636e\u5904\u7406", "param", "message", "key", "param", "pattern", "pattern", "Override", "public", "void", "onMessage", "Message", "message", "byte", "pattern", "\u83b7\u53d6\u5230\u5931\u6548\u7684", "key", "String", "expiredKey", "message", "toString", "if", "expiredKey", "contains", "JwtConstants", "LAST_ONLINE", "String", "account", "expiredKey", "replace", "JwtConstants", "LAST_ONLINE"], ["Run", "a", "simple", "command", "that", "should", "return", "a", "single", "line", "on", "stdout", "param", "command", "return", "CheckForNull", "private", "String", "runSimpleCommand", "Command", "command", "List", "String", "stdOut", "new", "ArrayList", "List", "String", "stdErr", "new", "ArrayList"], ["doc", "comment", "inherited", "from", "LogWriter", "public", "void", "logRequest", "Logger", "log", "Object", "command"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "google", "storage", "ToxiproxyContainer", "ContainerProxy", "googleStorageContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_GOOGLE_STORAGE_SERVER", "GenericContainer", "storageServer", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "storageServer", "StorageProperties", "PORT", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "google", "storage", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "google", "storage", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "google", "storage", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedGoogleStorageToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["private", "void", "checkStaleTerminatedTransaction", "MonitoredTransaction", "transaction", "long", "nowNanos", "long", "terminationTimeoutNanos", "transaction", "terminationMark", "ifPresent", "mark", "if", "mark", "isMarkedAsStale", "return", "final", "var", "nanosSinceTermination", "nowNanos", "mark", "getTimestampNanos", "if", "nanosSinceTermination", "terminationTimeoutNanos", "log", "warn", "Transaction", "s", "has", "been", "marked", "for", "termination", "for", "d", "seconds", "it", "may", "have", "been", "leaked", "s", "transaction", "getIdentifyingDescription", "TimeUnit", "NANOSECONDS", "toSeconds", "nanosSinceTermination", "buildTraceOrHelpMessage", "transaction", "transactionInitialisationTrace", "mark", "markAsStale"], ["public", "CarbonServerConfigurationService", "getServerConfigurationService", "if", "this", "serverConfigurationService", "null", "String", "msg", "Before", "activating", "Carbon", "Core", "bundle", "an", "instance", "of", "ServerConfigurationService", "should", "be", "in", "existance"], ["public", "void", "reportTotalDataSize", "double", "totalDataSizeGB", "double", "this", "totalDataSize"], ["Override", "public", "void", "recoveryCleanupStarted", "Path", "indexFile", "IndexDescriptor", "index"], ["if", "clazz", "null", "if", "ClusterManager", "isClusteringEnabled", "Log", "debug", "Clustering", "is", "enabled", "Falling", "back", "to", "non", "cached", "provider", "clazz", "DefaultPubSubPersistenceProvider", "class", "else", "clazz", "CachingPubsubPersistenceProvider", "class", "Check", "if", "we", "need", "to", "reset", "the", "provider", "class", "if", "provider", "null", "clazz", "equals", "provider", "getClass", "if", "provider", "null", "provider", "shutdown", "provider", "null", "try"], ["Test", "timeout", "public", "void", "tesIndividualAcksWithClosedConsumerAndAuditSync", "throws", "Exception", "produceSomeMessages", "MSG_COUNT", "QueueViewMBean", "queueView", "getProxyToQueue", "getDestinationName", "assertEquals", "MSG_COUNT", "queueView", "getQueueSize", "connection", "createConnection", "Session", "session", "connection", "createSession", "false", "ActiveMQSession", "INDIVIDUAL_ACKNOWLEDGE", "Queue", "queue", "session", "createQueue", "getDestinationName", "MessageConsumer", "consumer", "session", "createConsumer", "queue", "connection", "start", "Consume", "all", "messages", "with", "no", "ACK", "for", "int", "i", "i", "MSG_COUNT", "i", "Message", "message", "consumer", "receive", "assertNotNull", "message"], ["public", "void", "update", "String", "projectKey", "UnaryOperator", "AnalyzerConfiguration", "updater", "var", "projectFilePath", "getAnalyzerConfigFilePath", "projectKey", "FileUtils", "mkdirs", "projectFilePath", "getParent", "rwLock", "write", "Sonarlint", "AnalyzerConfiguration", "config", "try", "config", "readConfiguration", "projectFilePath", "catch", "StorageException", "e", "LOG", "warn", "Unable", "to", "read", "storage", "Creating", "a", "new", "one", "e", "config", "Sonarlint", "AnalyzerConfiguration", "newBuilder", "build", "writeToFile", "adapt", "updater", "apply", "adapt", "config", "projectFilePath"], ["Override", "public", "void", "doParse", "InputStream", "in", "String", "baseUri", "RDFNotation", "notation", "boolean", "keepBNode", "RDFCallback", "callback", "throws", "ParserException", "try", "create", "a", "temp", "Path", "tempFile", "Files", "createTempFile", "hdtjava", "reader", "hdt"], ["private", "void", "getOffices", "throws", "AxisFault", "XPathExpressionException", "OMElement", "payload", "fac", "createOMElement", "listOffices", "omNs", "OMElement", "result", "new", "AxisServiceClient", "sendReceive", "payload", "getServiceUrlHttp", "serviceName", "listOffices", "Assert", "assertNotNull", "result", "Response", "message", "null"], ["if", "StringUtils", "isEmpty", "alias", "aliasId", "requestFocus", "DailogUtil", "showTipDailogCenter", "\u522b\u540d\u4e0d\u80fd\u4e3a\u7a7a", "getThisStage", "return", "\u4fee\u6539\u5bc6\u7801\u5e76\u5224\u65ad\u7ed3\u679c", "AccountKit", "accountKit", "InchainInstance", "getInstance", "getAccountKit", "Result", "result", "accountKit", "updateAlias", "alias", "if", "result", "isSuccess", "DailogUtil", "showTipDailogCenter", "result", "getMessage", "getThisStage", "resetAndclose", "if", "callback", "null", "callback", "ok", "null", "else"], ["Override", "public", "Response", "toResponse", "Exception", "e", "if", "e", "instanceof", "WebApplicationException", "return", "WebApplicationException", "e", "getResponse"], ["public", "void", "detect", "Nullable", "Path", "configuredNodejsPath", "detectedNodePath", "locateNode", "configuredNodejsPath", "if", "detectedNodePath", "null", "LOG", "debug", "Checking", "node", "version", "var", "command", "Command", "create", "detectedNodePath", "toString", "addArgument", "v", "var", "nodeVersionStr", "runSimpleCommand", "command", "if", "nodeVersionStr", "null", "var", "matcher", "NODEJS_VERSION_PATTERN", "matcher", "nodeVersionStr", "if", "matcher", "matches", "var", "version", "matcher", "group", "nodeJsVersion", "Version", "create", "version", "LOG", "debug", "Detected", "node", "version", "nodeJsVersion", "else"], ["protected", "boolean", "isReady", "String", "commandName", "getContainerType", "String", "containerId", "waitStrategyTarget", "getContainerId", "String", "checkCommand", "getCheckCommand"], ["private", "Object", "doEvaluate", "final", "String", "expression", "throws", "Exception", "assert", "expression", "null"], ["Override", "public", "User", "mapUser", "OAuth2UserRequest", "userRequest", "OAuth2User", "oAuth2User", "if", "log", "isDebugEnabled"], ["Nullable", "public", "static", "SecurityPlan", "forPlan", "Nonnull", "final", "String", "apiId", "Nonnull", "Plan", "plan", "Nonnull", "PolicyManager", "policyManager", "Nonnull", "ExecutionPhase", "executionPhase", "final", "SecurityPolicy", "policy", "SecurityPolicyFactory", "forPlan", "apiId", "plan", "policyManager", "executionPhase", "if", "policy", "null", "return", "new", "SecurityPlan", "plan", "getId", "policy", "plan", "getSelectionRule"], ["private", "void", "registerNeo4jEnvironment", "Neo4jContainer", "neo4j", "ConfigurableEnvironment", "environment", "Neo4jProperties", "properties", "Integer", "httpsPort", "neo4j", "getMappedPort", "properties", "httpsPort", "Integer", "httpPort", "neo4j", "getMappedPort", "properties", "httpPort", "Integer", "boltPort", "neo4j", "getMappedPort", "properties", "boltPort", "String", "host", "neo4j", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "neo4j", "httpsPort", "httpsPort", "map", "put", "embedded", "neo4j", "httpPort", "httpPort", "map", "put", "embedded", "neo4j", "boltPort", "boltPort", "map", "put", "embedded", "neo4j", "host", "host", "map", "put", "embedded", "neo4j", "password", "properties", "getPassword", "map", "put", "embedded", "neo4j", "user", "properties", "getUser"], ["public", "static", "SecurityPolicy", "forPlan", "final", "String", "apiId", "final", "Plan", "plan", "final", "PolicyManager", "policyManager", "final", "ExecutionPhase", "executionPhase", "PlanSecurity", "planSecurity", "plan", "getSecurity", "final", "String", "security", "planSecurity", "getType", "if", "security", "null", "return", "null", "String", "policyName", "security", "toLowerCase", "replaceAll", "_", "final", "Policy", "policy", "policyManager", "create", "executionPhase", "new", "PolicyMetadata", "policyName", "planSecurity", "getConfiguration", "if", "policy", "instanceof", "SecurityPolicy", "return", "SecurityPolicy", "policy"], ["private", "void", "addEmployeeBatchRequest", "throws", "AxisFault", "XPathExpressionException", "OMElement", "payload", "fac", "createOMElement", "addEmployee_batch_req", "omNs", "for", "int", "i", "i", "i", "OMElement", "batchRequest", "fac", "createOMElement", "addEmployee", "omNs", "OMElement", "empNo", "fac", "createOMElement", "employeeNumber", "omNs", "empNo", "setText", "i", "batchRequest", "addChild", "empNo", "OMElement", "email", "fac", "createOMElement", "email", "omNs", "email", "setText", "testemail", "wso2", "com", "batchRequest", "addChild", "email", "payload", "addChild", "batchRequest", "if", "log", "isDebugEnabled"], ["private", "InterruptedIOException", "dealWithInterrupt", "InterruptedException", "e", "if", "LOG", "isDebugEnabled"], ["public", "static", "String", "getSessionId", "random", "int", "from", "int", "part1", "rnd", "nextInt", "thread", "safe", "long", "part", "long", "part2", "ThreadLocalRandom", "current", "nextLong", "current", "time", "in", "millis", "long", "part3", "System", "currentTimeMillis", "generate", "uuid", "type", "id", "String", "sessionId", "createHash", "part1", "part2", "part3"], ["private", "Stream", "Settings", "tryLoad", "Path", "path"], ["case", "COUNTRY", "mapKey", "MAP_TYPES", "get", "country", "key", "break", "case", "PUBLISHING_COUNTRY", "mapKey", "MAP_TYPES", "get", "publishingCountry", "key", "break", "default", "mapKey", "ALL_MAP_KEY", "Capabilities", "CapabilitiesBuilder", "builder", "Capabilities", "CapabilitiesBuilder", "newBuilder", "DatedVectorTile", "west", "tileResource", "getTile", "mapKey", "null", "EPSG", "null", "null", "true", "null", "DatedVectorTile", "east", "tileResource", "getTile", "mapKey", "null", "EPSG", "null", "null", "true", "null", "builder", "collect", "west", "tile", "ZOOM_0_WEST_NW", "ZOOM_0_WEST_SE", "west", "date", "builder", "collect", "east", "tile", "ZOOM_0_EAST_NW", "ZOOM_0_EAST_SE", "east", "date", "Capabilities", "capabilities", "builder", "build"], ["void", "exercise", "WebDriver", "driver", "String", "sutUrl", "String", "expectedTitleContains", "throws", "Exception", "driver", "get", "sutUrl", "Wait", "WebDriver", "wait", "new", "WebDriverWait", "driver", "Duration", "ofSeconds", "wait", "until", "d", "d", "getTitle", "contains", "expectedTitleContains", "URL", "dockerSessionUrl", "wdm", "getDockerNoVncUrl", "driver"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "minio", "ToxiproxyContainer", "ContainerProxy", "minioContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "MINIO_BEAN_NAME", "GenericContainer", "minio", "ConfigurableEnvironment", "environment", "MinioProperties", "properties", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "minio", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "minio", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "minio", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "minio", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedMinioToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Override", "public", "void", "onWebSocketClose", "int", "arg0", "String", "arg1", "try", "if", "protocolLock", "tryLock", "protocolLock", "tryLock", "ORDERLY_CLOSE_TIMEOUT", "TimeUnit", "SECONDS"], ["private", "void", "registerEnvironment", "ToxiproxyContainer", "container", "ConfigurableEnvironment", "environment", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "toxiproxy", "host", "container", "getHost", "map", "put", "embedded", "toxiproxy", "controlPort", "container", "getControlPort"], ["Override", "public", "void", "visitUnsignedInteger", "String", "name", "long", "id", "long", "value"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "redis", "ToxiproxyContainer", "ContainerProxy", "redisContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_REDIS", "GenericContainer", "redis", "RedisProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "redis", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "redis", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "redis", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "redis", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedRedisToxiProxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Filter", "sectorIdentifierFilter", "Filter", "createEqualityFilter", "oxSectorIdentifier", "sectorIdentifier", "Filter", "userInumFilter", "Filter", "createEqualityFilter", "oxAuthUserId", "userInum", "filter", "Filter", "createANDFilter", "sectorIdentifierFilter", "userInumFilter", "else", "Filter", "sectorIdentifierFilter", "Filter", "createEqualityFilter", "oxSectorIdentifier", "sectorIdentifier", "Filter", "clientIdFilter", "Filter", "createEqualityFilter", "oxAuthClientId", "clientId", "Filter", "userInumFilter", "Filter", "createEqualityFilter", "oxAuthUserId", "userInum", "filter", "Filter", "createANDFilter", "sectorIdentifierFilter", "clientIdFilter", "userInumFilter", "List", "PairwiseIdentifier", "entries", "ldapEntryManager", "findEntries", "baseDnForPairwiseIdentifiers", "PairwiseIdentifier", "class", "filter", "if", "entries", "null", "entries", "isEmpty", "if", "more", "then", "one", "entry", "then", "it", "s", "problem", "non", "deterministic", "behavior", "id", "must", "be", "unique", "if", "entries", "size", "log", "error", "Found", "more", "then", "one", "pairwise", "identifier", "by", "sector", "identifier", "sectorIdentifier", "for", "PairwiseIdentifier", "pairwiseIdentifier", "entries"], ["protected", "void", "doExecute", "throws", "Exception", "ServerProxy", "server", "new", "ServerProxy", "hostname", "port", "username", "password", "TODO", "Maybe", "we", "just", "need", "isStarted", "not", "need", "to", "be", "fully", "started", "if", "server", "isFullyStarted", "String", "msg", "Server", "does", "not", "appear", "to", "be", "started", "if", "failIfNotStarted", "throw", "new", "MojoExecutionException", "msg", "else"], ["private", "static", "void", "executeSensor", "SensorContext", "context", "Sensor", "sensor", "DefaultSensorDescriptor", "descriptor", "var", "sensorName", "descriptor", "name", "null", "descriptor", "name", "describe", "sensor"], ["throws", "ServletException", "SuppressWarnings", "deprecation", "Override", "public", "void", "start", "throws", "ServletException", "log", "info", "Loading", "RTMPT", "context", "rtmptEngine", "new", "StandardEngine", "rtmptEngine", "setName", "red5RTMPTEngine", "rtmptEngine", "setDefaultHost", "host", "getName", "rtmptEngine", "setRealm", "embedded", "getEngine", "getRealm", "Service", "service", "new", "StandardService", "service", "setName", "red5RTMPTEngine", "service", "setContainer", "rtmptEngine", "add", "the", "valves", "to", "the", "host", "for", "Valve", "valve", "valves"], ["private", "void", "handleException", "String", "msg", "Exception", "ex"], ["Override", "public", "void", "doParse", "String", "rarFile", "String", "baseUri", "RDFNotation", "notation", "boolean", "keepBNode", "RDFCallback", "callback", "throws", "ParserException", "try", "String", "cmdList1", "Arrays", "copyOf", "cmdList", "cmdList", "length", "cmdList1", "rarFile", "ProcessBuilder", "listProcessBuilder", "new", "ProcessBuilder", "cmdList1", "listProcess", "redirectInput", "tempFile", "Process", "processList", "listProcessBuilder", "start", "BufferedReader", "reader", "new", "BufferedReader", "new", "InputStreamReader", "processList", "getInputStream", "UTF_8", "String", "cmdExtract", "Arrays", "copyOf", "cmdExtractFile", "cmdExtractFile", "length", "cmdExtract", "rarFile", "String", "fileName", "Read", "file", "name", "from", "list", "while", "fileName", "reader", "readLine", "null", "FIXME", "Create", "several", "processes", "in", "background"], ["inheritDoc", "Override", "public", "ITagReader", "getReader", "throws", "IOException", "MP4Reader", "reader", "null", "IoBuffer", "fileData", "null", "String", "fileName", "file", "getName", "if", "file", "exists"], ["private", "static", "List", "PatternHolder", "extractAllowedTypes", "JsonObject", "constraintObj", "List", "PatternHolder", "allowedTypes", "new", "ArrayList", "JsonArray", "allowedTypesArray", "constraintObj", "getJsonArray", "ALLOWED_TYPES", "if", "allowedTypesArray", "null", "log", "warn", "No", "array", "found", "in", "configuration", "ALLOWED_TYPES", "return", "allowedTypes", "for", "Object", "allowedType", "allowedTypesArray", "String", "allowedTypeStr", "String", "allowedType", "if", "StringUtils", "isNotEmptyTrimmed", "allowedTypeStr", "try", "allowedTypes", "add", "new", "PatternHolder", "Pattern", "compile", "allowedTypeStr", "pattern", "catch", "PatternSyntaxException", "patternException"], ["protected", "String", "encodeResponse", "Element", "response", "throws", "IOException", "String", "responseMessage", "DOM2Writer", "nodeToString", "response"], ["Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "if", "log", "isDebugEnabled"], ["private", "void", "logClusterInfo", "try", "Jedis", "jedis", "createJedis", "String", "clusterInfo", "jedis", "clusterInfo", "String", "info", "jedis", "info", "List", "String", "config", "jedis", "configGet", "String", "clusterNodes", "jedis", "clusterNodes"], ["Wait", "waitFor", "new", "Wait", "Condition", "Override", "public", "boolean", "isSatisified", "throws", "Exception", "return", "received", "get", "numIterations", "consumer", "close", "connection", "close", "RegionBroker", "regionBroker", "RegionBroker", "broker", "getRegionBroker", "Queue", "queue", "Queue", "regionBroker", "getQueueRegion", "getDestinationMap", "get", "destination", "StoreQueueCursor", "storeQueueCursor", "StoreQueueCursor", "queue", "getMessages", "PendingMessageCursor", "queueStorePrefetch", "storeQueueCursor", "getPersistent"], ["protected", "void", "echo", "String", "text"], ["public", "void", "handleEvent", "Event", "event", "try", "boolean", "minified", "htmlLibraryManager", "isMinifyEnabled", "String", "path", "String", "event", "getProperty", "SlingConstants", "PROPERTY_PATH"], ["Override", "public", "void", "onSharedObjectUpdate", "ISharedObjectBase", "so", "Map", "String", "Object", "values"], ["private", "boolean", "validateSignoutEndpointAddress", "Application", "serviceConfig", "String", "endpointAddress", "if", "serviceConfig", "getLogoutEndpoint", "null", "serviceConfig", "getCompiledLogoutEndpointConstraint", "null", "LOG", "error", "Either", "the", "logoutEndpoint", "or", "the", "logoutEndpointConstraint", "configuration", "values", "must", "be", "specified", "for", "the", "application", "else", "if", "serviceConfig", "getLogoutEndpoint", "null", "serviceConfig", "getLogoutEndpoint", "equals", "endpointAddress"], ["private", "void", "prepareContainerConfiguration", "GenericContainer", "container", "throws", "IOException", "String", "containerEndpoint", "buildContainerEndpoint", "container"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "vertica", "ToxiproxyContainer", "ContainerProxy", "verticaContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_VERTICA", "GenericContainer", "embeddedVertica", "ConfigurableEnvironment", "environment", "VerticaProperties", "verticaProperties", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "embeddedVertica", "verticaProperties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "vertica", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "vertica", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "vertica", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedVerticaToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Test", "groups", "wso2", "esb", "description", "Test", "return", "of", "the", "current", "time", "in", "milliseconds", "public", "void", "testSystemTime", "throws", "Exception", "OMElement", "response", "axis2Client", "sendSimpleStockQuoteRequest", "getProxyServiceURLHttp", "SYSTEM_TIME_TestProxy", "null", "Wso2", "assertNotNull", "response", "Time", "returned", "is", "Null", "DateFormat", "dateFormat", "new", "SimpleDateFormat", "HH", "mm", "Date", "date", "new", "Date"], ["Test", "public", "void", "testFLVReaderFileGenerateMetaData", "log", "info", "n", "testFLVReaderFileGenerateMetaData", "String", "paths", "new", "String", "target", "test", "classes", "fixtures", "stray", "flv", "try", "for", "String", "path", "paths", "File", "file", "Paths", "get", "path", "toFile", "if", "file", "exists", "file", "canRead", "log", "info", "Reading", "file", "getName", "FLVReader", "reader", "new", "FLVReader", "file", "true", "ITag", "tag", "null", "while", "reader", "hasMoreTags", "tag", "reader", "readTag", "if", "tag", "null", "tag", "getDataType"], ["public", "static", "void", "logResolved", "int", "deferred", "deferredCounter", "get", "int", "resolved", "resolvedCounter", "get"], ["Override", "public", "void", "resultReceived", "IPendingServiceCall", "call", "log", "info", "connectCallback", "ObjectMap", "map", "ObjectMap", "call", "getResult", "String", "code", "String", "map", "get", "code"], ["Override", "public", "void", "handle", "final", "RoutingContext", "ctx", "final", "LoggingHandler", "loggingHandler", "new", "LoggingHandler", "loggingResourceManager", "ctx", "request", "this", "eventBus", "final", "String", "targetUri", "urlPattern", "matcher", "ctx", "request", "uri", "replaceAll", "rule", "getPath", "replaceAll", "final", "Logger", "log", "RequestLoggerFactory", "getLogger", "StorageForwarder", "class", "ctx", "request", "if", "handleHeadersFilter", "ctx", "request", "return", "monitoringHandler", "updateRequestsMeter", "localhost", "ctx", "request", "uri", "monitoringHandler", "updateRequestPerRuleMonitoring", "ctx", "request", "rule", "getMetricName", "final", "long", "startTime", "monitoringHandler", "startRequestMetricTracking", "rule", "getMetricName", "ctx", "request", "uri"], ["Override", "public", "void", "storeXDeltaResponseHeader", "String", "xDeltaResponseNumber", "if", "log", "isTraceEnabled"], ["public", "void", "processSchemaQueue", "PendingChanged", "logResolved", "while", "processingQueue", "isEmpty", "CacheKey", "key", "processingQueue", "poll", "if", "key", "null"], ["Get", "the", "time", "zone", "for", "a", "specific", "exchange", "suffix", "param", "suffix", "suffix", "for", "the", "exchange", "in", "YahooFinance", "return", "time", "zone", "of", "the", "exchange", "public", "static", "TimeZone", "get", "String", "suffix", "if", "SUFFIX_TIMEZONES", "containsKey", "suffix", "return", "SUFFIX_TIMEZONES", "get", "suffix"], ["public", "void", "warning", "SAXParseException", "exception"], ["passwordId", "requestFocus", "DailogUtil", "showTipDailogCenter", "\u8f93\u5165\u7684\u5bc6\u7801\u97006\u4f4d\u6216\u4ee5\u4e0a", "\u4e14\u5305\u542b\u5b57\u6bcd\u548c\u6570\u5b57", "getThisStage", "return", "RadioButton", "radioButton", "RadioButton", "type", "getSelectedToggle", "String", "type", "radioButton", "getId", "\u4fee\u6539\u5bc6\u7801\u5e76\u5224\u65ad\u7ed3\u679c", "AccountKit", "accountKit", "InchainInstance", "getInstance", "getAccountKit", "Result", "result", "accountKit", "changeWalletPassword", "oldPassword", "password", "null", "mgpwd", "equals", "type", "if", "result", "isSuccess", "oldPasswordId", "setText", "passwordId", "setText", "repeatId", "setText", "DailogUtil", "showTipDailogCenter", "result", "getMessage", "getThisStage", "else"], ["ParameterizedTest", "MethodSource", "cacheProvider", "void", "testCache", "DriverManagerType", "driverManagerType", "String", "driverName", "String", "driverVersion", "Architecture", "arch", "OperatingSystem", "os", "throws", "Exception", "WebDriverManager", "wdm", "WebDriverManager", "getInstance", "driverManagerType", "avoidResolutionCache", "forceDownload", "operatingSystem", "os", "driverVersion", "driverVersion", "wdm", "setup", "CacheHandler", "cacheHandler", "new", "CacheHandler", "new", "Config", "Optional", "String", "driverFromCache", "cacheHandler", "getDriverFromCache", "driverVersion", "driverName", "driverManagerType", "arch", "os", "name"], ["private", "Void", "failure", "Throwable", "t", "stats", "recordProducerFailure"], ["private", "void", "registerMemSqlEnvironment", "GenericContainer", "memsql", "ConfigurableEnvironment", "environment", "MemSqlProperties", "properties", "Integer", "mappedPort", "memsql", "getMappedPort", "properties", "port", "String", "host", "memsql", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "memsql", "port", "mappedPort", "map", "put", "embedded", "memsql", "host", "host", "map", "put", "embedded", "memsql", "schema", "properties", "getDatabase", "map", "put", "embedded", "memsql", "user", "properties", "getUser", "map", "put", "embedded", "memsql", "password", "properties", "getPassword"], ["Override", "public", "void", "contextDestroyed", "ServletContextEvent", "sce"], ["Override", "public", "BroadcastResult", "broadcast", "final", "T", "message", "\u5e7f\u64ad\u7ed3\u679c", "final", "BroadcastResult", "result", "new", "BroadcastResult", "int", "minConnections", "peerKit", "getBroadcasterMinConnectionCount", "if", "log", "isDebugEnabled"], ["inheritDoc", "Override", "public", "boolean", "addData", "IoBuffer", "data", "if", "data", "hasRemaining", "mark", "int", "start", "data", "position", "ensure", "we", "are", "at", "the", "beginning", "data", "rewind", "byte", "frameType", "data", "get"], ["Override", "public", "void", "exec", "int", "executionCounter", "List", "String", "args", "RedisUtils", "toPayload", "luaScriptState", "getSha", "keys", "size", "keys", "arguments", "redisAPI", "evalsha", "args", "event", "if", "event", "succeeded", "String", "value", "event", "result", "toString", "if", "log", "isTraceEnabled", "log", "trace", "UpdateStatsRedisCommand", "lua", "script", "got", "result", "value", "promise", "complete", "UpdateStatisticsResult", "fromString", "value", "UpdateStatisticsResult", "ERROR", "else", "String", "message", "event", "cause", "getMessage", "if", "message", "null", "message", "startsWith", "NOSCRIPT", "log", "warn", "UpdateStatsRedisCommand", "script", "couldn", "t", "be", "found", "reload", "it"], ["public", "static", "String", "runAndWaitArray", "boolean", "logCommand", "File", "folder", "String", "command", "String", "commandStr", "Arrays", "toString", "command", "if", "logCommand"], ["Encode", "notification", "event", "and", "fill", "given", "byte", "buffer", "param", "out", "Byte", "buffer", "to", "fill", "param", "command", "Notification", "event", "Override", "protected", "void", "encodeCommand", "IoBuffer", "out", "ICommand", "command"], ["private", "void", "checkArm", "WebDriverManager", "wdm", "wdm", "driverVersion", "mac", "arch64", "setup", "String", "driverPath", "wdm", "getDownloadedDriverPath"], ["public", "ClientAuthorization", "find", "String", "userInum", "String", "clientId", "prepareBranch", "final", "String", "id", "createId", "userInum", "clientId", "try", "if", "appConfiguration", "getClientAuthorizationBackwardCompatibility", "return", "findToRemoveIn50", "userInum", "clientId", "return", "ldapEntryManager", "find", "ClientAuthorization", "class", "createDn", "createId", "userInum", "clientId", "catch", "EntryPersistenceException", "e"], ["Override", "public", "List", "Flow", "findByReference", "final", "FlowReferenceType", "flowReferenceType", "final", "String", "referenceId", "try"], ["static", "void", "prepareParentNoMountPoint", "Path", "mountPoint", "throws", "MountPointPreparationException", "Path", "hideaway", "getHideaway", "mountPoint", "var", "mpExists", "Files", "exists", "mountPoint", "LinkOption", "NOFOLLOW_LINKS", "var", "hideExists", "Files", "exists", "hideaway", "LinkOption", "NOFOLLOW_LINKS", "TODO", "possible", "improvement", "by", "just", "deleting", "an", "_empty_", "hideaway", "if", "mpExists", "hideExists", "both", "resources", "exist", "whatever", "type", "throw", "new", "MountPointPreparationException", "new", "FileAlreadyExistsException", "hideaway", "toString", "else", "if", "mpExists", "hideExists", "neither", "mountpoint", "nor", "hideaway", "exist", "throw", "new", "MountPointPreparationException", "new", "NoSuchFileException", "mountPoint", "toString", "else", "if", "mpExists", "only", "hideaway", "exists", "checkIsDirectory", "hideaway"], ["Override", "public", "void", "onException", "JMSException", "exception"], ["public", "static", "Container", "ExecResult", "executeAndCheckExitCode", "ContainerState", "container", "String", "command", "try", "Container", "ExecResult", "execResult", "container", "execInContainer", "command"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "localstack", "ToxiproxyContainer", "ContainerProxy", "localstackContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_LOCALSTACK", "LocalStackContainer", "localStack", "LocalStackProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "localStack", "properties", "getEdgePort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "localstack", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "localstack", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "localstack", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedLocalstackToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["return", "else", "if", "validPassword", "password", "passwordId", "requestFocus", "DailogUtil", "showTipDailogCenter", "\u8f93\u5165\u7684\u5bc6\u7801\u97006\u4f4d\u6216\u4ee5\u4e0a", "\u4e14\u5305\u542b\u5b57\u6bcd\u548c\u6570\u5b57", "getThisStage", "return", "\u4fee\u6539\u5bc6\u7801\u5e76\u5224\u65ad\u7ed3\u679c", "AccountKit", "accountKit", "InchainInstance", "getInstance", "getAccountKit", "Result", "result", "accountKit", "changeWalletPassword", "oldPassword", "password", "if", "result", "isSuccess", "oldPasswordId", "setText", "passwordId", "setText", "repeatId", "setText", "DailogUtil", "showTipDailogCenter", "result", "getMessage", "getThisStage", "else"], ["Produces", "application", "json", "public", "Response", "getConfiguration", "try", "if", "appConfiguration", "getDisableU2fEndpoint", "return", "Response", "status", "Status", "FORBIDDEN", "build", "final", "String", "baseEndpointUri", "appConfiguration", "getBaseEndpoint", "final", "U2fConfiguration", "conf", "new", "U2fConfiguration", "conf", "setVersion", "conf", "setIssuer", "appConfiguration", "getIssuer", "conf", "setRegistrationEndpoint", "baseEndpointUri", "fido", "u2f", "registration", "conf", "setAuthenticationEndpoint", "baseEndpointUri", "fido", "u2f", "authentication", "convert", "manually", "to", "avoid", "possible", "conflicts", "between", "resteasy", "providers", "e", "g", "jettison", "jackson", "final", "String", "entity", "ServerUtil", "asPrettyJson", "conf"], ["Optional", "URL", "buildUrl", "String", "driverVersion", "Config", "config", "Optional", "URL", "optionalUrl", "empty", "if", "config", "isUseMirror", "String", "downloadUrlPattern", "config", "getChromeDownloadUrlPattern", "OperatingSystem", "os", "config", "getOperatingSystem", "Architecture", "arch", "config", "getArchitecture", "String", "archLabel", "os", "isWin", "String", "builtUrl", "os", "isMac", "ARM64", "equals", "arch", "String", "format", "downloadUrlPattern", "driverVersion", "os", "getName", "String", "format", "_arm", "s", "archLabel", "String", "format", "downloadUrlPattern", "driverVersion", "os", "getName", "archLabel"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "azurite", "ToxiproxyContainer", "ContainerProxy", "azuriteTableContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "AZURITE_BEAN_NAME", "GenericContainer", "azurite", "AzuriteProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "azurite", "properties", "getTableStoragePort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "azurite", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "azurite", "toxiproxy", "tableStoragePort", "proxy", "getProxyPort", "map", "put", "embedded", "azurite", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedAzuriteTableToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["public", "Topic", "createTopic", "String", "topicName", "ProjectTopicName", "topic", "ProjectTopicName", "of", "projectId", "topicName", "try"], ["Override", "public", "Future", "Void", "removeQueueRequest", "String", "queue", "Promise", "Void", "promise", "Promise", "promise", "if", "StringUtils", "isEmpty", "queue", "promise", "fail", "Queue", "is", "not", "allowed", "to", "be", "empty", "return", "promise", "future", "redisAPI", "hdel", "Arrays", "asList", "QUEUE_REQUESTS", "queue", "reply", "if", "reply", "failed", "String", "message", "Failed", "to", "remove", "request", "for", "queue", "queue", "Cause", "logCause", "reply"], ["public", "boolean", "isValidEnrollmentCode", "String", "userName", "String", "enrollmentCode", "if", "enrollmentCode", "null", "log", "error", "In", "two", "step", "authentication", "workflow", "enrollment_code", "is", "mandatory", "return", "false", "User", "user", "userService", "getUser", "userName", "U2fConstants", "U2F_ENROLLMENT_CODE_ATTRIBUTE", "if", "user", "null"], ["private", "final", "void", "replayScheduler", "LegacyJobSchedulerImpl", "legacy", "JobSchedulerStoreImpl", "target", "throws", "Exception", "List", "LegacyJobImpl", "jobs", "legacy", "getAllJobs", "String", "schedulerName", "legacy", "getName", "for", "LegacyJobImpl", "job", "jobs"], ["Test", "timeout", "public", "void", "testSendMessage", "throws", "Exception", "Destination", "destination", "session", "createQueue", "getQueueName", "MessageConsumer", "consumer", "session", "createConsumer", "destination", "String", "frame", "CONNECT", "n", "login", "system", "n", "passcode", "manager", "n", "n", "Stomp", "NULL", "stompConnection", "sendFrame", "frame", "frame", "stompConnection", "receiveFrame", "assertTrue", "frame", "startsWith", "CONNECTED", "long", "timestamp", "System", "currentTimeMillis", "TimeUnit", "DAYS", "toMillis", "long", "expires", "timestamp", "TimeUnit", "SECONDS", "toMillis"], ["Override", "public", "void", "visitTemplateOpen", "String", "name", "long", "id"], ["Override", "public", "void", "visitASCII", "String", "name", "long", "id", "CharSequence", "value"], ["public", "static", "void", "main", "String", "args", "var", "printVersion", "Optional", "ofNullable", "args", "Streams", "either", "one", "element", "the", "args", "array", "or", "zero", "elements", "stream", "flatMap", "Arrays", "stream", "anyMatch", "arg", "v", "equals", "arg", "version", "equals", "arg", "if", "printVersion", "var", "appVer", "System", "getProperty", "cryptomator", "appVersion", "SNAPSHOT", "var", "buildNumber", "System", "getProperty", "cryptomator", "buildNumber", "SNAPSHOT", "Reduce", "noise", "for", "parsers", "by", "using", "System", "out", "directly", "System", "out", "printf", "Cryptomator", "version", "s", "build", "s", "n", "appVer", "buildNumber", "return", "int", "exitCode", "CRYPTOMATOR_COMPONENT", "application", "run", "args"], ["Override", "public", "boolean", "beforeExecute", "ForestRequest", "request", "log", "info", "invoke", "Base", "beforeExecute", "Object", "args", "request", "getArguments"], ["Override", "public", "void", "validatePlanTagsAgainstApiTags", "Set", "String", "planTags", "Set", "String", "apiTags", "if", "isEmpty", "planTags", "isEmpty", "apiTags", "apiTags", "stream", "anyMatch", "apiTag", "planTags", "contains", "apiTag"], ["Override", "public", "void", "resultReceived", "IPendingServiceCall", "call", "log", "info", "connectCallback", "ObjectMap", "map", "ObjectMap", "call", "getResult", "String", "code", "String", "map", "get", "code"], ["private", "void", "doLockMoney", "AccountKit", "accountKit", "Coin", "lockAmount", "long", "unlockTime", "try", "Result", "result", "accountKit", "lockMoney", "lockAmount", "unlockTime", "null", "null", "\u7528\u6237\u9501\u4ed3", "if", "result", "isSuccess", "DailogUtil", "showTipDailogCenter", "result", "getMessage", "getThisStage", "resetAndclose", "else"], ["\u5355\u5143\u6d4b\u8bd5\u7684\u521b\u4e16\u5757", "Override", "public", "BlockStore", "getGengsisBlock", "BlockStore", "gengsisBlock", "new", "BlockStore", "this", "Hex", "decode", "", "Sha256Hash", "merkleHash", "gengsisBlock", "getBlock", "buildMerkleHash", "if", "log", "isDebugEnabled"], ["Parameterized", "Parameters", "name", "public", "static", "Collection", "String", "getTestParameters", "throws", "IOException", "List", "String", "configUrls", "new", "ArrayList", "String", "configUrls", "add", "new", "String", "xbean", "src", "release", "conf", "activemq", "xml", "activemq", "xml", "String", "osName", "System", "getProperty", "os", "name"], ["Override", "public", "Future", "Set", "String", "cacheEntries", "Promise", "Set", "String", "promise", "Promise", "promise", "redisAPI", "smembers", "CACHED_REQUESTS", "reply", "if", "reply", "failed", "String", "message", "Failed", "to", "get", "cached", "requests", "Cause", "logCause", "reply"], ["Override", "public", "void", "uncaughtException", "Thread", "t", "Throwable", "e"], ["Override", "protected", "void", "startUp", "RAM", "directory", "storage", "by", "default", "if", "luceneStorageConfig", "null", "luceneStorageConfig", "equals", "Constants", "LUCENE_DIRECTORY_STORAGE_RAM", "directory", "new", "RAMDirectory", "log", "info", "Using", "RAM", "Lucene", "storage", "else", "if", "luceneStorageConfig", "equals", "Constants", "LUCENE_DIRECTORY_STORAGE_FILE", "File", "luceneDirectory", "DirectoryUtil", "getLuceneDirectory"], ["private", "void", "registerAerospikeEnvironment", "GenericContainer", "aerospike", "ConfigurableEnvironment", "environment", "AerospikeProperties", "properties", "Integer", "mappedPort", "aerospike", "getMappedPort", "properties", "port", "String", "host", "aerospike", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "aerospike", "host", "host", "map", "put", "embedded", "aerospike", "port", "mappedPort", "map", "put", "embedded", "aerospike", "namespace", "properties", "namespace"], ["private", "UiTheme", "parseUiTheme", "String", "uiThemeName", "try", "return", "UiTheme", "valueOf", "uiThemeName", "toUpperCase", "catch", "IllegalArgumentException", "e"], ["Looks", "for", "an", "error", "message", "param", "p_list", "error", "list", "param", "type", "The", "type", "of", "the", "error", "return", "Error", "message", "or", "code", "null", "code", "if", "not", "found", "private", "ErrorMessage", "getError", "List", "ErrorMessage", "p_list", "IErrorType", "type"], ["public", "void", "reportDataSizeByTopic", "int", "maxToReport", "LOG", "info", "Data", "Size", "By", "Topic", "List", "Map", "Entry", "String", "Long", "dataSizeByTopicSorted", "sortByValueDesc", "this", "dataSizeByTopic", "for", "int", "i", "i", "dataSizeByTopicSorted", "size", "i", "maxToReport", "i", "Map", "Entry", "String", "Long", "entry", "dataSizeByTopicSorted", "get", "i", "double", "dataSizeMB", "double", "entry", "getValue"], ["private", "P384KeyPair", "loadExistingKeyPair", "char", "passphrase", "Path", "p12File", "throws", "IOException"], ["protected", "void", "handleException", "String", "msg", "Exception", "e"], ["public", "SessionId", "getConnectSession", "HttpServletRequest", "httpRequest", "String", "cookieId", "cookieService", "getSessionIdFromCookie", "httpRequest"], ["inheritDoc", "Override", "public", "void", "exceptionCaught", "IoSession", "session", "Throwable", "cause", "throws", "Exception", "if", "log", "isDebugEnabled"], ["private", "void", "reportErrors", "Nullable", "Stage", "stage", "Nullable", "Throwable", "error", "if", "error", "null"], ["private", "NodeOrientation", "parseUiOrientation", "String", "uiOrientationName", "try", "return", "NodeOrientation", "valueOf", "uiOrientationName", "toUpperCase", "catch", "IllegalArgumentException", "e"], ["Override", "public", "void", "error", "String", "message"], ["Test", "public", "void", "testGetExecutionCount", "throws", "Exception", "final", "JobSchedulerViewMBean", "view", "getJobSchedulerMBean", "assertNotNull", "view", "assertTrue", "view", "getAllJobs", "isEmpty", "scheduleMessage", "assertFalse", "view", "getAllJobs", "isEmpty", "TabularData", "jobs", "view", "getAllJobs", "assertEquals", "jobs", "size", "String", "jobId", "null", "for", "Object", "key", "jobs", "keySet", "jobId", "List", "key", "get", "toString", "final", "String", "fixedJobId", "jobId"], ["public", "boolean", "isValid", "RequestContext", "context", "String", "endpointAddress", "throws", "Exception", "if", "endpointAddress", "null", "return", "true", "The", "endpointAddress", "address", "must", "be", "a", "valid", "URL", "start", "with", "http", "s", "Validate", "it", "first", "using", "commons", "validator", "UrlValidator", "urlValidator", "new", "UrlValidator", "new", "String", "http", "https", "UrlValidator", "ALLOW_LOCAL_URLS", "if", "urlValidator", "isValid", "endpointAddress"], ["Override", "public", "void", "onMessage", "Message", "message", "try", "Thread", "sleep", "2000L", "if", "message", "instanceof", "TextMessage"], ["Pushes", "a", "message", "out", "to", "all", "the", "PushableConsumers", "param", "message", "the", "message", "to", "be", "pushed", "to", "consumers", "throws", "IOException", "In", "case", "IOException", "of", "some", "sort", "is", "occurred", "public", "void", "pushMessage", "IMessage", "message", "throws", "IOException", "if", "log", "isDebugEnabled"], ["Set", "String", "myIps", "IpUtil", "getIps", "for", "String", "seedDomain", "SEED_DOMAINS", "try", "InetAddress", "response", "InetAddress", "getAllByName", "seedDomain", "for", "InetAddress", "inetAddress", "response", "\u6392\u9664\u81ea\u5df1", "if", "myIps", "contains", "inetAddress", "getHostAddress", "continue", "\u82e5\u8fde\u63a5\u5931\u8d25", "\u5219\u91cd\u8bd5", "\u6682\u5b9a1\u5206\u949f", "Seed", "seed", "new", "Seed", "new", "InetSocketAddress", "inetAddress", "Configure", "PORT", "true", "add", "seed", "catch", "Exception", "e"], ["FXML", "public", "void", "proceed", "LOG", "trace", "proceed", "FileChooser", "fileChooser", "new", "FileChooser", "fileChooser", "setTitle", "resourceBundle", "getString", "unlock", "chooseMasterkey", "filePickerTitle", "fileChooser", "getExtensionFilters", "add", "new", "FileChooser", "ExtensionFilter", "resourceBundle", "getString", "unlock", "chooseMasterkey", "filePickerMimeDesc", "CRYPTOMATOR_FILENAME_GLOB", "File", "masterkeyFile", "fileChooser", "showOpenDialog", "window", "if", "masterkeyFile", "null"], ["Test", "void", "test", "throws", "Exception", "String", "sutUrl", "https", "bonigarcia", "dev", "selenium", "webdriver", "java", "driver", "get", "sutUrl", "String", "title", "driver", "getTitle"], ["protected", "static", "void", "handleException", "String", "msg", "Exception", "e"], ["dnFind_work", "getDnFind", "boolean", "found", "false", "if", "StringUtils", "isNotEmpty", "dnSearchIn_work", "StringUtils", "isNotEmpty", "dnFind_work", "try", "found", "findMember", "getHost", "getPort", "dnSearchIn_work", "isUseSsl", "dnFind_work", "isRecursiveSearch", "catch", "NamingException", "e", "throw", "new", "PipeRunException", "this", "exception", "on", "ldap", "lookup", "e", "if", "found", "String", "msg", "dn", "dnFind_work", "not", "found", "as", "member", "in", "url", "retrieveUrl", "getHost", "getPort", "dnSearchIn_work", "isUseSsl", "if", "notFoundForward", "null", "throw", "new", "PipeRunException", "this", "msg"], ["private", "boolean", "executeExternalModifyResponse", "CustomScriptConfiguration", "scriptConf", "JSONObject", "responseAsJsonObject", "ExternalIntrospectionContext", "context", "try"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "memsql", "ToxiproxyContainer", "ContainerProxy", "memsqlContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_MEMSQL", "GenericContainer", "memsql", "MemSqlProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "memsql", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "memsql", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "memsql", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "memsql", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedMemsqlToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Override", "public", "Optional", "RuleSetChangedEvent", "parse", "String", "jsonData", "var", "payload", "gson", "fromJson", "jsonData", "RuleSetChangedEventPayload", "class", "if", "payload", "isInvalid"], ["public", "String", "getRoles", "RuntimeException", "e", "new", "RuntimeException", "Not", "implemented"], ["private", "void", "removeConnection", "String", "removedConnectionId", "var", "removed", "repository", "remove", "removedConnectionId", "if", "removed", "null"], ["Override", "public", "boolean", "beforeExecute", "ForestRequest", "request", "log", "info", "invoke", "False", "beforeExecute", "Object", "args", "request", "getArguments", "args", "b"], ["Override", "public", "Histogram", "deserialize", "JsonParser", "jsonParser", "DeserializationContext", "deserializationContext", "throws", "IOException", "JacksonException", "ByteBuffer", "buffer", "threadBuffer", "get", "buffer", "clear", "try", "OutputStream", "os", "new", "ByteBufferBackedOutputStream", "buffer", "jsonParser", "readBinaryValue", "os", "buffer", "flip", "Long", "MIN_VALUE", "used", "so", "that", "Histogram", "will", "defer", "to", "the", "value", "encoded", "in", "the", "histogram", "value", "This", "assumes", "that", "it", "is", "acceptable", "for", "the", "deserialized", "value", "we", "create", "to", "share", "the", "same", "parameters", "of", "the", "source", "histogram", "that", "was", "serialized", "return", "Histogram", "decodeFromCompressedByteBuffer", "buffer", "Long", "MIN_VALUE", "catch", "Exception", "e"], ["private", "void", "visibleWindowsChanged", "ListChangeListener", "Change", "extends", "Window", "change", "int", "visibleWindows", "change", "getList", "size"], ["PostConstruct", "public", "void", "init", "AdminClient", "adminClient", "adminClient", "try", "StopWatch", "stopWatch", "new", "StopWatch", "CheckAndCreateTopics", "stopWatch", "start", "CheckAndCreateTopics", "ClassPathScanningCandidateComponentProvider", "provider", "new", "ClassPathScanningCandidateComponentProvider", "false", "provider", "addIncludeFilter", "new", "AssignableTypeFilter", "PublishedEvent", "class", "Set", "BeanDefinition", "candidateComponents", "provider", "findCandidateComponents", "eventApisConfiguration", "getBaseEventsPackage", "int", "numPartitions", "getDefaultNumberOfPartitions", "adminClient", "for", "BeanDefinition", "candidateComponent", "candidateComponents", "Class", "PublishedEvent", "beanClass", "try", "beanClass", "Class", "PublishedEvent", "Class", "forName", "candidateComponent", "getBeanClassName", "String", "topicName", "beanClass", "getSimpleName"], ["public", "ReportConfigurationBean", "getSavedReports", "throws", "Exception", "try", "return", "reportingAdminServiceStub", "getSavedReports", "catch", "Exception", "e", "String", "msg", "Unable", "to", "get", "saved", "report"], ["Override", "public", "void", "resultReceived", "IPendingServiceCall", "call", "log", "info", "connectCallback", "ObjectMap", "map", "ObjectMap", "call", "getResult", "String", "code", "String", "map", "get", "code"], ["void", "log", "int", "level", "String", "message", "Throwable", "th", "synchronized", "logServices", "for", "LogService", "log", "logServices"], ["Test", "public", "void", "testCtor", "throws", "Exception", "log", "debug", "n", "testCtor", "File", "file", "new", "File", "target", "test", "classes", "fixtures", "p", "ok", "mp3", "SuppressWarnings", "unused", "File", "file2", "new", "File", "target", "test", "classes", "fixtures", "p", "err", "mp3", "File", "file", "new", "File", "target", "test", "classes", "fixtures", "Cherub", "Rock", "mp3", "File", "file", "new", "File", "target", "test", "classes", "fixtures", "CodeMonkey", "mp3", "MP3Reader", "reader", "new", "MP3Reader", "file", "ITag", "tag", "reader", "readTag"], ["Override", "public", "Optional", "TaintVulnerabilityClosedEvent", "parse", "String", "jsonData", "var", "payload", "gson", "fromJson", "jsonData", "TaintVulnerabilityClosedEventPayload", "class", "if", "payload", "isInvalid"], ["Method", "responsible", "to", "process", "expired", "CIBA", "requests", "set", "them", "as", "expired", "in", "cache", "and", "send", "callbacks", "to", "the", "client", "param", "cibaRequest", "Object", "containing", "data", "related", "to", "the", "CIBA", "request", "param", "authReqId", "Authentication", "request", "id", "private", "void", "processExpiredRequest", "CibaRequestCacheControl", "cibaRequest", "String", "authReqId", "if", "cibaRequest", "getStatus", "CibaRequestStatus", "PENDING", "cibaRequest", "getStatus", "CibaRequestStatus", "EXPIRED", "return"], ["Override", "protected", "List", "File", "postDownload", "File", "archive", "Collection", "File", "listFiles", "listFiles", "new", "File", "archive", "getParent", "null", "true", "Iterator", "File", "iterator", "listFiles", "iterator", "File", "file", "null", "List", "File", "files", "new", "ArrayList", "while", "iterator", "hasNext", "file", "iterator", "next", "String", "fileName", "file", "getName", "if", "fileName", "contains", "getDriverName"], ["Writer", "writer", "null", "InputStream", "instream", "null", "try", "Process", "process", "Runtime", "getRuntime", "exec", "sh", "rabbitmqctl", "status", "null", "rabbitMQHome", "instream", "process", "getInputStream", "writer", "new", "StringWriter", "char", "buffer", "new", "char", "reader", "new", "BufferedReader", "new", "InputStreamReader", "instream", "int", "n", "while", "n", "reader", "read", "buffer", "writer", "write", "buffer", "n", "reader", "close", "instream", "close", "String", "message", "writer", "toString"], ["EventListener", "Async", "taskExecutor", "public", "void", "processArticlePostEvent", "ArticleEvent", "articleEvent", "throws", "InterruptedException", "Thread", "sleep"], ["Override", "public", "void", "visitUnsignedLong", "String", "name", "long", "id", "long", "value"], ["public", "void", "testLoadTempAdvisoryQueues", "throws", "Exception", "for", "int", "i", "i", "MESSAGE_COUNT", "i", "TemporaryQueue", "tempQueue", "session", "createTemporaryQueue", "MessageConsumer", "consumer", "session", "createConsumer", "tempQueue", "MessageProducer", "producer", "session", "createProducer", "tempQueue", "consumer", "close", "producer", "close", "tempQueue", "delete", "AdvisoryBroker", "ab", "AdvisoryBroker", "broker", "getBroker", "getAdaptor", "AdvisoryBroker", "class", "assertTrue", "ab", "getAdvisoryDestinations", "size", "assertTrue", "ab", "getAdvisoryConsumers", "size", "assertTrue", "ab", "getAdvisoryProducers", "size", "RegionBroker", "rb", "RegionBroker", "broker", "getBroker", "getAdaptor", "RegionBroker", "class", "for", "Destination", "dest", "rb", "getDestinationMap", "values"], ["private", "void", "registerInfluxEnvironment", "ConcreteInfluxDbContainer", "influx", "ConfigurableEnvironment", "environment", "InfluxDBProperties", "properties", "Integer", "mappedPort", "influx", "getMappedPort", "properties", "getPort", "String", "host", "influx", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "influxdb", "port", "mappedPort", "map", "put", "embedded", "influxdb", "host", "host", "map", "put", "embedded", "influxdb", "database", "properties", "getDatabase", "map", "put", "embedded", "influxdb", "user", "properties", "getUser", "map", "put", "embedded", "influxdb", "password", "properties", "getPassword", "String", "influxDBURL", "http"], ["Override", "protected", "Void", "processItem", "List", "DataPointWithEventDetectors", "subgroup", "int", "itemId", "long", "startTs", "0L", "if", "log", "isInfoEnabled", "startTs", "Common", "timer", "currentTimeMillis"], ["Unregisters", "a", "plug", "in", "param", "plugin", "plugin", "public", "static", "void", "unregister", "IRed5Plugin", "plugin"], ["Test", "public", "void", "patternUpdate", "final", "String", "msg", "pattern", "StdoutRecorder", "stdoutRecorder", "new", "StdoutRecorder", "String", "log", "stdoutRecorder", "record", "new", "Runnable", "Override", "public", "void", "run", "Logger", "logger", "LogManager", "getLogger", "patternUpdateLog4j2Jvm7"], ["inheritDoc", "public", "int", "seek", "int", "ts"], ["Override", "public", "Converts", "String", "IP", "address", "to", "InetAddress", "object", "param", "textValue", "ex", "void", "setAsText", "String", "textValue"], ["public", "Q", "DeferredChanged", "Q", "mapOptional", "Function", "Optional", "T", "Optional", "Q", "function", "if", "valueSet", "Optional", "Q", "result", "function", "apply", "this", "valueOptional"], ["Override", "public", "void", "afterPropertiesSet", "throws", "Exception", "Messages", "that", "do", "not", "match", "the", "TopicSelector", "will", "be", "discarded", "nullChannel", "applicationContext", "getBean", "nullChannel", "MessageChannel", "class", "ClassPathBeanDefinitionScanner", "scanner", "scan", "String", "names", "scanner", "getRegistry", "getBeanDefinitionNames", "for", "String", "beanName", "names"], ["internal", "method", "for", "issue", "public", "void", "getAndCloseSO", "log", "debug", "getAndCloseSO", "initialised", "get", "it", "if", "hasSharedObject", "appScope", "issue323", "if", "createSharedObject", "appScope", "issue323", "false", "log", "warn", "Shared", "object", "creation", "failed", "ISharedObject", "so", "getSharedObject", "appScope", "issue323"], ["inStream", "url", "openStream", "else", "warningMessage", "Bundle", "context", "could", "not", "find", "resource", "TENANT_MGT_XML", "or", "user", "does", "not", "have", "sufficient", "permission", "to", "access", "the", "resource", "else", "if", "url", "this", "getClass", "getClassLoader", "getResource", "TENANT_MGT_XML", "null", "inStream", "url", "openStream", "else", "warningMessage", "Could", "not", "find", "resource", "TENANT_MGT_XML", "or", "user", "does", "not", "have", "sufficient", "permission", "to", "access", "the", "resource", "if", "inStream", "null", "String", "message", "Tenant", "configuration", "not", "found", "Cause", "warningMessage", "if", "log", "isDebugEnabled"], ["Test", "public", "void", "testMakeProduct", "throws", "Exception", "Product", "product", "createProduct", "assert", "product", "null"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "couchbase", "ToxiproxyContainer", "ContainerProxy", "couchbaseContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_COUCHBASE", "CouchbaseContainer", "couchbase", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "couchbase", "couchbase", "getBootstrapHttpDirectPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "couchbase", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "couchbase", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "couchbase", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedCouchbaseToxiProxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["private", "long", "startAndLogTime", "GenericContainer", "container", "Logger", "logger", "Instant", "startTime", "Instant", "now", "container", "start", "long", "startupTime", "Duration", "between", "startTime", "Instant", "now", "toMillis", "String", "dockerImageName", "container", "getDockerImageName", "String", "buildDate", "getBuildDate", "container", "dockerImageName", "influxdb", "build", "06T17", "years", "months", "ago", "startup", "time", "is", "seconds", "if", "startupTime", "10L"], ["Override", "public", "boolean", "accept", "File", "dir", "String", "name"], ["public", "Object", "evaluate", "final", "String", "expression", "throws", "Exception", "if", "expression", "null", "throw", "new", "IllegalArgumentException", "expression"], ["setup", "a", "consumer", "to", "drain", "messages", "MessageConsumer", "consumer", "session", "createConsumer", "queue", "consumer", "setMessageListener", "new", "MessageListener", "Override", "public", "void", "onMessage", "Message", "message", "warmup", "for", "int", "i", "i", "i", "benchmarkNonCallbackRate", "benchmarkCallbackRate", "double", "callbackRate", "benchmarkCallbackRate", "double", "nonCallbackRate", "benchmarkNonCallbackRate"], ["Override", "public", "DruidCluster", "getDruidCluster", "String", "clusterId", "throws", "ClusterNotFoundException"], ["void", "deduce", "int", "rowIndex", "int", "colIndex", "int", "value", "double", "newValue", "cooccurrence", "get", "rowIndex", "colIndex", "if", "newValue"], ["CheckForNull", "private", "Path", "locateNode", "Nullable", "Path", "configuredNodejsPath", "if", "configuredNodejsPath", "null"], ["\u63a5\u6536\u5230\u533a\u5757\u62c9\u53d6\u6d88\u606f", "Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "if", "log", "isDebugEnabled"], ["private", "static", "Predicate", "super", "SonarLintRuleDefinition", "isIncludedByConfiguration", "Set", "String", "includedRules", "return", "r", "if", "includedRules", "contains", "r", "getKey", "return", "true", "for", "String", "deprecatedKey", "r", "getDeprecatedKeys", "if", "includedRules", "contains", "deprecatedKey"], ["Test", "public", "void", "testNoGcAtStop", "throws", "Exception", "brokerService", "createBroker", "false", "brokerService", "start", "produceWithScheduledDelayAndConsume", "LOG", "info", "job", "store", "jobSchedulerStore", "int", "numSchedulerFiles", "jobSchedulerStore", "getJournal", "getFileMap", "size", "LOG", "info", "kahadb", "store", "kahaDBPersistenceAdapter", "int", "numKahadbFiles", "kahaDBPersistenceAdapter", "getStore", "getJournal", "getFileMap", "size"], ["Override", "public", "void", "doFilter", "ServletRequest", "servletRequest", "ServletResponse", "servletResponse", "FilterChain", "chain", "throws", "IOException", "ServletException", "var", "request", "validateRequestType", "servletRequest", "var", "response", "validateResponseType", "servletResponse", "var", "path", "request", "getContextPath", "request", "getPathInfo", "null", "request", "getPathInfo", "if", "blacklisted", "path"], ["public", "void", "onPlayStatus", "IConnection", "conn", "Map", "Object", "Object", "info"], ["private", "void", "checkArm", "WebDriverManager", "wdm", "wdm", "arch64", "setup", "String", "driverPath", "wdm", "getDownloadedDriverPath"], ["Override", "public", "void", "doParse", "InputStream", "input", "String", "baseUri", "RDFNotation", "notation", "boolean", "keepBNode", "RDFCallback", "callback", "throws", "ParserException", "try", "final", "TarArchiveInputStream", "debInputStream", "TarArchiveInputStream", "new", "ArchiveStreamFactory", "createArchiveInputStream", "tar", "input", "TarArchiveEntry", "entry", "null", "Make", "sure", "that", "the", "parser", "does", "not", "close", "the", "Tar", "Stream", "so", "we", "can", "read", "the", "rest", "of", "the", "files", "NonCloseInputStream", "nonCloseIn", "new", "NonCloseInputStream", "debInputStream", "while", "entry", "TarArchiveEntry", "debInputStream", "getNextEntry", "null", "if", "entry", "isFile", "entry", "getName", "contains", "DS_Store", "try", "RDFNotation", "guessnot", "RDFNotation", "guess", "entry", "getName"], ["Override", "public", "void", "doFilter", "ServletRequest", "request", "ServletResponse", "response", "FilterChain", "chain", "throws", "IOException", "ServletException", "String", "contextPath", "request", "getServletContext", "getContextPath"], ["public", "void", "doStart", "throws", "Exception", "HashSet", "StaticMember", "staticMemberCollection", "new", "HashSet", "StaticMember", "log", "debug", "Attempting", "to", "set", "static", "members", "if", "staticMember", "null", "log", "debug", "Attempting", "to", "add", "static", "member", "StaticMember", "staticMember", "getStaticMember", "getPort", "staticMemberCollection", "add", "StaticMember", "staticMember", "getStaticMember", "WadiStaticMember", "nextStaticMember", "WadiStaticMember", "staticMember", "getNextStaticMember", "while", "nextStaticMember", "null", "log", "debug", "Attempting", "to", "add", "static", "member", "StaticMember", "staticMember", "getStaticMember", "getPort", "staticMemberCollection", "add", "StaticMember", "nextStaticMember", "getStaticMember", "nextStaticMember", "WadiStaticMember", "nextStaticMember", "getNextStaticMember"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "victoriametrics", "public", "ToxiproxyContainer", "ContainerProxy", "victoriaMetricsContainerProxy", "ToxiproxyContainer", "toxiproxy", "GenericContainer", "victoriametrics", "VictoriaMetricsProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxy", "getProxy", "victoriametrics", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "victoriametrics", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "victoriametrics", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "victoriametrics", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedVictoriaMetricsToxiProxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["ParameterizedTest", "ValueSource", "strings", "chrome", "firefox", "void", "testInteractive", "String", "browser", "assertTimeout", "ofMinutes", "ByteArrayInputStream", "intro", "new", "ByteArrayInputStream", "r", "n", "getBytes", "System", "setIn", "intro"], ["ParameterizedTest", "EnumSource", "names", "WIN", "LINUX", "MAC", "void", "testForceOs", "OperatingSystem", "operatingSystem", "switch", "operatingSystem", "case", "WIN", "wdm", "win", "setup", "break", "case", "LINUX", "wdm", "linux", "setup", "break", "case", "MAC", "wdm", "mac", "setup", "break", "File", "driver", "new", "File", "wdm", "getDownloadedDriverPath"], ["QueueConnection", "qConnection", "null", "QueueSession", "qSession", "null", "QueueBrowser", "qBrowser", "null", "try", "qConFactory", "QueueConnectionFactory", "kernel", "invoke", "JCA_MANAGED_CONNECTION_FACTORY_NAME", "getResource", "qConnection", "qConFactory", "createQueueConnection", "qSession", "qConnection", "createQueueSession", "false", "QueueSession", "AUTO_ACKNOWLEDGE", "qBrowser", "qSession", "createBrowser", "queue", "qConnection", "start", "for", "Enumeration", "e", "qBrowser", "getEnumeration", "e", "hasMoreElements", "Object", "o", "e", "nextElement", "ret", "add", "o", "qConnection", "stop", "catch", "Exception", "e"], ["WebSocket", "callback", "handlers", "Override", "public", "void", "onWebSocketText", "String", "data", "if", "data", "null", "return", "if", "data", "equals", "n", "LOG", "debug", "New", "incoming", "heartbeat", "read", "else"], ["private", "void", "registerEnvironment", "GenericContainer", "victoriaMetrics", "ConfigurableEnvironment", "environment", "VictoriaMetricsProperties", "properties", "Integer", "mappedPort", "victoriaMetrics", "getMappedPort", "properties", "port", "String", "host", "victoriaMetrics", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "victoriametrics", "host", "host", "map", "put", "embedded", "victoriametrics", "port", "mappedPort"], ["Test", "groups", "wso2", "esb", "description", "Tests", "level", "log", "public", "void", "testSendingToDefinedEndpoint", "throws", "Exception", "OMElement", "response", "axis2Client", "sendSimpleStockQuoteRequest", "getProxyServiceURLHttp", "logMediatorLevelTestProxy", "null", "WSO2", "Assert", "assertTrue", "response", "toString", "contains", "WSO2"], ["Override", "public", "void", "recoveryCleanupFailed", "Path", "indexFile", "IndexDescriptor", "index", "Throwable", "throwable"], ["public", "static", "Client", "create", "Path", "socketPath", "throws", "IOException", "var", "address", "UnixDomainSocketAddress", "of", "socketPath", "var", "socketChannel", "SocketChannel", "open", "address"], ["private", "void", "shutdown", "String", "reason", "if", "null", "reason"], ["Test", "public", "void", "testValidateFromYouTube", "log", "info", "ntestValidateFromYouTube", "client", "side", "handshake", "handler", "OutboundHandshake", "out", "new", "OutboundHandshake", "server", "response", "IoBuffer", "y", "IoBuffer", "allocate", "y", "setAutoExpand", "true", "y", "put", "IOUtils", "hexStringToByteArray", "youtubeS1", "y", "flip"], ["param", "targetStore", "The", "JobSchedulerStore", "that", "will", "receive", "the", "replay", "events", "from", "the", "legacy", "store", "throws", "IOException", "if", "an", "error", "occurs", "during", "replay", "of", "the", "legacy", "store", "public", "void", "startReplay", "JobSchedulerStoreImpl", "targetStore", "throws", "IOException", "checkLoaded", "if", "targetStore", "null", "throw", "new", "IOException", "Cannot", "replay", "to", "a", "null", "store", "try", "Set", "String", "schedulers", "store", "getJobSchedulerNames", "if", "schedulers", "isEmpty", "for", "String", "name", "schedulers", "LegacyJobSchedulerImpl", "scheduler", "store", "getJobScheduler", "name"], ["Override", "public", "void", "run", "try", "String", "name", "THREAD_NAME_PREFIX", "Thread", "currentThread", "getName"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "azurite", "ToxiproxyContainer", "ContainerProxy", "azuriteQueueContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "AZURITE_BEAN_NAME", "GenericContainer", "azurite", "AzuriteProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "azurite", "properties", "getQueueStoragePort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "azurite", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "azurite", "toxiproxy", "queueStoragePor", "proxy", "getProxyPort", "map", "put", "embedded", "azurite", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedAzuriteQueueToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Test", "public", "void", "testVerifyAntifakeCode", "throws", "InterruptedException", "ExecutionException", "TimeoutException", "IOException", "log", "info", "best", "block", "height", "network", "getBestBlockHeight", "String", "antifakeCodeContent", "xFdeHFv8RsHn6PHYRE8JTDLwRKPRe7mcej2R5c", "VerifyAntifakeCodeResult", "result", "accountKit", "verifyAntifakeCode", "antifakeCodeContent"], ["TODO", "deduplicate", "MainWindowController", "private", "void", "addOrRevealVault", "Path", "potentialVaultPath", "assert", "Platform", "isFxApplicationThread", "try", "final", "Vault", "v", "if", "potentialVaultPath", "getFileName", "toString", "endsWith", "CRYPTOMATOR_FILENAME_EXT", "v", "vaultListManager", "add", "potentialVaultPath", "getParent", "else", "v", "vaultListManager", "add", "potentialVaultPath", "if", "v", "isUnlocked", "vaultService", "reveal", "v"], ["private", "void", "registerVerticaEnvironment", "GenericContainer", "verticaContainer", "ConfigurableEnvironment", "environment", "VerticaProperties", "properties", "Integer", "mappedPort", "verticaContainer", "getMappedPort", "properties", "getPort", "String", "host", "verticaContainer", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "vertica", "port", "mappedPort", "map", "put", "embedded", "vertica", "host", "host", "map", "put", "embedded", "vertica", "database", "properties", "getDatabase", "map", "put", "embedded", "vertica", "user", "properties", "getUser", "map", "put", "embedded", "vertica", "password", "properties", "getPassword", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedVerticaInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["public", "void", "copySavedReport", "String", "saved", "String", "copy", "throws", "Exception", "try", "reportingAdminServiceStub", "copySavedReport", "saved", "copy", "catch", "Exception", "e", "String", "msg", "Unable", "to", "copy", "the", "report"], ["public", "List", "File", "filterCacheBy", "List", "File", "input", "String", "key", "boolean", "isVersion", "String", "pathSeparator", "isVersion", "separator", "List", "File", "output", "new", "ArrayList", "input", "if", "key", "isEmpty", "input", "isEmpty", "output", "input", "stream", "filter", "file", "file", "toString", "toLowerCase", "ROOT", "contains", "pathSeparator", "key", "toLowerCase", "ROOT", "collect", "toList"], ["Override", "public", "Object", "getObjectInstance", "Object", "obj", "Name", "name", "Context", "nameCtx", "Hashtable", "environment", "throws", "Exception", "try", "For", "Tomcat", "obj", "will", "always", "be", "an", "object", "of", "type", "Reference", "Reference", "ref", "Reference", "obj", "String", "objectName", "name", "toString", "String", "targetClassName", "ref", "getClassName", "Class", "targetClass", "Class", "forName", "targetClassName"], ["private", "void", "assertDriver", "WebDriverManager", "wdm", "File", "driver", "new", "File", "wdm", "getDownloadedDriverPath"], ["parser", "getInterpreter", "setPredictionMode", "PredictionMode", "SLL", "parser", "removeErrorListeners", "parser", "addErrorListener", "errorListener", "GremlinParser", "QueryListContext", "queryContext", "try", "queryContext", "parser", "queryList", "catch", "Exception", "ex", "Retry", "parsing", "the", "query", "again", "with", "using", "LL", "prediction", "mode", "LL", "parsing", "mode", "is", "more", "powerful", "so", "retrying", "the", "parsing", "would", "help", "parsing", "the", "rare", "edge", "cases", "try", "rewind", "input", "stream", "tokens", "seek", "lexer", "reset", "parser", "reset", "parser", "getInterpreter", "setPredictionMode", "PredictionMode", "LL"], ["Override", "public", "void", "log", "Request", "request", "Response", "response", "Trying", "to", "replicate", "this", "logback", "pattern", "h", "l", "user", "t", "dd", "MMM", "yyyy", "HH", "mm", "ss", "Z", "r", "s", "b", "i", "Referer", "i", "User", "Agent", "D", "String", "remoteHost", "swallowExceptions", "request", "HttpServletRequest", "getRemoteHost", "String", "user", "swallowExceptions", "request", "HttpServletRequest", "getRemoteUser", "String", "requestURL", "findRequestURI", "request", "int", "statusCode", "response", "getStatus", "long", "length", "response", "getContentLength", "String", "referer", "swallowExceptions", "request", "r", "r", "getHeader", "Referer", "String", "userAgent", "swallowExceptions", "request", "r", "r", "getHeader", "User", "Agent", "long", "requestTimeStamp", "request", "null", "request", "getTimeStamp", "long", "now", "System", "currentTimeMillis", "long", "serviceTime", "requestTimeStamp", "now", "requestTimeStamp"], ["protected", "CustomEntry", "getEntryByDn", "String", "dn", "String", "ldapReturnAttributes", "try", "return", "ldapEntryManager", "find", "dn", "CustomEntry", "class", "ldapReturnAttributes", "catch", "EntryPersistenceException", "epe"], ["public", "String", "getMandatoryAttributeNames", "String", "className", "throws", "Exception", "try", "return", "reportingAdminServiceStub", "getMandatoryAttributeNames", "className", "catch", "Exception", "e", "String", "msg", "Unable", "to", "get", "mandatory", "attribute", "names"], ["private", "static", "void", "handleStorage", "RedisAPI", "redisAPI", "final", "String", "redisKey", "int", "ttl", "final", "Handler", "Boolean", "callback", "read", "from", "storage", "redisAPI", "get", "redisKey", "reply", "if", "reply", "failed"], ["public", "Q", "DeferredChanged", "Q", "flatMap", "Function", "Optional", "T", "DeferredChanged", "Q", "function", "if", "valueSet", "DeferredChanged", "Q", "nextDeferred", "function", "apply", "this", "valueOptional"], ["String", "contentType", "msgContext", "getProperty", "MESSAGE_TYPE", "toString", "if", "log", "isDebugEnabled", "log", "debug", "Message", "content", "type", "retrieved", "in", "the", "message", "is", "contentType", "if", "contentType", "equalsIgnoreCase", "InboundGRPCConstants", "CONTENT_TYPE_JSON_MIME_TYPE", "BufferedReader", "bufferedReader", "new", "BufferedReader", "new", "InputStreamReader", "JsonUtil", "getJsonPayload", "msgContext", "StringBuilder", "stringBuilder", "new", "StringBuilder", "String", "line", "try", "while", "line", "bufferedReader", "readLine", "null", "stringBuilder", "append", "line", "content", "stringBuilder", "toString", "catch", "IOException", "e", "String", "msg", "Error", "occurred", "while", "converting", "payload", "to", "json", "e", "getMessage"], ["public", "void", "handle", "Callback", "callbacks", "throws", "IOException", "UnsupportedCallbackException", "for", "int", "i", "i", "callbacks", "length", "i", "if", "callbacks", "i", "instanceof", "DelegationCallback", "DelegationCallback", "callback", "DelegationCallback", "callbacks", "i", "Element", "token", "SecurityTokenThreadLocal", "getToken", "if", "token", "null"], ["Override", "protected", "boolean", "isReady", "String", "containerId", "waitStrategyTarget", "getContainerId"], ["Override", "public", "void", "visitSignedLong", "String", "name", "long", "id", "long", "value"], ["private", "void", "registerStorageEnvironment", "GenericContainer", "container", "ConfigurableEnvironment", "environment", "StorageProperties", "properties", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "google", "storage", "host", "container", "getHost", "map", "put", "embedded", "google", "storage", "port", "container", "getMappedPort", "StorageProperties", "PORT", "map", "put", "embedded", "google", "storage", "endpoint", "buildContainerEndpoint", "container", "map", "put", "embedded", "google", "storage", "project", "id", "properties", "getProjectId", "map", "put", "embedded", "google", "storage", "bucket", "location", "properties", "getBucketLocation"], ["Override", "public", "void", "visit", "LockType", "lockType", "ResourceType", "resourceType", "long", "transactionId", "long", "resourceId", "String", "description", "long", "estimatedWaitTime", "long", "lockIdentityHashCode"], ["private", "static", "RuleSet", "toRuleSet", "ServerApi", "serverApi", "Map", "String", "RuleSet", "currentRuleSets", "QualityProfile", "profile", "boolean", "forceUpdate", "ProgressMonitor", "progressMonitor", "var", "language", "profile", "getLanguage", "if", "forceUpdate", "newlySupportedLanguage", "currentRuleSets", "language", "profileModifiedSinceLastSync", "currentRuleSets", "profile", "language", "var", "profileKey", "profile", "getKey"], ["Override", "public", "Response", "toResponse", "Throwable", "exception", "try", "if", "exception", "instanceof", "WebApplicationException", "final", "Response", "response", "WebApplicationException", "exception", "getResponse", "if", "response", "null", "response", "getStatus", "return", "response"], ["URL", "resourceURL", "File", "f", "new", "File", "resourcePath", "if", "f", "isFile", "resourceURL", "f", "toURI", "toURL", "else", "resourceURL", "ZipResourceExtractor", "class", "getResource", "resourcePath", "if", "resourceURL", "null", "throw", "new", "NullPointerException", "Could", "not", "retrieve", "resource", "for", "path", "resourcePath", "try", "InputStream", "resourceInputStream", "resourceURL", "openStream", "try", "String", "outname", "new", "File", "resourceURL", "getPath", "getName", "outname", "outname", "replaceAll"], ["public", "void", "abortConsumer", "ObjectName", "consumerToAbort", "Subscription", "sub", "broker", "getSubscriber", "consumerToAbort", "if", "sub", "null", "LOG", "info", "aborting", "consumer", "via", "jmx", "sub", "getConsumerInfo", "getConsumerId", "strategy", "abortConsumer", "sub", "false", "else"], ["if", "e", "instanceof", "RenderTemplateException", "RenderTemplateException", "render", "RenderTemplateException", "e", "ByteArrayOutputStream", "out", "new", "ByteArrayOutputStream", "Capability", "capability", "render", "getCapability", "if", "capability", "instanceof", "FormCapability", "try", "mediaTypeHandlerContainer", "write", "out", "mediaTypeHandler", "accept", "FormCapability", "class", "FormCapability", "capability", "catch", "IOException", "e1", "throw", "new", "RuntimeException", "e1", "return", "new", "Response", "render", "getCode", "new", "String", "out", "toByteArray", "else", "if", "e", "instanceof", "AbstractHtmlException", "return", "new", "Response", "AbstractHtmlException", "e", "getCode", "e", "getMessage", "else"], ["Test", "void", "test", "String", "sutUrl", "https", "bonigarcia", "dev", "selenium", "webdriver", "java", "driver", "get", "sutUrl", "String", "title", "driver", "getTitle"], ["Override", "public", "void", "failed", "Exception", "e"], ["jc", "usage", "System", "exit", "if", "arguments", "help", "jc", "usage", "System", "exit", "Configuration", "conf", "new", "CompositeConfiguration", "conf", "setProperty", "Stats", "STATS_PROVIDER_CLASS", "PrometheusMetricsProvider", "class", "getName", "conf", "setProperty", "prometheusStatsHttpPort", "arguments", "statsPort", "Stats", "loadStatsProvider", "conf", "StatsProvider", "provider", "Stats", "get", "provider", "start", "conf", "Runtime", "getRuntime", "addShutdownHook", "new", "Thread", "provider", "stop", "benchmark", "worker", "shutdown", "thread", "Dump", "configuration", "variables"], ["public", "void", "testElementToTypeMapping", "throws", "Exception", "File", "schema1", "new", "File", "BASEDIR", "src", "test", "resources", "schema", "schema4", "xsd", "log", "debug", "SCHEMA", "Map", "map", "parse", "schema1", "assertEquals", "map", "size", "Map", "elements", "schemaInfoBuilder", "getElementToTypeMap", "log", "debug", "ELEMENT", "MAP"], ["private", "void", "log", "String", "s", "s", "s", "strip", "switch", "level", "case", "INFO"], ["Test", "timeout", "public", "void", "testRecoverWhenSomeLogsAreMissing", "throws", "Exception", "fillUpSomeLogFiles", "int", "jobCount", "schedulerStore", "getJobScheduler", "JMS", "getAllJobs", "size"], ["ParameterizedTest", "EnumSource", "names", "DEFAULT", "X32", "X64", "void", "testLatestVersion", "Architecture", "architecture", "throws", "Exception", "WebDriverManager", "wdm", "WebDriverManager", "getInstance", "driverClass", "String", "osLabel", "if", "os", "null", "wdm", "operatingSystem", "os", "osLabel", "os", "os", "if", "architecture", "DEFAULT", "wdm", "architecture", "architecture"], ["private", "void", "createTopic", "TopicConfiguration", "topicConfiguration", "String", "topic", "topicConfiguration", "getTopic", "int", "partitions", "topicConfiguration", "getPartitions", "String", "containerBrokerList", "format", "s", "d", "KAFKA_HOST_NAME", "kafkaProperties", "getInternalBrokerPort", "String", "createTopicCmd", "getCreateTopicCmd", "topic", "partitions", "containerBrokerList", "Container", "ExecResult", "execResult", "executeInContainer", "this", "kafka", "createTopicCmd"], ["Test", "void", "edgeVersionTest", "throws", "Exception", "Config", "config", "new", "Config", "HttpClient", "httpClient", "new", "HttpClient", "config", "VersionDetector", "versionDetector", "new", "VersionDetector", "config", "httpClient", "Optional", "String", "driverVersion", "Optional", "empty", "URL", "driverUrl", "new", "URL", "https", "msedgedriver", "azureedge", "net", "Charset", "versionCharset", "UTF_16", "String", "driverName", "msedgedriver", "String", "versionLabel", "LATEST_STABLE", "Optional", "String", "osLabel", "Optional", "empty", "Optional", "String", "driverVersionFromRepository", "versionDetector", "getDriverVersionFromRepository", "driverVersion", "driverUrl", "versionCharset", "driverName", "versionLabel", "versionLabel", "osLabel", "assertThat", "driverVersionFromRepository", "isPresent", "String", "edgeVersion", "driverVersionFromRepository", "get"], ["public", "Response", "requestRpt", "String", "grantType", "String", "ticket", "String", "claimToken", "String", "claimTokenFormat", "String", "pctCode", "String", "rptCode", "String", "scope", "HttpServletRequest", "httpRequest", "HttpServletResponse", "httpResponse", "try"], ["protected", "ExtendedSelenium", "createSeleniumClient", "String", "url", "throws", "Exception", "super", "setUp", "if", "url", "null", "url", "http", "localhost", "SeleniumServer", "DEFAULT_PORT", "post", "beta", "builds", "don", "t", "define", "DEFAULT_PORT", "url", "http", "localhost", "String", "browser", "System", "getProperty", "browser", "firefox"], ["GET", "Path", "session_status", "Produces", "MediaType", "APPLICATION_JSON", "public", "Response", "requestCheckSessionStatus", "Context", "HttpServletRequest", "httpRequest", "Context", "HttpServletResponse", "httpResponse", "Context", "SecurityContext", "securityContext", "throws", "IOException", "String", "sessionIdCookie", "cookieService", "getSessionIdFromCookie", "httpRequest"], ["return", "else", "if", "validPassword", "password", "passwordId", "requestFocus", "DailogUtil", "showTipDailogCenter", "\u5bc6\u7801\u9519\u8bef", "getThisStage", "return", "\u89e3\u5bc6\u94b1\u5305\u5e76\u5224\u65ad\u7ed3\u679c", "AccountKit", "accountKit", "InchainInstance", "getInstance", "getAccountKit", "Result", "result", "accountKit", "decryptAccount", "password", "null", "if", "result", "isSuccess", "resetAndclose", "if", "callback", "null", "callback", "ok", "null", "else"], ["Override", "public", "void", "exceptionCaught", "ChannelHandlerContext", "ctx", "Throwable", "cause", "if", "failed", "isShuttingDown", "ctx", "return", "log", "only", "the", "first", "exception", "to", "not", "pollute", "the", "log", "failed", "true", "try", "Netty", "throws", "a", "NativeIoException", "on", "connection", "reset", "directly", "importing", "that", "class", "caused", "a", "host", "of", "linking", "errors", "because", "it", "depends", "on", "JNI", "to", "work", "Hence", "we", "just", "test", "on", "the", "message", "we", "know", "we", "ll", "get", "if", "Exceptions", "contains", "cause", "e", "e", "getMessage", "null", "e", "getMessage", "contains", "Connection", "reset", "by", "peer", "log", "warn", "Fatal", "error", "occurred", "when", "handling", "a", "client", "connection", "remote", "peer", "unexpectedly", "closed", "connection", "s", "ctx", "channel", "else"], ["Override", "public", "Response", "deviceAuthorization", "String", "clientId", "String", "scope", "HttpServletRequest", "httpRequest", "HttpServletResponse", "httpResponse", "SecurityContext", "securityContext", "it", "may", "be", "encoded", "scope", "ServerUtil", "urlDecode", "scope", "OAuth2AuditLog", "oAuth2AuditLog", "new", "OAuth2AuditLog", "ServerUtil", "getIpAddress", "httpRequest", "Action", "DEVICE_CODE_AUTHORIZATION", "oAuth2AuditLog", "setClientId", "clientId", "oAuth2AuditLog", "setScope", "scope", "try"], ["public", "Optional", "ServerProject", "getSonarProject", "String", "connectionId", "String", "sonarProjectKey", "try", "return", "singleProjectsCache", "get", "new", "SonarProjectKey", "connectionId", "sonarProjectKey"], ["String", "name", "destination", "getString", "name", "Map", "String", "String", "options", "new", "HashMap", "options", "put", "type", "destination", "getString", "type", "String", "typeLocation", "null", "if", "destination", "getString", "type", "equalsIgnoreCase", "file", "typeLocation", "file", "else", "if", "destination", "getString", "type", "equalsIgnoreCase", "eventBus", "typeLocation", "address", "options", "put", "metadata", "StringUtils", "getStringOrEmpty", "destination", "getString", "metadata", "options", "put", "transmission", "StringUtils", "getStringOrDefault", "destination", "getString", "transmission", "publish", "if", "typeLocation", "null", "options", "put", "typeLocation", "destination", "getString", "typeLocation", "destinationEntries", "put", "name", "options", "else"], ["Override", "public", "Appendable", "targetUTF8", "String", "name", "long", "id"], ["POST", "Path", "revoke_session", "Produces", "MediaType", "APPLICATION_JSON", "public", "Response", "requestRevokeSession", "FormParam", "user_criterion_key", "String", "userCriterionKey", "FormParam", "user_criterion_value", "String", "userCriterionValue", "Context", "HttpServletRequest", "request", "Context", "HttpServletResponse", "response", "Context", "SecurityContext", "sec", "try"], ["if", "upToDate", "serverPlugin", "storedPluginsByKey", "LOG", "debug", "SYNC", "Code", "analyzer", "is", "up", "to", "date", "Skip", "downloading", "it", "serverPlugin", "getKey", "return", "false", "if", "serverPlugin", "isSonarLintSupported", "LOG", "debug", "SYNC", "Code", "analyzer", "does", "not", "support", "SonarLint", "Skip", "downloading", "it", "serverPlugin", "getKey", "return", "false", "if", "sonarSourceDisabledPluginKeys", "contains", "serverPlugin", "getKey", "LOG", "debug", "SYNC", "Code", "analyzer", "is", "disabled", "in", "SonarLint", "language", "not", "enabled", "Skip", "downloading", "it", "serverPlugin", "getKey", "return", "false", "var", "pluginVersion", "VersionUtils", "getJarVersion", "serverPlugin", "getFilename", "if", "pluginsMinVersions", "isVersionSupported", "serverPlugin", "getKey", "pluginVersion", "var", "minimumVersion", "pluginsMinVersions", "getMinimumVersion", "serverPlugin", "getKey"], ["private", "static", "void", "handleException", "String", "msg", "Throwable", "throwable"], ["Override", "public", "TrustedIdpProtocolHandler", "getProtocolHandler", "String", "protocol", "for", "TrustedIdpProtocolHandler", "protocolHandler", "protocolHandlers", "if", "protocolHandler", "getProtocol", "equals", "protocol", "return", "protocolHandler"], ["Override", "public", "void", "exec", "int", "executionCounter", "List", "String", "args", "RedisUtils", "toPayload", "luaScriptState", "getSha", "keys", "size", "keys", "arguments", "redisAPI", "evalsha", "args", "event", "if", "event", "succeeded", "Response", "response", "event", "result", "if", "response", "null", "response", "size", "promise", "complete", "response", "else", "promise", "complete", "MultiType", "EMPTY_MULTI", "else", "String", "message", "event", "cause", "getMessage", "if", "message", "null", "message", "startsWith", "NOSCRIPT", "log", "warn", "RemoveExpiredQueuesRedisCommand", "script", "couldn", "t", "be", "found", "reload", "it"], ["Test", "void", "testCachePathStartsWithTildeSlash", "String", "customPath", "webdrivers", "wdm", "config", "setCachePath", "customPath", "String", "cachePath", "wdm", "config", "getCachePath"], ["final", "WorkloadGenerationTool", "Arguments", "arguments", "new", "WorkloadGenerationTool", "Arguments", "JCommander", "jc", "new", "JCommander", "arguments", "jc", "setProgramName", "workload", "generator", "try", "jc", "parse", "args", "catch", "ParameterException", "e", "System", "err", "println", "e", "getMessage", "jc", "usage", "System", "exit", "if", "arguments", "help", "jc", "usage", "System", "exit", "Dump", "configuration", "variables"], ["Override", "public", "JobMetadata", "getDeletedJobMetadata", "String", "jobId", "throws", "IOException", "JobNotFoundException"], ["Override", "public", "void", "partialRecovery", "RecoveryPredicate", "recoveryPredicate", "CommittedTransactionRepresentation", "lastTransaction"], ["Override", "public", "void", "onException", "IOException", "error", "synchronized", "this", "setHasExpired", "true", "only", "log", "if", "not", "stopped", "if", "stopped", "get"], ["private", "void", "registerEnvironment", "GenericContainer", "azurite", "ConfigurableEnvironment", "environment", "AzuriteProperties", "properties", "Integer", "mappedBlobStoragePort", "azurite", "getMappedPort", "properties", "getBlobStoragePort", "Integer", "mappedQueueStoragePort", "azurite", "getMappedPort", "properties", "getQueueStoragePort", "Integer", "mappedTableStoragePort", "azurite", "getMappedPort", "properties", "getTableStoragePort", "String", "host", "azurite", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "azurite", "host", "host", "map", "put", "embedded", "azurite", "blobStoragePort", "mappedBlobStoragePort", "map", "put", "embedded", "azurite", "queueStoragePor", "mappedQueueStoragePort", "map", "put", "embedded", "azurite", "tableStoragePort", "mappedTableStoragePort", "map", "put", "embedded", "azurite", "account", "name", "AzuriteProperties", "ACCOUNT_NAME", "map", "put", "embedded", "azurite", "account", "key", "AzuriteProperties", "ACCOUNT_KEY", "map", "put", "embedded", "azurite", "blob", "endpoint", "http", "host", "mappedBlobStoragePort", "AzuriteProperties", "ACCOUNT_NAME", "map", "put", "embedded", "azurite", "queue", "endpoint", "http", "host", "mappedQueueStoragePort", "AzuriteProperties", "ACCOUNT_NAME", "map", "put", "embedded", "azurite", "table", "endpoint", "http", "host", "mappedTableStoragePort", "AzuriteProperties", "ACCOUNT_NAME"], ["Override", "public", "CompletableFuture", "Void", "createTopic", "String", "topic", "int", "partitions", "topic", "cleanName", "topic"], ["private", "void", "failed", "Throwable", "e", "while", "e", "getCause", "null", "e", "getClass", "RuntimeException", "class", "e", "e", "getCause", "setException", "e"], ["Override", "protected", "void", "setBatch", "MessageId", "messageId", "throws", "Exception", "if", "LOG", "isTraceEnabled"], ["private", "boolean", "authorize", "String", "username", "String", "desiredRole", "try", "String", "listOfRoles", "MicroIntegratorSecurityUtils", "getUserStoreManager", "getRoleListOfUser", "username", "if", "LOG", "isDebugEnabled"], ["Override", "public", "void", "error", "Throwable", "cause"], ["public", "HttpService", "getHttpService", "throws", "Exception", "if", "httpService", "null", "String", "msg", "Before", "activating", "Carbon", "Core", "bundle", "an", "instance", "of", "HttpService", "class", "getName", "should", "be", "in", "existance"], ["public", "Optional", "String", "getDriverFromCache", "String", "driverVersion", "String", "driverName", "DriverManagerType", "driverManagerType", "Architecture", "arch", "String", "os"], ["protected", "boolean", "addToAlreadyInterestedConsumers", "ConsumerInfo", "info", "boolean", "isForcedDurable", "If", "a", "network", "subscription", "and", "a", "queue", "check", "if", "isConduitNetworkQueueSubscriptions", "is", "true", "If", "true", "then", "we", "want", "to", "try", "and", "conduit", "For", "topics", "we", "always", "want", "to", "conduit", "regardless", "of", "network", "subscription", "or", "not", "if", "info", "isNetworkSubscription", "info", "getDestination", "isQueue", "configuration", "isConduitNetworkQueueSubscriptions", "return", "false", "boolean", "matched", "false", "search", "through", "existing", "subscriptions", "and", "see", "if", "we", "have", "a", "match", "for", "DemandSubscription", "ds", "subscriptionMapByLocalId", "values", "DestinationFilter", "filter", "DestinationFilter", "parseFilter", "ds", "getLocalInfo", "getDestination", "if", "canConduit", "ds", "filter", "matches", "info", "getDestination"], ["Override", "public", "void", "dispatchEvent", "IEvent", "event"], ["private", "void", "handleException", "IOSession", "session", "MLLPContext", "mllpContext", "Exception", "e"], ["private", "static", "Predicate", "super", "SonarLintRuleDefinition", "isExcludedByConfiguration", "Set", "String", "excludedRules", "return", "r", "if", "excludedRules", "contains", "r", "getKey", "return", "false", "for", "String", "deprecatedKey", "r", "getDeprecatedKeys", "if", "excludedRules", "contains", "deprecatedKey"], ["Override", "public", "void", "onSharedObjectDelete", "ISharedObjectBase", "so", "String", "arg1"], ["When", "the", "configuration", "resource", "contains", "invalid", "regex", "patterns", "a", "warning", "will", "be", "logged", "and", "the", "corresponding", "link", "ContentTypeConstraint", "object", "will", "not", "be", "included", "in", "the", "returned", "list", "param", "constraintResourceBuffer", "the", "resource", "to", "create", "the", "link", "ContentTypeConstraint", "s", "from", "return", "a", "list", "of", "link", "ContentTypeConstraint", "objects", "static", "List", "ContentTypeConstraint", "create", "Buffer", "constraintResourceBuffer", "List", "ContentTypeConstraint", "constraints", "new", "ArrayList", "JsonObject", "config", "constraintResourceBuffer", "toJsonObject", "for", "String", "urlPattern", "config", "fieldNames", "try", "Pattern", "pattern", "Pattern", "compile", "urlPattern", "final", "List", "PatternHolder", "allowedTypes", "extractAllowedTypes", "config", "getJsonObject", "urlPattern", "if", "allowedTypes", "isEmpty", "constraints", "add", "new", "ContentTypeConstraint", "new", "PatternHolder", "pattern", "pattern", "allowedTypes"], ["String", "ofInstance", "Object", "component", "SonarLintLogger", "log", "var", "key", "component", "toString", "if", "IDENTITY_HASH_PATTERN", "matcher", "key", "matches", "if", "objectsWithoutToString", "add", "component", "getClass"], ["public", "void", "putValueInResolutionCacheIfEmpty", "String", "key", "String", "value", "int", "ttl", "if", "ttl", "getValueFromResolutionCache", "key", "null", "props", "put", "key", "value", "long", "now", "new", "Date", "getTime", "Date", "expirationDate", "new", "Date", "now", "SECONDS", "toMillis", "ttl", "String", "expirationDateStr", "formatDate", "expirationDate", "props", "put", "getExpirationKey", "key", "expirationDateStr", "if", "log", "isDebugEnabled"], ["Test", "void", "testCachePath", "throws", "IOException", "Path", "tmpFolder", "createTempDirectory", "toRealPath", "wdm", "config", "setCachePath", "tmpFolder", "toString"], ["ParameterizedTest", "ValueSource", "strings", "chrome", "firefox", "void", "test", "String", "defaultBrowser", "System", "setProperty", "wdm", "defaultBrowser", "defaultBrowser", "wdm", "WebDriverManager", "getInstance", "driver", "wdm", "create", "String", "sutUrl", "https", "bonigarcia", "dev", "selenium", "webdriver", "java", "driver", "get", "sutUrl", "String", "title", "driver", "getTitle"], ["public", "String", "getSessionId", "WebDriver", "webDriver", "String", "sessionId", "RemoteWebDriver", "webDriver", "getSessionId", "toString"], ["protected", "void", "unregisterMBean", "ObjectName", "name", "if", "name", "null", "try", "managementContext", "unregisterMBean", "name", "catch", "Throwable", "e"], ["param", "sourcePrincipal", "the", "principal", "in", "the", "source", "realm", "param", "targetRealm", "the", "target", "realm", "of", "the", "Principal", "return", "the", "principal", "in", "the", "target", "realm", "public", "Principal", "mapPrincipal", "String", "sourceRealm", "Principal", "sourcePrincipal", "String", "targetRealm", "if", "sourcePrincipal", "null", "return", "null", "String", "name", "sourcePrincipal", "getName", "toLowerCase", "if", "name", "contains", "delimiter", "Remove", "previous", "realm", "name", "name", "substring", "name", "indexOf", "delimiter", "Add", "target", "realm", "name", "name", "getDelimiter", "targetRealm"], ["Test", "void", "test", "String", "sutUrl", "https", "bonigarcia", "dev", "selenium", "webdriver", "java", "driver", "get", "sutUrl", "String", "title", "driver", "getTitle"], ["Override", "public", "JobScheduler", "getJobScheduler", "String", "name", "throws", "Exception", "this", "lock", "lock", "try", "InMemoryJobScheduler", "result", "this", "schedulers", "get", "name", "if", "result", "null"], ["private", "long", "getStateInitValue", "final", "String", "lastId", "long", "stateInitValue", "0L", "if", "lastId", "null", "try", "stateInitValue", "Long", "parseLong", "lastId", "catch", "NumberFormatException", "nfe"], ["private", "void", "registerEnvironment", "GenericContainer", "prometheus", "ConfigurableEnvironment", "environment", "PrometheusProperties", "properties", "Integer", "mappedPort", "prometheus", "getMappedPort", "properties", "port", "String", "host", "prometheus", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "prometheus", "host", "host", "map", "put", "embedded", "prometheus", "port", "mappedPort"], ["public", "Xid", "recover", "int", "arg0", "throws", "XAException", "Xid", "answer", "null"], ["Test", "public", "void", "testSerialize", "throws", "Exception", "TemporaryFolder", "folder", "new", "TemporaryFolder", "folder", "create", "File", "source", "folder", "newFile", "MessageTest", "writeContentsToFile", "source", "testString", "Message", "in", "new", "FileMessage", "source", "UTF", "assertEquals", "testStringLength", "in", "size", "byte", "wire", "serializationTester", "serialize", "in"], ["Iterator", "iterator", "result", "getChildrenWithLocalName", "timeStamp", "String", "timeStampString", "null", "while", "iterator", "hasNext", "OMElement", "timeStamp", "OMElement", "iterator", "next", "if", "timeStampString", "null", "timeStampString", "timeStamp", "getChildrenWithLocalName", "testTimeStamp", "next", "toString", "log", "info", "TimeStamp", "Recv", "timeStampString", "Assert", "assertTrue", "timeStampString", "contains", "02T05", "else", "String", "tempTimeStamp", "timeStamp", "getChildrenWithLocalName", "testTimeStamp", "next", "toString", "log", "info", "Timestamp", "Comapre", "timeStampString", "tempTimeStamp", "Assert", "assertFalse", "timeStampString", "equals", "tempTimeStamp", "Assert", "assertNotNull", "result", "Response", "message", "null"], ["Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "if", "log", "isDebugEnabled"], ["Checks", "if", "there", "exists", "a", "handling", "for", "the", "given", "code", "statusCode", "code", "in", "the", "rules", "for", "this", "request", "param", "statusCode", "the", "original", "status", "code", "param", "rule", "the", "rule", "matching", "the", "current", "request", "param", "log", "extra", "configured", "logger", "return", "the", "translated", "status", "or", "if", "no", "translation", "was", "carried", "out", "the", "original", "status", "code", "public", "static", "int", "translateStatusCode", "int", "statusCode", "Rule", "rule", "Logger", "log", "Integer", "translatedStatus", "null", "if", "rule", "getTranslateStatus", "null", "for", "Map", "Entry", "Pattern", "Integer", "entry", "rule", "getTranslateStatus", "entrySet", "if", "entry", "getKey", "matcher", "statusCode", "matches", "if", "log", "null"], ["inheritDoc", "Override", "public", "void", "exceptionCaught", "IoSession", "session", "Throwable", "cause", "throws", "Exception"], ["Override", "public", "Future", "Long", "cacheEntriesCount", "Promise", "Long", "promise", "Promise", "promise", "redisAPI", "scard", "CACHED_REQUESTS", "reply", "if", "reply", "failed", "String", "message", "Failed", "to", "get", "count", "of", "cached", "requests", "Cause", "logCause", "reply"], ["Registers", "a", "plug", "in", "param", "plugin", "plugin", "public", "static", "void", "register", "IRed5Plugin", "plugin"], ["Transitions", "from", "code", "fromState", "code", "to", "code", "toState", "code", "param", "fromState", "Previous", "state", "param", "toState", "New", "state", "return", "code", "true", "code", "if", "successful", "public", "boolean", "transition", "Value", "fromState", "Value", "toState", "Preconditions", "checkArgument", "fromState", "toState", "fromState", "must", "be", "different", "than", "toState", "boolean", "success", "value", "compareAndSet", "fromState", "toState", "if", "success", "fireValueChangedEvent", "else"], ["Override", "public", "void", "info", "String", "message", "Throwable", "cause"], ["void", "addKafkaProducer", "KafkaConfiguration", "config"], ["public", "DeferredChanged", "List", "Optional", "super", "T", "build", "if", "deferredValues", "isEmpty", "return", "DeferredChanged", "empty", "log", "debug", "Building", "collected", "deferred", "DeferredLogger", "logValue", "deferredValues", "final", "PendingChanged", "List", "Optional", "super", "T", "changed", "new", "PendingChanged", "whenSet", "forEach", "changed", "whenSet", "Optional", "values", "new", "Optional", "deferredValues", "size", "IntStream", "range", "deferredValues", "size", "forEach", "i", "DeferredChanged", "extends", "T", "deferredItem", "deferredValues", "get", "i", "deferredItem", "whenSet", "value", "values", "i", "value"], ["protected", "void", "consumeBatch", "throws", "Exception", "Destination", "destination", "session", "createQueue", "DESTINATION", "final", "MessageConsumer", "messageConsumer", "session", "createConsumer", "destination", "try", "for", "int", "i", "i", "i", "final", "Message", "message", "messageConsumer", "receive", "1000L"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "vault", "ToxiproxyContainer", "ContainerProxy", "vaultContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_VAULT", "VaultContainer", "vault", "ConfigurableEnvironment", "environment", "VaultProperties", "properties", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "vault", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "vault", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "vault", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "vault", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedVaultToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Override", "public", "void", "run", "try", "String", "name", "THREAD_NAME_PREFIX", "Thread", "currentThread", "getName"], ["for", "Peer", "peer", "peerKit", "findAvailablePeers", "if", "excludePeer", "null", "excludePeer", "null", "peer", "equals", "excludePeer", "try", "peer", "sendMessage", "message", "successCount", "catch", "NotYetConnectedException", "IOException", "e", "log", "warn", "\u5e7f\u64ad\u6d88\u606f\u51fa\u9519", "\u53ef\u80fd\u539f\u56e0\u662f\u8be5\u8282\u70b9\u8fde\u63a5\u5df2\u5173\u95ed", "e", "getMessage", "return", "successCount", "else", "log", "warn", "\u5e7f\u64ad\u6d88\u606f\u5931\u8d25", "\u6ca1\u6709\u53ef\u5e7f\u64ad\u7684\u8282\u70b9", "if", "log", "isDebugEnabled"], ["private", "void", "registerMySQLEnvironment", "MySQLContainer", "mysql", "ConfigurableEnvironment", "environment", "MySQLProperties", "properties", "Integer", "mappedPort", "mysql", "getMappedPort", "properties", "getPort", "String", "host", "mysql", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "mysql", "port", "mappedPort", "map", "put", "embedded", "mysql", "host", "host", "map", "put", "embedded", "mysql", "schema", "properties", "getDatabase", "map", "put", "embedded", "mysql", "user", "properties", "getUser", "map", "put", "embedded", "mysql", "password", "properties", "getPassword", "String", "jdbcURL", "jdbc", "mysql"], ["Override", "protected", "void", "failed", "try", "Throwable", "exception", "getException", "errorHandlers", "stream", "filter", "handler", "handler", "handles", "exception", "findFirst", "ifPresentOrElse", "exceptionHandler", "exceptionHandler", "handle", "exception"], ["public", "void", "stopping", "Artifact", "configurationId"], ["final", "StringBuilder", "log", "new", "StringBuilder", "for", "final", "Map", "Entry", "Votes", "Integer", "ent", "this", "voters", "entrySet", "dirs", "add", "vote", "attr", "author", "ent", "getKey", "toString", "attr", "weight", "ent", "getValue", "for", "final", "String", "login", "this", "logins", "log", "setLength", "try", "dirs", "add", "person", "attr", "login", "login", "attr", "points", "ent", "getKey", "take", "login", "log", "set", "log", "toString", "up", "catch", "final", "IOException", "err", "throw", "new", "IllegalStateException", "Failed", "to", "vote", "err", "dirs", "up", "final", "String", "ltag", "com", "zerocracy", "election", "if", "Logger", "isDebugEnabled", "ltag"], ["protected", "void", "readMessagesOnBroker", "int", "count", "throws", "Exception", "Session", "session", "connection", "createSession", "false", "Session", "AUTO_ACKNOWLEDGE", "Queue", "queue", "session", "createQueue", "getDestinationName", "MessageConsumer", "consumer", "session", "createConsumer", "queue", "for", "int", "i", "i", "MESSAGE_COUNT", "i", "Message", "message", "consumer", "receive", "RECEIVE_TIMEOUT", "assertNotNull", "message"], ["repeatId", "requestFocus", "DailogUtil", "showTipDailogCenter", "\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u4e0d\u4e00\u81f4", "getThisStage", "return", "else", "if", "validPassword", "password", "passwordId", "requestFocus", "DailogUtil", "showTipDailogCenter", "\u8f93\u5165\u7684\u5bc6\u7801\u97006\u4f4d\u6216\u4ee5\u4e0a", "\u4e14\u5305\u542b\u5b57\u6bcd\u548c\u6570\u5b57", "getThisStage", "return", "\u52a0\u5bc6\u5e76\u5224\u65ad\u7ed3\u679c", "AccountKit", "accountKit", "InchainInstance", "getInstance", "getAccountKit", "Result", "result", "accountKit", "encryptWallet", "password", "null", "if", "result", "isSuccess", "DailogUtil", "showTipDailogCenter", "result", "getMessage", "getThisStage", "resetAndclose", "else"], ["public", "void", "execute", "ISchedulingService", "service", "log", "debug", "Reaper", "running", "if", "sessions", "null", "if", "sessions", "isEmpty", "long", "now", "System", "currentTimeMillis", "for", "Map", "Entry", "String", "ISession", "entry", "sessions", "entrySet", "ISession", "session", "entry", "getValue", "long", "creationTime", "session", "getCreated", "check", "if", "session", "life", "exceeds", "max", "lifetime", "if", "now", "creationTime", "SessionManager", "maxLifetime", "String", "key", "session", "getSessionId"], ["public", "void", "succeeded", "Artifact", "configurationId"], ["Override", "protected", "void", "failed", "final", "var", "throwable", "super", "getException"], ["Test", "void", "ignoredVersionsFirefox", "String", "ignoredVersions", "wdm", "WebDriverManager", "firefoxdriver", "ignoreDriverVersions", "ignoredVersions", "wdm", "setup", "String", "driverVersion", "wdm", "getDownloadedDriverVersion"], ["driver", "findElement", "By", "xpath", "span", "text", "click", "should", "be", "wait", "for", "it", "WebDriverWait", "wait", "new", "WebDriverWait", "driver", "Duration", "ofSeconds", "wait", "until", "ExpectedConditions", "textToBe", "By", "className", "screen", "wdm", "stopRecording", "long", "timeoutMs", "System", "currentTimeMillis", "TimeUnit", "SECONDS", "toMillis", "REC_TIMEOUT_SEC", "File", "recFile", "do", "recFile", "new", "File", "targetFolder", "REC_FILENAME", "REC_EXT", "if", "System", "currentTimeMillis", "timeoutMs", "fail", "Timeout", "of", "REC_TIMEOUT_SEC", "seconds", "waiting", "for", "recording", "recFile", "break", "Thread", "sleep", "POLL_TIME_MSEC", "while", "recFile", "exists"], ["private", "ObjectName", "toObjectName", "String", "objectName", "ObjectName", "result", "null", "try", "result", "new", "ObjectName", "objectName", "catch", "Exception", "e"], ["Override", "public", "Future", "Result", "Buffer", "StatusCode", "fetchData", "final", "String", "requestUri", "HeadersMultiMap", "requestHeaders", "long", "requestTimeoutMs", "Promise", "Result", "Buffer", "StatusCode", "promise", "Promise", "promise", "requestHeaders", "remove", "cacheControlHeader", "clientRequestCreator", "createClientRequest", "HttpMethod", "GET", "requestUri", "requestHeaders", "requestTimeoutMs", "event", "log", "warn", "Got", "an", "error", "while", "fetching", "cache", "data", "event", "promise", "complete", "Result", "err", "StatusCode", "INTERNAL_SERVER_ERROR", "onComplete", "event", "if", "event", "failed"], ["private", "static", "void", "log", "InternalLog", "log", "int", "level", "String", "message", "Throwable", "throwable", "if", "level", "Level", "FINE", "intValue", "if", "throwable", "null"], ["Override", "public", "void", "visitSequenceOpen", "String", "name", "long", "id", "int", "length", "tab"], ["Redirect", "to", "HTTP", "port", "Override", "protected", "void", "service", "HttpServletRequest", "req", "HttpServletResponse", "resp", "throws", "ServletException", "IOException", "HttpClient", "client", "HttpConnectionUtil", "getClient", "connectionTimeout", "setup", "POST", "HttpPost", "post", "null", "try", "post", "new", "HttpPost", "postAcceptorURL", "String", "path", "req", "getContextPath", "if", "path", "null", "path"], ["Bean", "name", "BEAN_NAME_EMBEDDED_NATS_TOXI_PROXY", "ConditionalOnToxiProxyEnabled", "module", "nats", "ToxiproxyContainer", "ContainerProxy", "natsContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_NATS", "GenericContainer", "natsContainer", "NatsProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "natsContainer", "properties", "getClientPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "nats", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "nats", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "nats", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedNatsToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["try", "LOG", "info", "Adding", "admin", "users", "from", "group", "groupName", "Group", "group", "provider", "getGroup", "groupName", "if", "group", "null", "results", "addAll", "group", "getMembers", "catch", "GroupNotFoundException", "gnfe", "LOG", "error", "Error", "when", "trying", "to", "load", "the", "members", "of", "group", "groupName", "gnfe", "if", "results", "isEmpty", "Add", "default", "admin", "account", "when", "none", "was", "specified", "results", "add", "new", "JID", "admin", "XMPPServer", "getInstance", "getServerInfo", "getXMPPDomain", "null", "true"], ["ParameterizedTest", "MethodSource", "data", "void", "testServerResolver", "String", "path", "String", "driver", "throws", "IOException", "String", "serverUrl", "String", "format", "http", "localhost", "s", "s", "serverPort", "path", "try", "CloseableHttpClient", "client", "HttpClientBuilder", "create", "build", "HttpUriRequestBase", "request", "new", "HttpGet", "serverUrl", "Assert", "response"], ["public", "String", "parse", "final", "String", "input", "if", "input", "null", "throw", "new", "IllegalArgumentException", "input"], ["public", "boolean", "modifyIdTokenMethod", "CustomScriptConfiguration", "script", "JsonWebResponse", "jsonWebResponse", "ExternalUpdateTokenContext", "context", "try"], ["Override", "public", "Response", "toResponse", "final", "Exception", "ex"], ["SuppressWarnings", "deprecation", "Override", "public", "void", "append", "LogEvent", "event", "if", "event", "getThrown", "null", "event", "getThrown", "instanceof", "TransportDisposedIOException", "Prevent", "StackOverflowException", "so", "we", "can", "see", "a", "sane", "stack", "trace", "if", "gotExceptionInLog", "get", "return", "gotExceptionInLog", "set", "Boolean", "TRUE"], ["param", "str", "String", "representation", "of", "XML", "return", "DOM", "object", "throws", "IOException", "I", "O", "exception", "public", "static", "Document", "stringToDoc", "String", "str", "throws", "IOException", "if", "StringUtils", "isNotEmpty", "str", "try", "Reader", "reader", "new", "StringReader", "str", "DocumentBuilder", "db", "DocumentBuilderFactory", "newInstance", "newDocumentBuilder", "EntityResolver", "noop", "publicId", "systemId", "new", "InputSource", "new", "StringReader", "db", "setEntityResolver", "noop", "Document", "doc", "db", "parse", "new", "InputSource", "reader", "return", "doc", "catch", "Exception", "ex"], ["\u666e\u901a\u8d26\u6237\u7684\u7b7e\u540d", "Override", "public", "boolean", "signOneInputs", "Transaction", "tx", "ECKey", "key", "int", "inputIndex", "int", "numInputs", "tx", "getInputs", "size", "if", "numInputs", "inputIndex", "log", "warn", "\u4ea4\u6613\u8f93\u5165index\u8d8a\u754c", "return", "false", "TransactionInput", "txIn", "TransactionInput", "tx", "getInput", "inputIndex", "if", "txIn", "getFroms", "null", "txIn", "getFroms", "size"], ["Override", "public", "boolean", "recoverMessageReference", "MessageId", "messageReference", "throws", "Exception", "Message", "msg", "this", "store", "getMessage", "messageReference", "if", "msg", "null", "return", "recoverMessage", "msg", "else", "String", "err", "Failed", "to", "retrieve", "message", "for", "id", "messageReference"], ["ParameterizedTest", "MethodSource", "data", "void", "testChromeDriverVersions", "WebDriverManager", "wdm", "List", "String", "versions", "wdm", "getDriverVersions"], ["Override", "public", "ApplicationProtocolHandler", "getProtocolHandler", "String", "protocol", "for", "ApplicationProtocolHandler", "protocolHandler", "protocolHandlers", "if", "protocolHandler", "getProtocol", "null", "protocolHandler", "getProtocol", "equals", "protocol", "return", "protocolHandler"], ["VersionMessage", "peerVersion", "peer", "getPeerVersionMessage", "if", "peerVersion", "null", "peerVersion", "setBestHeight", "block", "getHeight", "for", "Transaction", "tx", "block", "getTxs", "\u79fb\u9664\u5167\u5b58\u4e2d\u7684\u4ea4\u6613", "MempoolContainer", "getInstace", "remove", "tx", "getHash", "\u533a\u5757\u53d8\u5316\u76d1\u542c\u5668", "if", "peerKit", "getBlockChangedListener", "null", "peerKit", "getBlockChangedListener", "onChanged", "1l", "block", "getHeight", "null", "hash", "\u8f6c\u53d1\u65b0\u533a\u5757\u6d88\u606f", "if", "log", "isDebugEnabled"], ["Only", "process", "PUT", "requests", "and", "request", "which", "URL", "can", "be", "found", "if", "request", "method", "equals", "HttpMethod", "PUT", "propertyUrls", "containsKey", "request", "uri", "log", "info", "Got", "a", "request", "to", "update", "propertyUrl", "request", "uri", "process", "body", "request", "bodyHandler", "buffer", "Map", "String", "String", "idProperties", "propertyUrls", "get", "request", "uri", "JsonObject", "body", "new", "JsonObject", "buffer", "toString", "boolean", "found", "false", "for", "String", "keyId", "idProperties", "keySet", "try", "to", "find", "a", "watched", "key", "in", "the", "body", "if", "body", "containsKey", "keyId", "save", "the", "value", "in", "the", "properties", "props", "put", "idProperties", "get", "keyId", "body", "getValue", "keyId", "refresh", "all", "refreshables", "refresh"], ["public", "boolean", "externalForceAuthorization", "CustomScriptConfiguration", "scriptConfiguration", "ExternalPostAuthnContext", "context", "try"], ["Test", "public", "void", "patternUpdate", "final", "String", "msg", "pattern", "StdoutRecorder", "stdoutRecorder", "new", "StdoutRecorder", "final", "String", "log", "stdoutRecorder", "record", "new", "Runnable", "Override", "public", "void", "run", "logger", "Logger", "getLogger", "patternUpdateLogback"], ["Override", "public", "void", "transactionalLogRecordReadFailure", "long", "transactionOffsets", "int", "transactionIndex", "long", "logVersion"], ["Test", "public", "void", "testA7SliceBug", "log", "info", "n", "testA7SliceBug", "Path", "path", "Paths", "get", "target", "test", "classes", "fixtures", "ipadmini", "A7", "flv", "try", "File", "file", "path", "toFile", "log", "info", "Reading", "file", "getName", "FLVReader", "reader", "new", "FLVReader", "file", "true", "ITag", "tag", "null", "AVCVideo", "video", "new", "AVCVideo", "while", "reader", "hasMoreTags", "tag", "reader", "readTag", "int", "timestamp", "tag", "getTimestamp"], ["public", "void", "setAdditionalTLDs", "List", "String", "additionalTLDs", "Support", "additional", "top", "level", "domains", "if", "additionalTLDs", "null", "additionalTLDs", "isEmpty", "try", "String", "tldsToAddArray", "additionalTLDs", "toArray", "new", "String"], ["Override", "public", "void", "exec", "int", "executionCounter", "List", "String", "args", "RedisUtils", "toPayload", "luaScriptState", "getSha", "keys", "size", "keys", "arguments", "redisAPI", "evalsha", "args", "event", "if", "event", "succeeded", "Integer", "insertCount", "event", "result", "toInteger", "Boolean", "timerStarted", "insertCount", "null", "insertCount", "promise", "complete", "timerStarted", "else", "String", "message", "event", "cause", "getMessage", "if", "message", "null", "message", "startsWith", "NOSCRIPT", "log", "warn", "StartQueueTimerRedisCommand", "script", "couldn", "t", "be", "found", "reload", "it"], ["public", "void", "handleEvent", "Event", "event", "String", "topic", "event", "getTopic", "if", "topic", "equals", "SlingConstants", "TOPIC_RESOURCE_CHANGED", "try", "String", "path", "String", "event", "getProperty", "SlingConstants", "PROPERTY_PATH"], ["public", "void", "notifyEndUser", "String", "scope", "String", "acrValues", "String", "authReqId", "String", "deviceRegistrationToken", "try", "if", "externalCibaEndUserNotificationService", "isEnabled", "log", "debug", "CIBA", "Authorization", "request", "sending", "to", "the", "end", "user", "with", "custom", "interception", "scripts", "ExternalCibaEndUserNotificationContext", "context", "new", "ExternalCibaEndUserNotificationContext", "scope", "acrValues", "authReqId", "deviceRegistrationToken", "appConfiguration", "cibaEncryptionService"], ["public", "boolean", "uploadDataServiceFile", "String", "fileName", "String", "serviceHierarchy", "DataHandler", "dh", "throws", "ExceptionException", "RemoteException", "if", "log", "isDebugEnabled", "log", "debug", "path", "to", "file", "dh", "getName", "String", "response", "dataServiceFileUploaderStub", "uploadService", "fileName", "serviceHierarchy", "dh", "if", "successful", "equalsIgnoreCase", "response", "log", "info", "Artifact", "Uploaded", "return", "true", "else"], ["Override", "public", "void", "initialize", "File", "configurationFile", "StatsLogger", "statsLogger", "throws", "IOException", "config", "mapper", "readValue", "configurationFile", "Config", "class", "PropertiesConfiguration", "propsConf", "new", "PropertiesConfiguration", "DistributedLogConfiguration", "conf", "new", "DistributedLogConfiguration", "try", "propsConf", "load", "new", "StringReader", "config", "dlogConf", "conf", "loadConf", "propsConf", "catch", "ConfigurationException", "e", "log", "error", "Failed", "to", "load", "dlog", "configuration", "n", "n", "config", "dlogConf", "e", "throw", "new", "IOException", "Failed", "to", "load", "configuration", "n", "config", "dlogConf", "n", "e", "URI", "dlogUri", "URI", "create", "config", "dlogUri", "dlshade", "org", "apache", "bookkeeper", "stats", "StatsLogger", "dlStatsLogger", "new", "CachingStatsLogger", "new", "StatsLoggerAdaptor", "statsLogger", "scope", "dlog", "namespace", "NamespaceBuilder", "newBuilder", "conf", "conf", "uri", "dlogUri", "statsLogger", "dlStatsLogger", "build"], ["public", "void", "copyToRepository", "InputStream", "source", "int", "size", "Artifact", "destination", "FileWriteMonitor", "monitor", "throws", "IOException", "if", "destination", "isResolved", "throw", "new", "IllegalArgumentException", "Artifact", "destination", "is", "not", "fully", "resolved", "is", "this", "a", "writable", "repository", "if", "rootFile", "canWrite", "throw", "new", "IllegalStateException", "This", "repository", "is", "not", "writable", "rootFile", "getAbsolutePath", "where", "are", "we", "going", "to", "install", "the", "file", "File", "location", "getLocation", "destination", "assure", "that", "there", "isn", "t", "already", "a", "file", "installed", "at", "the", "specified", "location", "if", "location", "exists", "throw", "new", "IllegalArgumentException", "Destination", "location", "getAbsolutePath", "already", "exists", "ArtifactTypeHandler", "typeHandler", "typeHandlers", "get", "destination", "getType", "if", "typeHandler", "null", "typeHandler", "DEFAULT_TYPE_HANDLER", "typeHandler", "install", "source", "size", "destination", "monitor", "location", "if", "destination", "getType", "equalsIgnoreCase", "car", "log", "debug", "Installed", "module", "configuration", "id", "location", "destination", "location"], ["Override", "public", "void", "didRemoveConfigurationScope", "DidRemoveConfigurationScopeParams", "params", "var", "idToRemove", "params", "getRemovedId", "var", "removed", "repository", "remove", "idToRemove", "if", "removed", "null"], ["Test", "groups", "wso2", "esb", "description", "Test", "Without", "No_ENTITY_BODY", "Property", "enabled", "false", "public", "void", "testWithoutOutOnlyPropertyTest", "throws", "Exception", "SimpleHttpClient", "httpClient", "new", "SimpleHttpClient", "Map", "String", "String", "headers", "new", "HashMap", "String", "String", "headers", "put", "Content", "Type", "text", "xml", "headers", "put", "SOAPAction", "urn", "mediate", "String", "payload", "soapenv", "Envelope", "xmlns", "soapenv", "http", "schemas", "xmlsoap", "org", "soap", "envelope", "n", "soapenv", "Header", "n", "soapenv", "Body", "My", "Request", "soapenv", "Envelope", "n", "soapenv", "Envelope"], ["private", "Date", "getExpirationDateFromResolutionCache", "String", "key", "Date", "result", "new", "Date", "try", "result", "dateFormat", "parse", "props", "getProperty", "getExpirationKey", "key", "return", "result", "catch", "Exception", "e"], ["Test", "void", "edgeVersionsTest", "String", "expectedVersions", "List", "String", "driverVersions", "WebDriverManager", "edgedriver", "getDriverVersions"], ["public", "void", "resolving", "Artifact", "configurationId"], ["Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "VersionMessage", "versionMessage", "VersionMessage", "message", "if", "peer", "getPeerVersionMessage", "null", "throw", "new", "ProtocolException", "Got", "two", "version", "messages", "from", "peer", "peer", "setPeerVersionMessage", "versionMessage", "Switch", "to", "the", "new", "protocol", "version", "long", "peerTime", "versionMessage", "getTime"], ["Override", "public", "void", "visitBytes", "String", "name", "long", "id", "ByteBuffer", "value"], ["public", "static", "void", "main", "String", "args", "throws", "Exception", "if", "args", "length", "args", "length", "String", "zkQuorum", "args", "String", "zkPath", "args"], ["public", "void", "startupFinished", "try", "Set", "gbeans", "kernel", "listGBeans", "AbstractNameQuery", "null", "for", "Iterator", "it", "gbeans", "iterator", "it", "hasNext", "AbstractName", "name", "AbstractName", "it", "next", "int", "state", "kernel", "getGBeanState", "name", "if", "state", "State", "RUNNING_INDEX"], ["public", "String", "submit", "RequestContext", "context", "String", "homeRealm", "Check", "if", "home", "realm", "is", "known", "already", "Cookie", "homeRealmCookie", "homeRealmReminder", "readCookie", "context", "if", "homeRealmCookie", "null"], ["Override", "public", "void", "onException", "IOException", "error", "synchronized", "this", "setHasExpired", "true", "only", "log", "if", "not", "stopped", "if", "stopped", "get"], ["public", "void", "debug", "String", "s"], ["private", "String", "getFrontchannelHtml", "CustomScriptConfiguration", "scriptConf", "EndSessionContext", "context", "try"], ["private", "void", "registerLocalStackEnvironment", "LocalStackContainer", "localStack", "ConfigurableEnvironment", "environment", "LocalStackProperties", "properties", "String", "host", "localStack", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "localstack", "host", "host", "map", "put", "embedded", "localstack", "accessKey", "localStack", "getAccessKey", "map", "put", "embedded", "localstack", "secretKey", "localStack", "getSecretKey", "String", "prefix", "embedded", "localstack", "Integer", "mappedPort", "localStack", "getMappedPort", "properties", "getEdgePort", "for", "LocalStackContainer", "Service", "service", "properties", "services", "map", "put", "prefix", "service", "localStack", "getEndpointConfiguration", "service", "getServiceEndpoint", "map", "put", "prefix", "service", "port", "mappedPort"], ["private", "void", "startDatabase", "StandaloneDatabaseContext", "context", "var", "namedDatabaseId", "context", "database", "getNamedDatabaseId", "try"], ["Test", "public", "void", "testFBLivePublish", "throws", "InterruptedException", "log", "info", "n", "testFBLivePublish", "String", "host", "rtmp", "api", "facebook", "com", "int", "port", "String", "app", "rtmp", "final", "String", "publishName", "ds", "s_l", "a", "ATiBCGoo4bLDTa4c"], ["inheritDoc", "public", "void", "decode", "IoSession", "session", "IoBuffer", "in", "ProtocolDecoderOutput", "out", "throws", "ProtocolCodecException", "get", "the", "connection", "from", "the", "session", "String", "sessionId", "String", "session", "getAttribute", "RTMPConnection", "RTMP_SESSION_ID"], ["private", "void", "registerKeycloakEnvironment", "KeycloakContainer", "keycloak", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "keycloak", "host", "keycloak", "getIp", "map", "put", "embedded", "keycloak", "http", "port", "keycloak", "getHttpPort", "map", "put", "embedded", "keycloak", "auth", "server", "url", "keycloak", "getAuthServerUrl"], ["Topic", "topic", "session", "createTopic", "topicFilter", "MessageConsumer", "consumer", "session", "createDurableSubscriber", "topic", "testName", "getMethodName", "assertNotNull", "consumer", "Topic", "advisoryTopic", "AdvisorySupport", "getSlowConsumerAdvisoryTopic", "ActiveMQDestination", "createDestination", "topicA", "ActiveMQDestination", "TOPIC_TYPE", "session", "connection", "createSession", "false", "Session", "AUTO_ACKNOWLEDGE", "MessageConsumer", "advisoryConsumer", "session", "createConsumer", "advisoryTopic", "start", "throwing", "messages", "at", "the", "consumer", "one", "for", "an", "ongoing", "series", "of", "matching", "topics", "for", "the", "subscription", "s", "filter", "MessageProducer", "producer", "session", "createProducer", "null", "Send", "one", "to", "the", "destination", "where", "we", "want", "a", "matching", "advisory", "producer", "send", "session", "createTopic", "topicA", "session", "createMessage", "for", "int", "i", "i", "MESSAGE_COUNT", "i", "BytesMessage", "m", "session", "createBytesMessage", "m", "writeBytes", "new", "byte", "Topic", "newTopic", "session", "createTopic", "topicPrefix", "UUID", "randomUUID", "toString"], ["public", "void", "store", "String", "projectKey", "ProjectBranches", "projectBranches", "var", "pbFilePath", "getProjectBranchesFilePath", "projectKey", "FileUtils", "mkdirs", "pbFilePath", "getParent", "var", "data", "adapt", "projectBranches"], ["public", "void", "removedBundle", "Bundle", "bundle", "BundleEvent", "event", "Object", "object", "List", "Driver", "drivers", "List", "Driver", "object", "unregister", "drivers"], ["param", "lockImpl", "the", "lock", "implementation", "param", "lock", "the", "lock", "param", "token", "the", "unique", "token", "param", "lockExpiryMs", "the", "expiry", "of", "the", "lock", "param", "log", "the", "logger", "return", "A", "boolean", "link", "Future", "whether", "the", "lock", "could", "has", "been", "acquired", "or", "not", "public", "static", "Future", "Boolean", "acquireLock", "Lock", "lockImpl", "String", "lock", "String", "token", "long", "lockExpiryMs", "Logger", "log", "Promise", "Boolean", "promise", "Promise", "promise", "if", "lockImpl", "null", "log", "info", "No", "lock", "implementation", "defined", "going", "to", "pretend", "like", "we", "got", "the", "lock", "promise", "complete", "Boolean", "TRUE", "return", "promise", "future"], ["Override", "public", "void", "deleteDruidCluster", "String", "clusterId", "throws", "IOException", "ClusterNotFoundException"], ["extract", "the", "specific", "resource", "int", "len", "while", "len", "inputStream", "read", "ZIP_BUFFER_SIZE", "contentBuffer", "appendBytes", "ZIP_BUFFER_SIZE", "len", "foundEntry", "true", "only", "one", "resource", "my", "be", "extracted", "this", "way", "break", "if", "foundEntry", "append", "content", "to", "response", "createResponse", "req", "StatusCode", "OK", "getStatusCode", "StatusCode", "OK", "getStatusMessage", "contentBuffer", "mimeTypeResolver", "resolveMimeType", "insidePath", "else", "return", "not", "found"], ["Test", "public", "void", "patternUpdate", "final", "String", "msg", "pattern", "StdoutRecorder", "stdoutRecorder", "new", "StdoutRecorder", "String", "log", "stdoutRecorder", "record", "new", "Runnable", "Override", "public", "void", "run", "logger", "LogManager", "getLogger", "patternUpdateLogback"], ["private", "void", "registerClickHouseEnvironment", "ClickHouseContainer", "clickHouseContainer", "ConfigurableEnvironment", "environment", "ClickHouseProperties", "properties", "String", "username", "String", "password", "Integer", "mappedPort", "clickHouseContainer", "getMappedPort", "properties", "port", "String", "host", "clickHouseContainer", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "clickhouse", "schema", "default", "map", "put", "embedded", "clickhouse", "host", "host", "map", "put", "embedded", "clickhouse", "port", "mappedPort", "map", "put", "embedded", "clickhouse", "user", "username", "map", "put", "embedded", "clickhouse", "password", "password"], ["protected", "TextWireFormat", "asTextWireFormat", "WireFormat", "wireFormat", "if", "wireFormat", "instanceof", "TextWireFormat", "return", "TextWireFormat", "wireFormat"], ["client", "setExceptionHandler", "new", "ClientExceptionHandler", "Override", "public", "void", "handleException", "Throwable", "throwable", "throwable", "printStackTrace", "IPendingServiceCallback", "connectCallback", "new", "IPendingServiceCallback", "Override", "public", "void", "resultReceived", "IPendingServiceCall", "call", "log", "info", "connectCallback", "ObjectMap", "map", "ObjectMap", "call", "getResult", "String", "code", "String", "map", "get", "code"], ["private", "void", "fillBuffer", "IoBuffer", "buf", "String", "byteDumpFile", "throws", "Exception", "File", "f", "new", "File", "String", "format", "s", "target", "test", "classes", "s", "System", "getProperty", "user", "dir", "byteDumpFile", "FileInputStream", "fis", "new", "FileInputStream", "f"], ["Override", "public", "void", "ioException", "OutputStream", "stream", "IOException", "e"], ["Override", "public", "void", "addRoute", "String", "urlPattern", "Route", "route"], ["Override", "public", "Future", "Optional", "Buffer", "cachedRequest", "String", "cacheIdentifier", "Promise", "Optional", "Buffer", "promise", "Promise", "promise", "redisAPI", "get", "CACHE_PREFIX", "cacheIdentifier", "event", "if", "event", "failed", "String", "message", "Failed", "to", "get", "cached", "request", "cacheIdentifier", "Cause", "logCause", "event"], ["Override", "public", "void", "handle", "ServerEvent", "event", "Class", "extends", "ServerEvent", "eventType", "event", "getClass", "if", "routes", "containsKey", "eventType", "routes", "get", "eventType", "forEach", "handler", "handler", "handle", "event", "else"], ["Override", "public", "Optional", "IssueChangedEvent", "parse", "String", "jsonData", "var", "payload", "gson", "fromJson", "jsonData", "IssueChangedEventPayload", "class", "if", "payload", "isInvalid"], ["Override", "public", "void", "exceptionOccurred", "Connection", "conn", "Exception", "exp"], ["private", "void", "registerDb2Environment", "Db2Container", "db2Container", "ConfigurableEnvironment", "environment", "Db2Properties", "properties", "Integer", "mappedPort", "db2Container", "getMappedPort", "Db2Container", "DB2_PORT", "String", "host", "db2Container", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "db2", "port", "mappedPort", "map", "put", "embedded", "db2", "host", "host", "map", "put", "embedded", "db2", "database", "properties", "getDatabase", "map", "put", "embedded", "db2", "user", "properties", "getUser", "map", "put", "embedded", "db2", "password", "properties", "getPassword", "String", "jdbcURL", "jdbc", "db2"], ["public", "CustomScriptConfiguration", "determineScript", "String", "scriptNames"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "azurite", "ToxiproxyContainer", "ContainerProxy", "azuriteBlobContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "AZURITE_BEAN_NAME", "GenericContainer", "azurite", "AzuriteProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "azurite", "properties", "getBlobStoragePort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "azurite", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "azurite", "toxiproxy", "blobStoragePort", "proxy", "getProxyPort", "map", "put", "embedded", "azurite", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedAzuriteBlobToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Override", "public", "void", "onStreamEvent", "Notify", "notify"], ["Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "if", "log", "isDebugEnabled"], ["public", "void", "testLoadTempAdvisoryTopics", "throws", "Exception", "for", "int", "i", "i", "MESSAGE_COUNT", "i", "TemporaryTopic", "tempTopic", "session", "createTemporaryTopic", "MessageConsumer", "consumer", "session", "createConsumer", "tempTopic", "MessageProducer", "producer", "session", "createProducer", "tempTopic", "consumer", "close", "producer", "close", "tempTopic", "delete", "AdvisoryBroker", "ab", "AdvisoryBroker", "broker", "getBroker", "getAdaptor", "AdvisoryBroker", "class", "assertTrue", "ab", "getAdvisoryDestinations", "size", "assertTrue", "ab", "getAdvisoryConsumers", "size", "assertTrue", "ab", "getAdvisoryProducers", "size", "RegionBroker", "rb", "RegionBroker", "broker", "getBroker", "getAdaptor", "RegionBroker", "class", "for", "Destination", "dest", "rb", "getDestinationMap", "values"], ["Test", "public", "void", "testRemvoeJob", "throws", "Exception", "JobSchedulerViewMBean", "view", "getJobSchedulerMBean", "assertNotNull", "view", "assertTrue", "view", "getAllJobs", "isEmpty", "scheduleMessage", "assertFalse", "view", "getAllJobs", "isEmpty", "TabularData", "jobs", "view", "getAllJobs", "assertEquals", "jobs", "size", "for", "Object", "key", "jobs", "keySet", "String", "jobId", "List", "key", "get", "toString"], ["public", "void", "checkSignature", "String", "appId", "ClientData", "clientData", "RawAuthenticateResponse", "rawAuthenticateResponse", "byte", "publicKey", "throws", "BadInputException", "String", "rawClientData", "clientData", "getRawClientData", "byte", "signedBytes", "packBytesToSign", "signatureVerification", "hash", "appId", "rawAuthenticateResponse", "getUserPresence", "rawAuthenticateResponse", "getCounter", "signatureVerification", "hash", "rawClientData"], ["protected", "final", "void", "log2SecurityLog", "String", "message", "String", "issuedBy", "String", "logMessage", "StringUtils", "isEmpty", "issuedBy", "message", "message", "issued", "by", "issuedBy"], ["protected", "void", "printMessage", "final", "String", "message", "final", "PrintStream", "stream", "final", "int", "priority", "assert", "message", "null", "assert", "stream", "null", "switch", "priority", "case", "Project", "MSG_ERR"], ["public", "String", "generateId", "IdType", "p_idType", "String", "p_idPrefix", "String", "inum", "int", "counter", "try", "while", "true", "final", "StringBuilder", "sb", "new", "StringBuilder", "sb", "append", "p_idPrefix", "append", "InumGenerator", "SEPARATOR", "append", "p_idType", "getInum", "append", "InumGenerator", "SEPARATOR", "if", "IdType", "CLIENTS", "p_idType", "IdType", "PEOPLE", "p_idType", "sb", "append", "INumGenerator", "generate", "else", "sb", "append", "INumGenerator", "generate", "inum", "sb", "toString", "if", "StringUtils", "isBlank", "inum"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "consul", "ToxiproxyContainer", "ContainerProxy", "consulContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_CONSUL", "GenericContainer", "consulContainer", "ConsulProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "consulContainer", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "consul", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "consul", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "consul", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedConsulToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["public", "SchemaDiffOperation", "addSchema", "RecursiveSchemaSet", "refSet", "CacheKey", "key", "Schema", "left", "Schema", "right", "if", "cache", "containsKey", "key"], ["Override", "public", "void", "handle", "final", "Callback", "callbacks", "throws", "IOException", "UnsupportedCallbackException", "String", "name", "null", "for", "Callback", "callback", "callbacks", "if", "callback", "instanceof", "RealmCallback", "RealmCallback", "callback", "setText", "XMPPServer", "getInstance", "getServerInfo", "getXMPPDomain", "else", "if", "callback", "instanceof", "NameCallback", "name", "NameCallback", "callback", "getName", "if", "name", "null", "name", "NameCallback", "callback", "getDefaultName"], ["private", "void", "removeMetric", "final", "String", "metric"], ["but", "with", "additional", "support", "for", "changing", "the", "coded", "timeout", "with", "an", "extended", "value", "return", "either", "a", "link", "FailOnTimeout", "or", "the", "supplied", "link", "Statement", "as", "appropriate", "SuppressWarnings", "deprecation", "Override", "protected", "Statement", "withPotentialTimeout", "FrameworkMethod", "frameworkMethod", "Object", "testInstance", "Statement", "next", "long", "testTimeout", "getOriginalTimeout", "frameworkMethod", "if", "testTimeout", "String", "multiplierString", "System", "getProperty", "org", "apache", "activemq", "junit", "testTimeoutMultiplier", "double", "multiplier", "try", "multiplier", "Double", "parseDouble", "multiplierString", "catch", "NullPointerException", "npe", "catch", "NumberFormatException", "nfe"], ["allowing", "brokerService", "stop", "then", "broker", "is", "stopped", "LeaseLockerIOExceptionHandler", "underTest", "new", "LeaseLockerIOExceptionHandler", "underTest", "setBrokerService", "brokerService", "try", "underTest", "handle", "new", "IOException", "fail", "except", "suppress", "reply", "ex", "catch", "SuppressReplyException", "expected", "assertTrue", "broker", "stopped", "state", "triggered", "Wait", "waitFor", "new", "Wait", "Condition", "Override", "public", "boolean", "isSatisified", "throws", "Exception"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "neo4j", "ToxiproxyContainer", "ContainerProxy", "neo4jContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_NEO4J", "Neo4jContainer", "neo4j", "Neo4jProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "neo4j", "properties", "getBoltPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "neo4j", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "neo4j", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "neo4j", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedNeo4jToxiProxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["if", "eventPublisherConfig", "null", "if", "log", "isDebugEnabled", "log", "debug", "Newly", "creating", "publisher", "configuration", "synchronized", "HL7EventPublisher", "class", "eventPublisherConfig", "new", "EventPublisherConfig", "DataPublisher", "asyncDataPublisher", "try", "if", "serverConfig", "getSecureUrl", "null", "asyncDataPublisher", "new", "DataPublisher", "DataEndpointConstants", "THRIFT_DATA_AGENT_TYPE", "serverConfig", "getUrl", "serverConfig", "getSecureUrl", "serverConfig", "getUsername", "serverConfig", "getPassword", "else", "asyncDataPublisher", "new", "DataPublisher", "serverConfig", "getUrl", "serverConfig", "getUsername", "serverConfig", "getPassword", "catch", "DataEndpointAgentConfigurationException", "DataEndpointException", "DataEndpointConfigurationException", "DataEndpointAuthenticationException", "TransportException", "e", "String", "errorMsg", "Error", "occurred", "while", "creating", "data", "publisher"], ["Override", "public", "void", "visitSequenceClose", "String", "name", "long", "id", "tab"], ["ParameterizedTest", "EnumSource", "names", "DEFAULT", "X32", "X64", "void", "testSpecificVersions", "Architecture", "architecture", "throws", "Exception", "for", "String", "specificVersion", "specificVersions", "WebDriverManager", "wdm", "WebDriverManager", "getInstance", "driverClass", "avoidResolutionCache", "driverVersion", "specificVersion", "if", "architecture", "DEFAULT", "wdm", "architecture", "architecture", "String", "osLabel", "if", "os", "null", "wdm", "operatingSystem", "os", "osLabel", "os", "os"], ["Override", "public", "CompletableFuture", "Void", "createTopic", "String", "topic", "int", "partitions", "return", "CompletableFuture", "runAsync", "try", "namespace", "createLog", "topic", "if", "partitions", "for", "int", "i", "i", "partitions", "i", "namespace", "createLog", "getFullyQualifiedPartitionedStreamName", "topic", "i"], ["Override", "public", "void", "started", "Path", "logFile", "long", "logVersion"], ["\u751f\u4ea7\u9632\u4f2a\u7801", "\u8c03\u7528accountKit\u91cc\u9762\u5c01\u88c5\u597d\u7684\u65b9\u6cd5", "throws", "IOException", "throws", "VerificationException", "Test", "public", "void", "makeAntifakeCode", "throws", "VerificationException", "IOException", "log", "info", "make", "anti", "code", "network", "getBestBlockHeight", "BroadcastMakeAntifakeCodeResult", "result", "null", "for", "int", "i", "i", "i", "String", "productTx", "ec0618332cd5330f82fb4d28b931b9e88c74db802b2ff7fff9bf84fa7f13187f", "Coin", "reward", "Coin", "ZERO", "result", "accountKit", "makeAntifakeCode", "productTx", "reward", "inchain123", "log", "info", "code", "i"], ["public", "void", "contextInitialized", "ServletContextEvent", "event", "LOG", "debug", "Initializing", "ActiveMQ", "WebConsole", "String", "webconsoleType", "getWebconsoleType", "ServletContext", "servletContext", "event", "getServletContext", "WebApplicationContext", "context", "createWebapplicationContext", "servletContext", "webconsoleType", "initializeWebClient", "servletContext", "context", "for", "embedded", "console", "log", "what", "port", "it", "uses", "if", "embedded", "equals", "webconsoleType", "show", "the", "url", "for", "the", "web", "consoles", "main", "page", "so", "people", "can", "spot", "it", "String", "port", "System", "getProperty", "jetty", "port", "String", "host", "System", "getProperty", "jetty", "host", "if", "host", "null", "port", "null"], ["Test", "public", "void", "testGetNextScheduledJob", "throws", "Exception", "JobSchedulerViewMBean", "view", "getJobSchedulerMBean", "assertNotNull", "view", "assertTrue", "view", "getAllJobs", "isEmpty", "scheduleMessage", "assertFalse", "view", "getAllJobs", "isEmpty", "long", "before", "System", "currentTimeMillis", "long", "toLate", "System", "currentTimeMillis", "String", "next", "view", "getNextScheduleTime", "long", "nextTime", "JobSupport", "getDataTime", "next"], ["private", "static", "Optional", "extends", "ServerEvent", "parse", "Event", "event", "var", "eventType", "event", "getType", "if", "parsersByType", "containsKey", "eventType"], ["public", "static", "void", "printMBeanInfo", "ObjectName", "objectName", "String", "className"], ["Test", "public", "void", "testClientDigest", "throws", "InterruptedException", "log", "info", "ntestClientDigest", "OutboundHandshake", "out", "new", "OutboundHandshake", "int", "algorithm", "byte", "handshakeBytes", "out", "generateClientRequest1", "array", "get", "the", "handshake", "digest", "int", "digestPos", "out", "getDigestOffset", "algorithm", "handshakeBytes"], ["public", "void", "variousLogMessageSafe", "Log", "log", "String", "input"], ["Release", "a", "lock", "param", "lockImpl", "the", "lock", "implementation", "param", "lock", "the", "lock", "param", "token", "the", "unique", "token", "param", "log", "the", "Logger", "public", "static", "void", "releaseLock", "Lock", "lockImpl", "String", "lock", "String", "token", "Logger", "log", "if", "lockImpl", "null", "log", "info", "No", "lock", "implementation", "defined", "going", "to", "pretend", "like", "we", "released", "the", "lock", "return"], ["private", "void", "registerCouchbaseEnvironment", "CouchbaseContainer", "couchbase", "ConfigurableEnvironment", "environment", "CouchbaseProperties", "properties", "Integer", "mappedHttpPort", "couchbase", "getBootstrapHttpDirectPort", "Integer", "mappedCarrierPort", "couchbase", "getBootstrapCarrierDirectPort", "String", "host", "couchbase", "getHost", "System", "setProperty", "com", "couchbase", "bootstrapHttpDirectPort", "String", "valueOf", "mappedHttpPort", "System", "setProperty", "com", "couchbase", "bootstrapCarrierDirectPort", "String", "valueOf", "mappedCarrierPort", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "couchbase", "bootstrapHttpDirectPort", "mappedHttpPort", "map", "put", "embedded", "couchbase", "bootstrapCarrierDirectPort", "mappedCarrierPort", "map", "put", "embedded", "couchbase", "host", "host", "map", "put", "embedded", "couchbase", "bucket", "properties", "bucket", "map", "put", "embedded", "couchbase", "user", "properties", "user", "map", "put", "embedded", "couchbase", "password", "properties", "password"], ["private", "void", "addVault", "Path", "pathToVault", "try", "if", "pathToVault", "getFileName", "toString", "endsWith", "CRYPTOMATOR_FILENAME_EXT", "vaultListManager", "add", "pathToVault", "getParent", "else", "vaultListManager", "add", "pathToVault", "catch", "IOException", "e"], ["Override", "public", "void", "removeConnection", "ConnectionContext", "context", "ConnectionInfo", "info", "Throwable", "error", "throws", "Exception"], ["Override", "public", "void", "run", "final", "FileTime", "now", "FileTime", "fromMillis", "System", "currentTimeMillis", "for", "final", "Handler", "handler", "this", "server", "getChildHandlersByClass", "WebAppContext", "class", "final", "File", "tempDirectory", "WebAppContext", "handler", "getTempDirectory", "try"], ["private", "static", "void", "log", "String", "message"], ["return", "true", "if", "this", "canHandleData", "data", "return", "false", "byte", "first", "data", "get", "log", "trace", "First", "byte", "HexDump", "toHexString", "first", "data", "rewind", "get", "frame", "type", "int", "frameType", "first", "MASK_VIDEO_FRAMETYPE", "if", "frameType", "FLAG_FRAMETYPE_KEYFRAME", "Not", "a", "keyframe", "try", "int", "lastInterframe", "numInterframes", "getAndIncrement", "if", "frameType", "FLAG_FRAMETYPE_DISPOSABLE"], ["driver", "findElement", "By", "xpath", "span", "text", "click", "should", "be", "wait", "for", "it", "WebDriverWait", "wait", "new", "WebDriverWait", "driver", "Duration", "ofSeconds", "wait", "until", "ExpectedConditions", "textToBe", "By", "className", "screen", "wdm", "stopRecording", "long", "timeoutMs", "System", "currentTimeMillis", "TimeUnit", "SECONDS", "toMillis", "REC_TIMEOUT_SEC", "File", "recFile", "do", "recFile", "new", "File", "targetFolder", "REC_FILENAME", "REC_EXT", "if", "System", "currentTimeMillis", "timeoutMs", "fail", "Timeout", "of", "REC_TIMEOUT_SEC", "seconds", "waiting", "for", "recording", "recFile", "break", "Thread", "sleep", "POLL_TIME_MSEC", "while", "recFile", "exists"], ["Override", "public", "void", "run", "try", "int", "i", "while", "consumer", "receive", "null", "i", "if", "i"], ["private", "void", "loggingThroughFile", "OAuth2AuditLog", "oAuth2AuditLog", "try"], ["Override", "public", "boolean", "accept", "File", "dir", "String", "name"], ["\u6d4b\u8bd5\u7f51\u7edc\u7684\u521b\u4e16\u5757", "Override", "public", "BlockStore", "getGengsisBlock", "BlockStore", "gengsisBlock", "new", "BlockStore", "this", "Hex", "decode", "", "Sha256Hash", "merkleHash", "gengsisBlock", "getBlock", "buildMerkleHash", "if", "log", "isDebugEnabled"], ["Assigns", "the", "property", "name", "to", "an", "id", "value", "of", "a", "given", "url", "br", "You", "can", "add", "for", "example", "pre", "addProperty", "vehicle", "v1", "id", "identityId", "identity", "id", "addProperty", "vehicle", "v1", "id", "vehicleId", "vehicle", "id", "pre", "param", "url", "param", "value", "param", "propertyName", "public", "void", "addProperty", "String", "url", "String", "value", "String", "propertyName"], ["public", "List", "DockerHubTag", "listTags", "String", "dockerImageFormat", "log", "debug", "Getting", "browser", "image", "list", "from", "Docker", "Hub", "List", "DockerHubTag", "results", "new", "ArrayList", "String", "dockerHubUrl", "config", "getDockerHubUrl", "String", "repo", "dockerImageFormat", "substring", "dockerImageFormat", "indexOf", "Object", "url", "String", "format", "GET_IMAGE_TAGS_PATH_FORMAT", "dockerHubUrl", "repo", "Gson", "gson", "new", "GsonBuilder", "create", "try", "do"], ["Test", "timeout", "public", "void", "testTempQueueIssue", "throws", "JMSException", "InterruptedException", "ActiveMQConnectionFactory", "factory", "new", "ActiveMQConnectionFactory", "vm", "localhost", "broker", "persistent", "false", "broker", "useJmx", "false", "final", "PooledConnectionFactory", "cf", "new", "PooledConnectionFactory", "cf", "setConnectionFactory", "factory", "Connection", "connection", "cf", "createConnection", "connection", "start", "Session", "session", "connection", "createSession", "false", "Session", "AUTO_ACKNOWLEDGE"], ["Override", "public", "void", "onWebSocketClose", "int", "arg0", "String", "arg1", "try", "if", "protocolLock", "tryLock", "protocolLock", "tryLock", "ORDERLY_CLOSE_TIMEOUT", "TimeUnit", "SECONDS"], ["private", "boolean", "executeExternalAuthenticate", "CustomScriptConfiguration", "customScriptConfiguration", "ExternalResourceOwnerPasswordCredentialsContext", "context", "try"], ["Override", "protected", "void", "channelRead0", "ChannelHandlerContext", "ctx", "RequestMessage", "msg", "throws", "Exception"], ["doc", "comment", "inherited", "from", "LogWriter", "public", "void", "logReceivedException", "Logger", "log", "IOException", "error"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "oracle", "ToxiproxyContainer", "ContainerProxy", "oracleContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_ORACLE", "OracleContainer", "oracle", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "oracle", "ORACLE_PORT", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "oracle", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "oracle", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "oracle", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedOracleToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["GET", "Path", "id", "Produces", "UmaConstants", "JSON_MEDIA_TYPE", "public", "Response", "getScopeDescription", "PathParam", "id", "String", "id"], ["Add", "Authenticated", "role", "List", "String", "roles", "wfRes", "getRoles", "if", "roles", "null", "roles", "isEmpty", "roles", "Collections", "singletonList", "Authenticated", "else", "if", "getFedizContext", "isAddAuthenticatedRole", "roles", "new", "ArrayList", "roles", "roles", "add", "Authenticated", "proceed", "creating", "the", "JAAS", "Subject", "FedizPrincipal", "principal", "new", "FederationPrincipalImpl", "wfRes", "getUsername", "roles", "wfRes", "getClaims", "wfRes", "getToken", "Session", "session", "Request", "request", "getSessionInternal", "Save", "Federation", "response", "in", "our", "session", "session", "setNote", "FederationAuthenticator", "FEDERATION_NOTE", "wfRes", "Save", "Federation", "response", "in", "public", "session", "request", "getSession", "true", "setAttribute", "FederationAuthenticator", "SECURITY_TOKEN", "wfRes", "getToken"], ["params", "put", "ignore", "csv", "String", "url", "YahooFinance", "HISTQUOTES_BASE_URL", "Utils", "getURLParameters", "params", "Get", "CSV", "from", "Yahoo", "log", "info", "Sending", "request", "url", "URL", "request", "new", "URL", "url", "RedirectableRequest", "redirectableRequest", "new", "RedirectableRequest", "request", "redirectableRequest", "setConnectTimeout", "YahooFinance", "CONNECTION_TIMEOUT", "redirectableRequest", "setReadTimeout", "YahooFinance", "CONNECTION_TIMEOUT", "URLConnection", "connection", "redirectableRequest", "openConnection", "InputStreamReader", "is", "new", "InputStreamReader", "connection", "getInputStream", "BufferedReader", "br", "new", "BufferedReader", "is", "skip", "the", "first", "line", "br", "readLine", "Parse", "CSV", "for", "String", "line", "br", "readLine", "line", "null", "line", "br", "readLine"], ["for", "String", "excludedPath", "excludedPaths", "String", "requestURI", "httpRequest", "getRequestURI", "if", "requestURI", "startsWith", "excludedPath", "chain", "doFilter", "httpRequest", "httpResponse", "return", "RequestWrapper", "requestWrapper", "new", "RequestWrapper", "httpRequest", "ResponseWrapper", "responseWrapper", "new", "ResponseWrapper", "httpResponse", "chain", "doFilter", "httpRequest", "httpResponse", "Duration", "duration", "duration", "start", "yuriyz", "log", "request", "and", "response", "only", "after", "filter", "handling", "we", "don", "t", "want", "to", "effect", "server", "functionality", "due", "to", "logging", "Currently", "content", "can", "be", "messed", "if", "it", "is", "InputStream", "if", "log", "isDebugEnabled"], ["private", "void", "registerRabbitMQEnvironment", "RabbitMQContainer", "rabbitMQ", "ConfigurableEnvironment", "environment", "RabbitMQProperties", "properties", "Integer", "mappedPort", "rabbitMQ", "getMappedPort", "properties", "getPort", "Integer", "mappedHttpPort", "rabbitMQ", "getMappedPort", "properties", "getHttpPort", "String", "host", "rabbitMQ", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "rabbitmq", "port", "mappedPort", "map", "put", "embedded", "rabbitmq", "host", "host", "map", "put", "embedded", "rabbitmq", "vhost", "properties", "getVhost", "map", "put", "embedded", "rabbitmq", "user", "rabbitMQ", "getAdminUsername", "map", "put", "embedded", "rabbitmq", "password", "rabbitMQ", "getAdminPassword", "map", "put", "embedded", "rabbitmq", "httpPort", "mappedHttpPort"], ["Override", "protected", "void", "addGraph", "final", "String", "name", "final", "String", "configurationFile", "try", "final", "Graph", "newGraph", "GraphFactory", "open", "configurationFile", "putGraph", "name", "newGraph"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "influxdb", "ToxiproxyContainer", "ContainerProxy", "influxdbContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "EMBEDDED_INFLUX_DB", "ConcreteInfluxDbContainer", "influxdb", "InfluxDBProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "influxdb", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "influxdb", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "influxdb", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "influxdb", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedInfluxDBToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Return", "scope", "associated", "with", "given", "path", "from", "given", "root", "scope", "param", "root", "Scope", "to", "start", "from", "param", "path", "Scope", "path", "return", "Scope", "object", "public", "IScope", "resolveScope", "IScope", "root", "String", "path"], ["Override", "public", "void", "visitFragmentClose", "String", "name", "long", "id", "tab"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "postgresql", "ToxiproxyContainer", "ContainerProxy", "postgresqlContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_POSTGRESQL", "PostgreSQLContainer", "postgresql", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "postgresql", "PostgreSQLContainer", "POSTGRESQL_PORT", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "postgresql", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "postgresql", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "postgresql", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedPostgresqlToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["public", "boolean", "revokeToken", "CustomScriptConfiguration", "script", "RevokeTokenContext", "context", "try"], ["Performs", "the", "initial", "GET", "request", "of", "the", "zip", "resource", "param", "req", "param", "zipUrl", "param", "insidePath", "protected", "void", "performGETRequest", "final", "HttpServerRequest", "req", "final", "String", "zipUrl", "final", "String", "insidePath", "Logger", "log", "RequestLoggerFactory", "getLogger", "ZipExtractHandler", "class", "req", "perform", "Initial", "GET", "request", "selfClient", "request", "HttpMethod", "GET", "zipUrl", "onComplete", "asyncReqResult", "if", "asyncReqResult", "failed"], ["Test", "public", "void", "testFLVReaderFileWithMetaData", "log", "info", "n", "testFLVReaderFileWithMetaData", "String", "paths", "new", "String", "target", "test", "classes", "fixtures", "flashContent", "flv", "target", "test", "classes", "fixtures", "flashContent1", "flv", "try", "for", "String", "path", "paths", "File", "file", "Paths", "get", "path", "toFile", "if", "file", "exists", "file", "canRead", "log", "info", "Reading", "file", "getName", "FLVReader", "reader", "new", "FLVReader", "file", "false", "ITag", "tag", "null", "while", "reader", "hasMoreTags", "tag", "reader", "readTag", "if", "tag", "null", "tag", "getDataType"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "pulsar", "ToxiproxyContainer", "ContainerProxy", "pulsarContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "EMBEDDED_PULSAR", "PulsarContainer", "embeddedPulsar", "PulsarProperties", "pulsarProperties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "embeddedPulsar", "pulsarProperties", "getBrokerPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "pulsar", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "pulsar", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "pulsar", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedPulsarToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["private", "void", "updateConnection", "AbstractConnectionConfiguration", "connectionConfiguration", "var", "connectionId", "connectionConfiguration", "getConnectionId", "var", "previous", "repository", "addOrReplace", "connectionConfiguration", "if", "previous", "null"], ["public", "MqttAsyncClient", "getMqttClient", "String", "identifier", "if", "tenantLoadingFlagMap", "containsKey", "identifier", "this", "is", "manually", "tenant", "loading", "case", "should", "return", "the", "client", "return", "mqttClientMap", "get", "identifier", "else", "MqttAsyncCallback", "callback", "mqttCallbackMap", "get", "identifier", "this", "is", "the", "case", "where", "recreation", "of", "same", "bounded", "inbound", "endpoint", "for", "server", "host", "server", "port", "client", "id", "String", "msg", "Client", "ID", "callback", "getMqttConnectionConsumer", "getMqttAsyncClient", "getClientId", "Server", "Host", "callback", "getMqttConnectionConsumer", "getMqttConnectionFactory", "getServerHost", "Server", "Port", "callback", "getMqttConnectionConsumer", "getMqttConnectionFactory", "getServerPort", "is", "bound", "to", "existing", "MQTT", "Inbound", "Endpoint"], ["public", "void", "commence", "final", "HttpServletRequest", "servletRequest", "final", "HttpServletResponse", "response", "final", "AuthenticationException", "authenticationException", "throws", "IOException", "ServletException", "FedizContext", "fedContext", "federationConfig", "getFedizContext"], ["ngramInfoIterator", "ngramInfo", "iterator", "for", "String", "term", "terms", "try", "if", "ngramInfoIterator", "seekExact", "new", "BytesRef", "term", "getBytes", "UTF", "PostingsEnum", "docEnum", "ngramInfoIterator", "postings", "null", "int", "doc", "while", "doc", "docEnum", "nextDoc", "PostingsEnum", "NO_MORE_DOCS", "tf", "in", "document", "int", "tfid", "docEnum", "freq", "feature", "increment", "term", "tfid", "feature", "incrementTermFrequencyInDocument", "term", "doc", "tfid", "totalSuccess", "else", "String", "warning", "String", "format", "s", "is", "a", "candidate", "term", "but", "not", "indexed", "in", "the", "n", "gram", "information", "field", "It", "s", "score", "may", "be", "mis", "computed", "You", "may", "have", "used", "different", "text", "analysis", "process", "e", "g", "different", "tokenizers", "different", "analysis", "order", "limited", "n", "gram", "range", "for", "the", "text", "candidate", "term", "and", "text", "ngram", "fields", "term"], ["Override", "public", "CompletableFuture", "Void", "createTopic", "String", "topic", "int", "partitions", "try", "JetStreamManagement", "jsm", "connection", "jetStreamManagement", "StreamInfo", "streamInfo", "jsm", "addStream", "StreamConfiguration", "builder", "name", "topic", "subjects", "topic", "storageType", "StorageType", "File", "replicas", "config", "replicationFactor", "build"], ["Override", "public", "void", "visitUTF8", "String", "name", "long", "id", "CharSequence", "value"], ["Override", "public", "void", "recoveryCleanupRegistered", "Path", "indexFile", "IndexDescriptor", "index"], ["Override", "public", "void", "pauseDetected", "VmPauseMonitor", "VmPauseInfo", "info"], ["public", "void", "fatalError", "SAXParseException", "exception"], ["Override", "public", "void", "uncaughtException", "Thread", "t", "Throwable", "e", "if", "e", "instanceof", "OutOfMemoryError"], ["Optional", "URL", "buildUrl", "String", "driverVersion", "Config", "config", "Optional", "URL", "optionalUrl", "empty", "if", "config", "isUseMirror", "String", "downloadUrlPattern", "config", "getEdgeDownloadUrlPattern", "OperatingSystem", "os", "config", "getOperatingSystem", "Architecture", "arch", "config", "getArchitecture", "String", "archLabel", "os", "isWin", "arch", "toString", "String", "osName", "arch", "ARM64", "os", "getName", "arm", "String", "builtUrl", "os", "MAC", "arch", "ARM64", "String", "format", "downloadUrlPattern", "driverVersion", "mac", "64_m1", "String", "format", "downloadUrlPattern", "driverVersion", "osName", "archLabel"], ["public", "void", "reading", "Artifact", "configurationId"], ["public", "void", "stopScheduledReport", "String", "reportName", "throws", "Exception", "try", "reportingAdminServiceStub", "stopScheduledReport", "reportName", "catch", "Exception", "e", "String", "msg", "Unable", "to", "stop", "the", "scheduled", "report"], ["private", "void", "registerEnvironment", "GenericContainer", "grafana", "ConfigurableEnvironment", "environment", "GrafanaProperties", "properties", "Integer", "mappedPort", "grafana", "getMappedPort", "properties", "port", "String", "host", "grafana", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "grafana", "host", "host", "map", "put", "embedded", "grafana", "port", "mappedPort", "map", "put", "embedded", "grafana", "username", "properties", "getUsername", "map", "put", "embedded", "grafana", "password", "properties", "getPassword"], ["private", "void", "handleException", "String", "msg", "Exception", "ex"], ["public", "void", "scheduleReport", "ReportConfigurationBean", "configuration", "throws", "Exception", "try", "reportingAdminServiceStub", "scheduleReport", "configuration", "catch", "Exception", "e", "String", "msg", "Unable", "to", "schedule", "the", "report"], ["Override", "public", "Void", "extractData", "ResultSet", "rs", "throws", "SQLException", "DataAccessException", "Upgrade19DataPointRowMapper", "dprw", "new", "Upgrade19DataPointRowMapper", "try", "PrintWriter", "pw", "new", "PrintWriter", "createUpdateLogOutputStream", "while", "rs", "next", "RawDataPoint", "rdp", "dprw", "mapRow", "rs", "rs", "getRow", "if", "rdp", "dataTypeId", "null", "String", "message", "Updating", "dpid", "rdp", "id", "setting", "data", "type", "id", "to", "rdp", "dataTypeId", "if", "LOG", "isDebugEnabled"], ["Logging", "logEvent", "true", "public", "String", "handleRequest", "final", "ScheduledEvent", "input", "final", "Context", "context", "String", "queueUrl", "System", "getenv", "QUEUE_URL", "Push", "messages", "on", "each", "invoke", "List", "SendMessageBatchRequestEntry", "batchRequestEntries", "IntStream", "range", "mapToObj", "value", "Map", "String", "MessageAttributeValue", "attributeValueHashMap", "new", "HashMap", "attributeValueHashMap", "put", "Key", "value", "MessageAttributeValue", "builder", "dataType", "String", "stringValue", "Value", "value", "build", "byte", "array", "new", "byte", "random", "nextBytes", "array", "return", "SendMessageBatchRequestEntry", "builder", "messageAttributes", "attributeValueHashMap", "id", "input", "getId", "value", "messageBody", "Sample", "Message", "value", "build", "collect", "toList", "SendMessageBatchResponse", "sendMessageBatchResponse", "sqsClient", "sendMessageBatch", "SendMessageBatchRequest", "builder", "queueUrl", "queueUrl", "entries", "batchRequestEntries", "build"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "artifactory", "ToxiproxyContainer", "ContainerProxy", "artifactoryContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "ARTIFACTORY_BEAN_NAME", "GenericContainer", "artifactory", "ArtifactoryProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "artifactory", "properties", "getRestApiPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "artifactory", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "artifactory", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "artifactory", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedArtifactoryToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["SonarLintInputFile", "create", "ClientInputFile", "inputFile", "var", "defaultInputFile", "new", "SonarLintInputFile", "inputFile", "f", "LOG", "debug", "Initializing", "metadata", "of", "file", "f", "uri", "var", "charset", "f", "charset", "InputStream", "stream", "try", "stream", "f", "inputStream", "catch", "IOException", "e", "throw", "new", "IllegalStateException", "Failed", "to", "open", "a", "stream", "on", "file", "f", "uri", "e", "return", "fileMetadata", "readMetadata", "stream", "charset", "null", "charset", "Charset", "defaultCharset", "f", "uri", "exclusionsScanner", "createCharHandlerFor", "f", "defaultInputFile", "setType", "inputFile", "isTest", "Type", "TEST", "Type", "MAIN", "var", "fileLanguage", "inputFile", "language", "if", "fileLanguage", "null"], ["This", "is", "to", "get", "the", "GenericInboundListener", "instance", "for", "given", "params", "param", "inboundParams", "return", "public", "static", "synchronized", "GenericInboundListener", "getInstance", "InboundProcessorParams", "inboundParams", "String", "classImpl", "inboundParams", "getClassImpl", "String", "name", "inboundParams", "getName", "if", "null", "classImpl", "String", "msg", "GenericEndpointManager", "class", "not", "found"], ["Override", "public", "void", "visitSignedInteger", "String", "name", "long", "id", "int", "value"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "rabbitmq", "ToxiproxyContainer", "ContainerProxy", "rabbitmqContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_RABBITMQ", "RabbitMQContainer", "rabbitmq", "ConfigurableEnvironment", "environment", "RabbitMQProperties", "properties", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "rabbitmq", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "rabbitmq", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "rabbitmq", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "rabbitmq", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedRabbitmqToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["for", "VirtualDestination", "existingVirtualDest", "existingVirtualDests", "if", "newVirtualDests", "contains", "existingVirtualDest", "removedVirtualDests", "add", "existingVirtualDest", "virtualDestinationInterceptor", "setVirtualDestinations", "getVirtualDestinations", "plugin", "info", "applied", "updates", "to", "virtualDestinationInterceptor", "updatedExistingInterceptor", "true", "ConnectionContext", "connectionContext", "try", "connectionContext", "plugin", "getBrokerService", "getAdminConnectionContext", "signal", "updates", "if", "plugin", "getBrokerService", "isUseVirtualDestSubs", "for", "VirtualDestination", "removedVirtualDest", "removedVirtualDests", "plugin", "virtualDestinationRemoved", "connectionContext", "removedVirtualDest"], ["public", "SessionId", "getConsentSession", "HttpServletRequest", "httpRequest", "HttpServletResponse", "httpResponse", "String", "userDn", "boolean", "create", "String", "cookieId", "cookieService", "getConsentSessionIdFromCookie", "httpRequest"], ["public", "Path", "dumpState", "Locks", "lm", "LockWorker", "workers", "throws", "IOException", "try", "OutputStream", "out", "Files", "newOutputStream", "file", "InternalLogProvider", "logProvider", "new", "Log4jLogProvider", "out", "locks", "held", "by", "the", "lock", "manager", "lm", "accept", "new", "DumpLocksVisitor", "logProvider", "getLog", "LockWorkFailureDump", "class", "rag", "manager", "state", "workers", "state", "InternalLog", "log", "logProvider", "getLog", "getClass", "for", "LockWorker", "worker", "workers", "what", "each", "is", "doing", "and", "have", "up", "to", "now"], ["Override", "public", "void", "onAcceptError", "Exception", "error"], ["private", "void", "processLine", "String", "line", "if", "line", "trim", "length", "return", "first", "check", "the", "single", "regexp", "patterns", "that", "can", "be", "used", "to", "totally", "exclude", "a", "file", "for", "Pattern", "pattern", "allFilePatterns", "if", "pattern", "matcher", "line", "find", "nothing", "more", "to", "do", "on", "this", "file"], ["inheritDoc", "Override", "protected", "void", "startConnector", "String", "server", "int", "port"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "mssqlserver", "ToxiproxyContainer", "ContainerProxy", "mssqlserverContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_MSSQLSERVER", "EmbeddedMSSQLServerContainer", "mssqlserver", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "mssqlserver", "MSSQLServerContainer", "MS_SQL_SERVER_PORT", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "mssqlserver", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "mssqlserver", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "mssqlserver", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedMSSQLServerToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["for", "IssuePattern", "pattern", "multicriteriaPatterns", "if", "pattern", "matchRule", "issue", "ruleKey", "atLeastOneRuleMatched", "true", "var", "component", "DefaultFilterableIssue", "issue", "getComponent", "if", "component", "isFile", "var", "file", "SonarLintInputFile", "component", "if", "pattern", "matchFile", "file", "relativePath", "atLeastOnePatternFullyMatched", "true", "matchingPattern", "pattern", "if", "atLeastOneRuleMatched", "if", "atLeastOnePatternFullyMatched"], ["private", "static", "void", "parseSetting", "Map", "SettingKey", "Serializable", "settings", "String", "name", "String", "value", "SettingKey", "settingKey", "SettingKey", "definedSettingKeys", "get", "name", "toLowerCase", "Locale", "ROOT", "if", "settingKey", "null", "settings", "put", "settingKey", "settingKey", "type", "deserializeURL", "value", "else"], ["feature", "mweHasSymbol", "term", "true", "else", "feature", "mweHasSymbol", "term", "false", "if", "metadata", "getMetaData", "MWEMetadataType", "HAS_NUMERIC_TOKEN", "equalsIgnoreCase", "true", "feature", "mweHasNumber", "term", "true", "else", "feature", "mweHasNumber", "term", "false", "if", "metadata", "getMetaData", "MWEMetadataType", "HAS_ACRONYM_TOKEN", "equalsIgnoreCase", "true", "feature", "mweHasAcronym", "term", "true", "else", "feature", "mweHasAcronym", "term", "false", "totalSuccess", "else", "String", "warning", "String", "format", "s", "is", "a", "candidate", "term", "but", "not", "indexed", "in", "the", "n", "gram", "information", "field", "It", "s", "score", "may", "be", "mis", "computed", "You", "may", "have", "used", "different", "text", "analysis", "process", "e", "g", "different", "tokenizers", "different", "analysis", "order", "limited", "n", "gram", "range", "for", "the", "text", "candidate", "term", "and", "text", "ngram", "fields", "term"], ["Override", "public", "void", "onException", "JMSException", "exception"], ["private", "void", "tryToEnqueueFileOpenRequest", "AppLaunchEvent", "launchEvent", "if", "launchEventQueue", "offer", "launchEvent"], ["Override", "public", "void", "onSharedObjectUpdate", "ISharedObjectBase", "so", "Map", "String", "Object", "map"], ["Override", "public", "void", "onCommand", "Object", "command", "if", "command", "getClass", "ConnectionInfo", "class", "command", "getClass", "BrokerInfo", "class", "synchronized", "this", "try"], ["fail", "only", "when", "we", "get", "an", "authoritative", "answer", "from", "the", "db", "w", "o", "exceptions", "Override", "protected", "boolean", "hasLockOwnership", "throws", "IOException", "boolean", "hasLock", "true", "if", "broker", "getPersistenceAdapter", "instanceof", "LockableServiceSupport", "Locker", "locker", "LockableServiceSupport", "broker", "getPersistenceAdapter", "getLocker", "if", "locker", "null", "try", "if", "locker", "keepAlive", "hasLock", "false", "catch", "SuppressReplyException", "ignoreWhileHandlingInProgress", "catch", "IOException", "ignored", "if", "hasLock"], ["Override", "public", "Message", "formatException", "String", "origin", "String", "arg1", "Message", "arg2", "Throwable", "arg3", "NotImplementedException", "e", "new", "NotImplementedException"], ["Crypto", "issuerCrypto", "CertsUtils", "getCryptoFromCertificate", "idp", "getCertificate", "X509Certificate", "issuerCerts", "null", "String", "issuerKeyName", "null", "if", "issuerCrypto", "null", "CryptoType", "cryptoType", "new", "CryptoType", "CryptoType", "TYPE", "ALIAS", "issuerKeyName", "issuerCrypto", "getDefaultX509Identifier", "cryptoType", "setAlias", "issuerKeyName", "issuerCerts", "issuerCrypto", "getX509Certificates", "cryptoType", "if", "issuerCerts", "null", "issuerCerts", "length", "throw", "new", "WSSecurityException", "WSSecurityException", "ErrorCode", "FAILURE", "empty", "new", "Object", "No", "issuer", "certs", "were", "found", "to", "sign", "the", "SAML", "Assertion", "using", "issuer", "name", "issuerKeyName", "String", "sigAlgo", "SignatureConstants", "ALGO_ID_SIGNATURE_RSA_SHA1", "String", "pubKeyAlgo", "issuerCerts", "getPublicKey", "getAlgorithm"], ["Override", "public", "void", "enable", "long", "reconciledTransactionId", "requireNonNegative", "reconciledTransactionId", "initializationLock", "writeLock", "lock", "try", "if", "sequence", "null"], ["Override", "protected", "List", "File", "postDownload", "File", "archive"], ["public", "void", "log", "AuditLogEntry", "entry", "for", "AuditLog", "log", "factory", "getAuditLogs"], ["errorMap", "put", "exceptionClass", "throwable", "getClass", "getName", "errorMap", "put", "message", "throwable", "getMessage", "errorMap", "put", "path", "path", "if", "statusCode", "statusCode", "errorMap", "put", "code", "Integer", "toString", "statusCode", "if", "throwable", "getCause", "null", "try", "errorMap", "put", "cause", "objectMapper", "valueToTree", "throwable", "getCause", "catch", "Exception", "e", "errorMap", "put", "cause", "throwable", "getCause", "getMessage", "if", "throwable", "getStackTrace", "null", "statusCode"], ["Test", "void", "test", "String", "browserContainerId", "wdm", "getDockerBrowserContainerId", "String", "command", "ls", "l", "String", "result", "wdm", "getDockerService", "execCommandInContainer", "browserContainerId", "command"], ["public", "Object", "addingBundle", "Bundle", "bundle", "BundleEvent", "event", "URL", "providerURL", "bundle", "getEntry", "META", "INF", "services", "java", "sql", "Driver", "if", "providerURL", "null", "List", "Driver", "drivers", "loadDrivers", "bundle", "providerURL", "register", "drivers"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "grafana", "ToxiproxyContainer", "ContainerProxy", "grafanaContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "GRAFANA_BEAN_NAME", "GenericContainer", "grafana", "GrafanaProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "grafana", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "grafana", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "grafana", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "grafana", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedGrafanaToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Override", "public", "Response", "requestBackchannelDeviceRegistrationPost", "String", "idTokenHint", "String", "deviceRegistrationToken", "HttpServletRequest", "httpRequest", "HttpServletResponse", "httpResponse", "SecurityContext", "securityContext", "OAuth2AuditLog", "oAuth2AuditLog", "new", "OAuth2AuditLog", "ServerUtil", "getIpAddress", "httpRequest", "Action", "BACKCHANNEL_DEVICE_REGISTRATION", "ATTENTION", "please", "do", "not", "add", "more", "parameter", "in", "this", "debug", "method", "because", "it", "will", "not", "work", "with", "Seam", "Final", "there", "is", "limit", "of", "parameters", "hardcoded", "see", "org", "jboss", "seam", "core", "Interpolator", "interpolate"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "mysql", "ToxiproxyContainer", "ContainerProxy", "mysqlContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_MYSQL", "MySQLContainer", "mysql", "MySQLProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "mysql", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "mysql", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "mysql", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "mysql", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedMysqlToxiProxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["param", "algorithm", "The", "encryption", "decryption", "algorithm", "param", "javaSecurityAPIProvider", "return", "The", "cleartext", "throws", "CryptoException", "If", "something", "unexpected", "happens", "during", "the", "decryption", "operation", "public", "byte", "decrypt", "byte", "ciphertext", "String", "algorithm", "String", "javaSecurityAPIProvider", "throws", "CryptoException", "try", "Cipher", "cipher", "if", "StringUtils", "isBlank", "javaSecurityAPIProvider", "cipher", "Cipher", "getInstance", "algorithm", "else", "cipher", "Cipher", "getInstance", "algorithm", "javaSecurityAPIProvider", "cipher", "init", "Cipher", "DECRYPT_MODE", "getPrivateKeyFromKeyStore", "if", "log", "isDebugEnabled"], ["public", "void", "onStatus", "IConnection", "conn", "ObjectMap", "String", "Object", "status"], ["private", "void", "traceOrDebug", "boolean", "traceOn", "String", "msg", "if", "traceOn", "trace", "info", "msg", "if", "log", "isDebugEnabled"], ["Override", "public", "void", "put", "final", "String", "uri", "MultiMap", "headers", "Buffer", "buffer", "final", "Handler", "Integer", "doneHandler", "client", "request", "HttpMethod", "PUT", "uri", "onComplete", "asyncResult", "if", "asyncResult", "failed"], ["public", "void", "variousLogMessageUnsafe", "String", "input", "Log", "log"], ["public", "static", "File", "getRootDirectory", "String", "path", "if", "path", "null", "String", "msg", "Path", "can", "not", "be", "null"], ["catch", "Exception", "e", "log", "warn", "Could", "not", "replace", "wildcards", "with", "environment", "properties", "for", "the", "router", "configuration", "due", "to", "following", "reason", "e", "getMessage", "return", "Optional", "empty", "Integer", "requestHopsLimit", "config", "getInteger", "REQUEST_HOPS_LIMIT_PROPERTY", "JsonObject", "authConfigs", "config", "getJsonObject", "AUTH_CONFIGS_PROPERTY", "if", "authConfigs", "null", "return", "Optional", "of", "new", "RouterConfiguration", "requestHopsLimit", "Collections", "emptyMap", "Map", "OAuthId", "OAuthConfiguration", "oAuthConfigurationsMap", "new", "HashMap", "for", "String", "authConfigId", "authConfigs", "fieldNames", "JsonObject", "authConfig", "authConfigs", "getJsonObject", "authConfigId", "String", "flowTypeStr", "authConfig", "getString", "FLOWTYPE_PROPERTY", "OAuth2FlowType", "flowType", "flowTypeFromStr", "flowTypeStr", "if", "flowType", "null"], ["public", "TextSearchIndex", "ServerProject", "getTextSearchIndex", "String", "connectionId", "try", "return", "textSearchIndexCache", "get", "connectionId"], ["protected", "InternalServerErrorException", "internalServerError", "Exception", "e"], ["private", "void", "handleCreateProducers", "Context", "ctx", "throws", "Exception", "List", "String", "topics", "List", "String", "mapper", "readValue", "ctx", "body", "List", "class"], ["private", "void", "sendTestMessages", "int", "numMessages", "throws", "JMSException", "Session", "session", "connection", "createSession", "true", "Session", "SESSION_TRANSACTED", "MessageProducer", "producer", "session", "createProducer", "queue", "final", "TextMessage", "textMessage", "session", "createTextMessage", "textMessage", "setText", "Message", "for", "int", "i", "i", "numMessages", "i", "producer", "send", "textMessage", "if", "i"], ["Override", "public", "void", "exec", "int", "executionCounter", "List", "String", "args", "RedisUtils", "toPayload", "luaScriptState", "getSha", "keys", "size", "keys", "arguments", "redisAPI", "evalsha", "args", "event", "if", "event", "succeeded", "promise", "complete", "else", "String", "message", "event", "cause", "getMessage", "if", "message", "null", "message", "startsWith", "NOSCRIPT", "log", "warn", "ReOpenCircuitRedisCommand", "script", "couldn", "t", "be", "found", "reload", "it"], ["Override", "public", "CompletableFuture", "BenchmarkProducer", "createProducer", "String", "topic", "return", "CompletableFuture", "supplyAsync", "try", "DistributedLogManager", "dlm", "namespace", "openLog", "topic"], ["EventListener", "Async", "taskExecutor", "public", "void", "processArticleDeleteEvent", "ArticleDeleteEvent", "articleDeleteEvent", "throws", "InterruptedException", "Thread", "sleep"], ["Override", "public", "void", "offerReconciledTransactionId", "long", "reconciledTransactionId", "requireNonNegative", "reconciledTransactionId", "initializationLock", "readLock", "lock", "try", "if", "sequence", "null"], ["public", "String", "getAttributeNames", "String", "className", "throws", "Exception", "try", "return", "reportingAdminServiceStub", "getAttributeNames", "className", "catch", "Exception", "e", "String", "msg", "Unable", "to", "get", "attribute", "names"], ["public", "void", "deleteSavedReport", "String", "name", "throws", "Exception", "try", "reportingAdminServiceStub", "deleteSavedReport", "name", "catch", "Exception", "e", "String", "msg", "Unable", "to", "delete", "saved", "report"], ["ByteArrayOutputStream", "out", "new", "ByteArrayOutputStream", "Output", "output", "new", "Output", "out", "kryoTL", "get", "writeObject", "output", "mapping", "output", "flush", "flowData", "eventData", "compress", "out", "toByteArray", "if", "log", "isDebugEnabled", "ObjectMapper", "mapper", "new", "ObjectMapper", "String", "jsonString", "null", "try", "jsonString", "mapper", "writeValueAsString", "mapping", "catch", "JsonProcessingException", "e", "log", "error", "Unable", "to", "convert", "e", "log", "debug", "Uncompressed", "data"], ["inheritDoc", "public", "void", "run", "while", "isStarted", "providerPipe", "null", "consumerPipe", "null", "try", "IMessage", "message", "providerPipe", "pullMessage", "if", "log", "isDebugEnabled"], ["Override", "public", "void", "onStreamEvent", "Notify", "notify"], ["public", "void", "handle", "throws", "FacesException", "final", "Iterator", "ExceptionQueuedEvent", "i", "getUnhandledExceptionQueuedEvents", "iterator", "while", "i", "hasNext", "ExceptionQueuedEvent", "event", "i", "next", "ExceptionQueuedEventContext", "context", "ExceptionQueuedEventContext", "event", "getSource", "Throwable", "t", "context", "getException", "final", "FacesContext", "fc", "FacesContext", "getCurrentInstance", "final", "ExternalContext", "externalContext", "fc", "getExternalContext", "try", "if", "isInvalidSessionStateException", "t"], ["public", "DataHandler", "modifyExcelURL", "String", "dbsFilePath", "throws", "XMLStreamException", "IOException", "try", "OMElement", "dbsFile", "AXIOMUtil", "stringToOM", "FileManager", "readFile", "dbsFilePath", "OMElement", "dbsConfig", "dbsFile", "getFirstChildWithName", "new", "QName", "config", "Iterator", "configElement1", "dbsConfig", "getChildElements", "String", "productFilePath", "resourceFileLocation", "File", "separator", "resources", "File", "separator", "Products", "sql", "xls", "while", "configElement1", "hasNext", "OMElement", "property", "OMElement", "configElement1", "next", "String", "value", "property", "getAttributeValue", "new", "QName", "name", "if", "url", "equals", "value", "property", "setText", "jdbc", "wso2", "excel", "filePath", "productFilePath"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "prometheus", "ToxiproxyContainer", "ContainerProxy", "prometheusContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "PROMETHEUS_BEAN_NAME", "GenericContainer", "prometheus", "ConfigurableEnvironment", "environment", "PrometheusProperties", "properties", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "prometheus", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "prometheus", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "prometheus", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "prometheus", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedPrometheusToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["URL", "url", "new", "URL", "containerEndpoint", "_internal", "config", "connection", "HttpURLConnection", "url", "openConnection", "connection", "setConnectTimeout", "5_000", "connection", "setReadTimeout", "5_000", "connection", "setRequestMethod", "PUT", "connection", "setDoOutput", "true", "connection", "setRequestProperty", "Content", "Type", "application", "json", "connection", "setRequestProperty", "Accept", "application", "json", "try", "OutputStreamWriter", "osw", "new", "OutputStreamWriter", "connection", "getOutputStream", "osw", "write", "requestBody", "osw", "flush", "int", "responseCode", "connection", "getResponseCode", "if", "responseCode", "String", "response", "getResponseBody", "connection"], ["Nullable", "private", "static", "OAuth2FlowType", "flowTypeFromStr", "String", "flowTypeStr", "try", "return", "OAuth2FlowType", "valueOf", "flowTypeStr", "catch", "IllegalArgumentException", "ex"], ["doc", "comment", "inherited", "from", "LogWriter", "public", "void", "logOneWay", "Logger", "log", "Object", "command"], ["Override", "public", "void", "decode", "IoSession", "session", "IoBuffer", "in", "ProtocolDecoderOutput", "out", "throws", "ProtocolCodecException", "if", "log", "isDebugEnabled"], ["public", "static", "DockerImageName", "getDockerImageName", "CommonContainerProperties", "properties", "String", "customImageName", "properties", "getDockerImage", "String", "defaultDockerImageName", "properties", "getDefaultDockerImage", "if", "customImageName", "null", "defaultDockerImageName", "null", "throw", "new", "IllegalStateException", "Please", "specify", "dockerImage", "for", "the", "container", "if", "customImageName", "null", "return", "setupImage", "defaultDockerImageName", "properties", "DockerImageName", "customImage", "setupImage", "customImageName", "properties", "if", "defaultDockerImageName", "null", "return", "customImage", "DockerImageName", "defaultImage", "DockerImageName", "parse", "defaultDockerImageName"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "dynamodb", "ToxiproxyContainer", "ContainerProxy", "dynamodbContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_DYNAMODB", "GenericContainer", "dynamoDb", "DynamoDBProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "dynamoDb", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "dynamodb", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "dynamodb", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "dynamodb", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedDynamoDBToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["private", "void", "logCryptomatorSystemProperty", "String", "propertyName"], ["Override", "public", "void", "onWSDisconnect", "WebSocketConnection", "conn"], ["Override", "public", "void", "onMessage", "Message", "message"], ["ExceptionHandler", "Exception", "class", "public", "ResponseEntity", "Object", "prepareException", "Exception", "e", "WebRequest", "request"], ["TODO", "See", "if", "start", "server", "can", "share", "some", "of", "this", "code", "protected", "void", "doExecute", "throws", "Exception", "log", "info", "Waiting", "for", "Geronimo", "server", "Setup", "a", "callback", "to", "time", "out", "verification", "final", "ObjectHolder", "verifyTimedOut", "new", "ObjectHolder", "TimerTask", "timeoutTask", "new", "TimerTask", "public", "void", "run", "verifyTimedOut", "set", "Boolean", "TRUE", "if", "timeout", "log", "debug", "Starting", "verify", "timeout", "task", "triggers", "in", "timeout", "s", "timer", "schedule", "timeoutTask", "timeout", "Verify", "server", "started", "ServerProxy", "server", "new", "ServerProxy", "hostname", "port", "username", "password", "boolean", "started", "false", "while", "started", "if", "verifyTimedOut", "isSet", "throw", "new", "MojoExecutionException", "Unable", "to", "verify", "if", "the", "server", "was", "started", "in", "the", "given", "time", "started", "server", "isFullyStarted", "if", "started", "Throwable", "error", "server", "getLastError", "if", "error", "null", "log", "debug", "Server", "query", "failed", "ignoring", "error", "Thread", "sleep", "server", "closeConnection", "Stop", "the", "timer", "server", "should", "be", "up", "now", "timeoutTask", "cancel", "log", "info", "Geronimo", "server", "started"], ["public", "synchronized", "void", "executePeriodically", "final", "Runnable", "task", "long", "period", "TimerTask", "existing", "timerTasks", "get", "task", "if", "existing", "null"], ["public", "void", "setDestinationDirectory", "String", "destinationDir"], ["Test", "void", "testCachePathContainsTilde", "String", "customPath", "C", "user", "abcdef", "path", "wdm", "config", "setCachePath", "customPath", "String", "cachePath", "wdm", "config", "getCachePath"], ["public", "List", "getDLQContents", "QueueBrowser", "qb", "List", "list", "new", "ArrayList", "try", "for", "Enumeration", "e", "qb", "getEnumeration", "e", "hasMoreElements", "Object", "o", "e", "nextElement", "list", "add", "o", "connection", "stop", "dlqBrowser", "close", "session", "close", "connection", "close", "catch", "Exception", "e"], ["Checks", "the", "whether", "the", "provided", "uri", "matches", "the", "provided", "link", "RuleFeatures", "Feature", "param", "feature", "the", "feature", "to", "check", "against", "param", "uri", "the", "uri", "to", "check", "return", "returns", "true", "when", "the", "uri", "matches", "the", "feature", "else", "returns", "false", "public", "boolean", "isFeatureRequest", "RuleFeatures", "Feature", "feature", "String", "uri", "for", "RuleFeatures", "features", "getFeaturesList", "if", "features", "getUrlPattern", "matcher", "uri", "matches", "if", "features", "hasFeature", "feature"], ["c", "setOpTosUri", "appConfiguration", "getOpTosUri", "c", "setOpPolicyUri", "appConfiguration", "getOpPolicyUri", "c", "setJwksUri", "appConfiguration", "getJwksUri", "c", "setServiceDocumentation", "appConfiguration", "getServiceDocumentation", "c", "setUmaProfilesSupported", "new", "String", "c", "setRegistrationEndpoint", "appConfiguration", "getRegistrationEndpoint", "c", "setTokenEndpoint", "appConfiguration", "getTokenEndpoint", "c", "setAuthorizationEndpoint", "appConfiguration", "getAuthorizationEndpoint", "c", "setIntrospectionEndpoint", "baseEndpointUri", "rpt", "status", "c", "setResourceRegistrationEndpoint", "baseEndpointUri", "host", "rsrc", "resource_set", "c", "setPermissionEndpoint", "baseEndpointUri", "host", "rsrc_pr", "c", "setScopeEndpoint", "baseEndpointUri", "UMA_SCOPES_SUFFIX", "c", "setClaimsInteractionEndpoint", "baseEndpointUri", "UMA_CLAIMS_GATHERING_PATH", "convert", "manually", "to", "avoid", "possible", "conflicts", "between", "resteasy", "providers", "e", "g", "jettison", "jackson", "final", "String", "entity", "ServerUtil", "asPrettyJson", "c"], ["inheritDoc", "Override", "public", "void", "messageReceived", "IoSession", "session", "Object", "in", "if", "log", "isDebugEnabled", "if", "in", "instanceof", "IoBuffer", "log", "debug", "Handskake", "return", "try", "final", "Packet", "packet", "Packet", "in", "final", "Object", "message", "packet", "getMessage", "final", "Header", "source", "packet", "getHeader"], ["Override", "public", "void", "onSharedObjectSend", "ISharedObjectBase", "so", "String", "arg1", "List", "list"], ["Override", "public", "void", "deleteClaim", "String", "claimType", "Query", "query", "em", "createQuery", "select", "c", "from", "Claim", "c", "where", "c", "claimType", "claimtype", "query", "setParameter", "claimtype", "claimType", "Object", "claimObj", "query", "getSingleResult", "em", "remove", "claimObj"], ["param", "buffer", "param", "bufferIndex", "param", "maxLen", "return", "position", "of", "terminating", "null", "bytes", "public", "static", "int", "findUNITermination", "byte", "buffer", "int", "bufferIndex", "int", "maxLen", "int", "len", "while", "buffer", "bufferIndex", "len", "byte", "0x00", "buffer", "bufferIndex", "len", "byte", "0x00", "len", "if", "len", "maxLen", "if", "log", "isDebugEnabled", "log", "warn", "Failed", "to", "find", "string", "termination", "with", "max", "length", "maxLen"], ["ParameterizedTest", "MethodSource", "data", "void", "testServerSeleniumServer", "Capabilities", "capabilities", "throws", "Exception", "String", "serverUrl", "String", "format", "http", "localhost", "s", "serverPort", "WebDriver", "driver", "new", "RemoteWebDriver", "new", "URL", "serverUrl", "capabilities", "String", "sutUrl", "https", "bonigarcia", "dev", "selenium", "webdriver", "java", "driver", "get", "sutUrl", "String", "title", "driver", "getTitle"], ["public", "int", "compare", "String", "v1", "String", "v2", "String", "v1split", "v1", "split", "String", "v2split", "v2", "split", "int", "length", "max", "v1split", "length", "v2split", "length", "for", "int", "i", "i", "length", "i", "try", "int", "v1Part", "i", "v1split", "length", "parseInt", "v1split", "i", "int", "v2Part", "i", "v2split", "length", "parseInt", "v2split", "i", "if", "v1Part", "v2Part", "return", "if", "v1Part", "v2Part", "return", "catch", "Exception", "e"], ["\u8ba4\u8bc1\u8d26\u6237\u7684\u7b7e\u540d", "param", "tx", "param", "eckeys", "param", "txid", "param", "hash160", "public", "boolean", "signCertAccountInputs", "Transaction", "tx", "ECKey", "eckeys", "byte", "txid", "byte", "hash160", "int", "numInputs", "tx", "getInputs", "size", "for", "int", "i", "i", "numInputs", "i", "TransactionInput", "txIn", "TransactionInput", "tx", "getInput", "i", "if", "txIn", "getFroms", "null", "txIn", "getFroms", "size"], ["ParameterizedTest", "ValueSource", "strings", "chrome", "firefox", "edge", "opera", "chromium", "not", "a", "browser", "void", "pathTest", "String", "browser", "Optional", "Path", "detectedPath", "versionDetector", "getBrowserPath", "browser", "if", "detectedPath", "isPresent"], ["public", "void", "handle", "Callback", "callbacks", "throws", "IOException", "UnsupportedCallbackException", "for", "int", "i", "i", "callbacks", "length", "i", "if", "callbacks", "i", "instanceof", "HomeRealmCallback", "HomeRealmCallback", "callback", "HomeRealmCallback", "callbacks", "i", "String", "homeRealm", "String", "callback", "getRequest", "getParameter", "FederationConstants", "PARAM_HOME_REALM", "if", "homeRealm", "null", "homeRealm", "length", "LOG", "debug", "No", "home", "realm", "found", "in", "request", "else"], ["doc", "comment", "inherited", "from", "LogWriter", "public", "void", "logReceivedException", "Logger", "log", "IOException", "error"], ["non", "Javadoc", "see", "java", "io", "OutputStream", "write", "int", "Override", "public", "void", "write", "int", "arg0", "throws", "IOException", "try", "byte", "b", "byte", "arg0", "if", "LOG", "isDebugEnabled"], ["private", "void", "collectMetrics", "Buffer", "buffer", "Map", "String", "String", "map", "new", "HashMap", "Splitter", "on", "System", "lineSeparator", "omitEmptyStrings", "trimResults", "splitToList", "buffer", "toString", "stream", "filter", "input", "input", "null", "input", "contains", "DELIMITER", "input", "contains", "executable", "input", "contains", "config_file", "forEach", "entry", "List", "String", "keyValue", "Splitter", "on", "DELIMITER", "omitEmptyStrings", "trimResults", "splitToList", "entry", "if", "keyValue", "size", "map", "put", "keyValue", "get", "keyValue", "get"], ["\u63a5\u6536\u5230\u5171\u8bc6\u6d88\u606f", "\u5728\u6b64\u505a2\u4e2a\u9a8c\u8bc1", "\u7b2c\u4e00\u7b7e\u540d\u662f\u5426\u6b63\u786e", "\u7b2c\u4e8c\u662f\u5426\u662f\u5171\u8bc6\u8282\u70b9\u53d1\u51fa\u7684\u6d88\u606f", "\u9a8c\u8bc1\u901a\u8fc7\u4e4b\u540e", "\u5c31\u653e\u5230\u5171\u8bc6\u4f1a\u8bae\u8bb0\u5f55\u91cc\u9762\u53bb", "\u7136\u540e\u8f6c\u53d1\u8be5\u6761\u6d88\u606f", "Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "ConsensusMessage", "consensusMessage", "ConsensusMessage", "message", "MessageProcessResult", "result", "new", "MessageProcessResult", "consensusMessage", "getId", "false", "\u9a8c\u8bc1\u7b7e\u540d\u662f\u5426\u6b63\u786e", "\u6240\u6709\u8282\u70b9\u53c2\u4e0e\u5171\u8bc6", "\u5fc5\u987b\u4ee5\u4e66\u9762\u534f\u8bae\u5f62\u5f0f\u8fdb\u884c\u7b7e\u540d", "\u786e\u4fdd\u6076\u610f\u8282\u70b9\u80fd\u88ab\u8ffd\u8e2a\u5904\u7406", "if", "consensusMessage", "getSigns", "null"], ["Override", "public", "void", "onException", "JMSException", "e"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "mariadb", "ToxiproxyContainer", "ContainerProxy", "mariadbContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_MARIADB", "MariaDBContainer", "mariadbContainer", "MariaDBProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "mariadbContainer", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "mariadb", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "mariadb", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "mariadb", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedMariadbToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Test", "void", "testEdgeMac", "String", "libName", "libc", "dylib", "String", "driverVersion", "WebDriverManager", "wdm", "WebDriverManager", "edgedriver", "driverVersion", "driverVersion", "mac", "wdm", "setup", "String", "downloadedDriverPath", "wdm", "getDownloadedDriverPath"], ["Override", "public", "boolean", "beforeExecute", "ForestRequest", "request", "log", "info", "invoke", "Base", "Error", "beforeExecute", "Object", "args", "request", "getArguments"], ["private", "void", "handleSpanChunk", "PSpanChunk", "spanChunk", "if", "isDebug"], ["ParameterizedTest", "ValueSource", "strings", "chrome", "firefox", "edge", "opera", "chromium", "void", "commandsTest", "String", "browser", "Optional", "String", "detectedVersion", "versionDetector", "getBrowserVersionFromTheShell", "browser", "if", "detectedVersion", "isPresent"], ["private", "static", "void", "handleException", "String", "msg", "Exception", "e"], ["public", "Object", "resolve", "String", "name", "Class", "clz", "throws", "NamingException", "Context", "ctx", "new", "InitialContext", "ctx", "Context", "ctx", "lookup", "java", "comp", "env"], ["public", "void", "assertBeanMarshalls", "Object", "original", "throws", "IOException", "super", "assertBeanMarshalls", "original", "String", "xml", "getXStreamWireFormat", "marshalText", "original", "LOG", "info", "original", "getClass", "getName", "as", "XML", "is"], ["Return", "a", "static", "value", "MapMetastore", "param", "tileTable", "The", "table", "name", "with", "tile", "data", "param", "pointTable", "The", "table", "name", "with", "point", "data", "return", "The", "metastore", "public", "static", "MapMetastore", "newStaticMapsMeta", "String", "tileTable", "String", "pointTable"], ["final", "QueueViewMBean", "queueView", "getProxyToQueue", "dlq", "getQueueName", "assertTrue", "Message", "should", "be", "DLQ", "d", "Wait", "waitFor", "new", "Wait", "Condition", "Override", "public", "boolean", "isSatisified", "throws", "Exception", "return", "queueView", "getQueueSize", "MSG_COUNT", "LOG", "info", "DLQ", "has", "captured", "all", "expired", "messages", "Deque", "String", "browsed", "new", "LinkedList", "String", "CompositeData", "elements", "queueView", "browse", "assertEquals", "MSG_COUNT", "elements", "length", "for", "CompositeData", "element", "elements", "String", "messageID", "String", "element", "get", "JMSMessageID"], ["Override", "public", "void", "delete", "final", "String", "uri", "final", "Handler", "Integer", "doneHandler", "client", "request", "HttpMethod", "DELETE", "uri", "onComplete", "asyncResult", "if", "asyncResult", "failed"], ["Override", "public", "void", "removeFromClusterIdIndex", "String", "clusterId"], ["GET", "Path", "id", "Produces", "UmaConstants", "JSON_MEDIA_TYPE", "public", "Response", "getScopeDescription", "PathParam", "id", "String", "id"], ["Override", "protected", "boolean", "hasLockOwnership", "throws", "IOException", "boolean", "hasLock", "true", "if", "broker", "getPersistenceAdapter", "instanceof", "JDBCPersistenceAdapter", "JDBCPersistenceAdapter", "jdbcPersistenceAdapter", "JDBCPersistenceAdapter", "broker", "getPersistenceAdapter", "Locker", "locker", "jdbcPersistenceAdapter", "getLocker", "if", "locker", "null", "try", "if", "locker", "keepAlive", "hasLock", "false", "catch", "SuppressReplyException", "ignoreWhileHandlingInProgress", "catch", "IOException", "ignored", "if", "hasLock"], ["Override", "public", "void", "exec", "int", "executionCounter", "List", "String", "args", "RedisUtils", "toPayload", "luaScriptState", "getSha", "keys", "size", "keys", "arguments", "redisAPI", "evalsha", "args", "event", "if", "event", "succeeded", "Response", "result", "event", "result", "promise", "complete", "result", "else", "String", "message", "event", "cause", "getMessage", "if", "message", "null", "message", "startsWith", "NOSCRIPT", "log", "warn", "UnlockSampleQueuesRedisCommand", "script", "couldn", "t", "be", "found", "reload", "it"], ["public", "boolean", "dispatch", "MessageReference", "node", "MessageEvaluationContext", "msgContext", "List", "Subscription", "consumers", "throws", "Exception", "List", "Subscription", "duplicateFreeSubs", "new", "ArrayList", "Subscription", "synchronized", "consumers", "for", "Subscription", "sub", "consumers", "ConsumerInfo", "info", "sub", "getConsumerInfo", "if", "info", "isNetworkSubscription", "boolean", "highestPrioritySub", "true", "for", "Iterator", "Subscription", "it", "duplicateFreeSubs", "iterator", "it", "hasNext", "Subscription", "candidate", "it", "next", "if", "matches", "candidate", "info", "if", "hasLowerPriority", "candidate", "info", "it", "remove", "else", "higher", "priority", "matching", "sub", "exists", "highestPrioritySub", "false"], ["Override", "public", "void", "warn", "String", "s", "Throwable", "throwable"], ["Override", "public", "void", "deleteRole", "String", "name", "Query", "query", "em", "createQuery", "select", "r", "from", "Role", "r", "where", "r", "name", "name", "query", "setParameter", "name", "name", "Object", "roleObj", "query", "getSingleResult", "em", "remove", "roleObj"], ["private", "void", "deleteTopics", "synchronized", "createdTopics", "for", "String", "topic", "createdTopics"], ["producerConnection", "close", "LOG", "info", "Mem", "usage", "after", "producer", "done", "broker", "getSystemUsage", "getMemoryUsage", "getPercentUsage", "Browse", "the", "queue", "Connection", "connection", "factory", "createConnection", "connection", "start", "Session", "session", "connection", "createSession", "true", "Session", "AUTO_ACKNOWLEDGE", "QueueBrowser", "browser", "session", "createBrowser", "queue", "Enumeration", "enumeration", "browser", "getEnumeration", "int", "browsed", "while", "enumeration", "hasMoreElements", "TextMessage", "m", "TextMessage", "enumeration", "nextElement", "browsed", "if", "browsed"], ["ParameterizedTest", "MethodSource", "data", "void", "testFilterCacheBy", "String", "version", "int", "expectedVersions", "CacheHandler", "cacheHandler", "new", "CacheHandler", "new", "Config", "List", "File", "filteredList", "cacheHandler", "filterCacheBy", "getInputFileList", "version", "true"], ["Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer"], ["private", "RecoveryCondition", "createIndexRecoveryCondition", "final", "InternalLogProvider", "logProvider", "final", "TokenNameLookup", "tokenNameLookup", "return", "new", "RecoveryCondition", "private", "final", "InternalLog", "log", "logProvider", "getLog", "IndexSamplingController", "class", "Override", "public", "boolean", "test", "IndexDescriptor", "descriptor", "IndexSample", "indexSample", "indexStatisticsStore", "indexSample", "descriptor", "getId", "long", "samples", "indexSample", "sampleSize", "long", "size", "indexSample", "indexSize", "boolean", "empty", "samples", "size", "if", "empty"], ["private", "void", "loadingKeyFailed", "Throwable", "e", "if", "e", "instanceof", "UnlockCancelledException", "ok", "else", "if", "e", "instanceof", "VaultKeyInvalidException", "TODO", "specific", "error", "screen"], ["Override", "public", "void", "exec", "int", "executionCounter", "List", "String", "args", "RedisUtils", "toPayload", "luaScriptState", "getSha", "keys", "size", "keys", "arguments", "redisAPI", "evalsha", "args", "event", "if", "event", "succeeded", "promise", "complete", "else", "String", "message", "event", "cause", "getMessage", "if", "message", "null", "message", "startsWith", "NOSCRIPT", "log", "warn", "CloseCircuitRedisCommand", "script", "couldn", "t", "be", "found", "reload", "it"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "mongodb", "ToxiproxyContainer", "ContainerProxy", "mongodbContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_MONGODB", "GenericContainer", "mongodb", "MongodbProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "mongodb", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "mongodb", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "mongodb", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "mongodb", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedMongodbToxiProxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["private", "void", "registerMongodbEnvironment", "GenericContainer", "mongodb", "ConfigurableEnvironment", "environment", "MongodbProperties", "properties", "Integer", "mappedPort", "mongodb", "getMappedPort", "properties", "getPort", "String", "host", "mongodb", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "mongodb", "port", "mappedPort", "map", "put", "embedded", "mongodb", "host", "host", "map", "compute", "embedded", "mongodb", "username", "k", "v", "properties", "getUsername", "map", "compute", "embedded", "mongodb", "password", "k", "v", "properties", "getPassword", "map", "put", "embedded", "mongodb", "database", "properties", "getDatabase"], ["Override", "public", "void", "errorOccurred", "Connection", "conn", "String", "error"], ["HeadersMultiMap", "headers", "defaultRequestHeaders", "headers", "add", "Accept", "application", "json", "headers", "add", "SELF_REQUEST_HEADER", "true", "clientRequestCreator", "createClientRequest", "HttpMethod", "GET", "schemaLocation", "schemaLocation", "headers", "TIMEOUT_MS", "event", "log", "warn", "Got", "an", "error", "while", "fetching", "schema", "event", "promise", "complete", "Optional", "empty", "onComplete", "asyncResult", "HttpClientRequest", "fetchSchemaRequest", "asyncResult", "result", "fetchSchemaRequest", "setChunked", "true", "fetchSchemaRequest", "send", "responseAsyncResult", "HttpClientResponse", "cRes", "responseAsyncResult", "result", "cRes", "bodyHandler", "data", "if", "StatusCode", "OK", "getStatusCode", "cRes", "statusCode", "String", "contentType", "cRes", "getHeader", "CONTENT_TYPE_HEADER", "if", "contentType", "null", "contentType", "contains", "CONTENT_TYPE_JSON"], ["Test", "public", "void", "testCtor", "throws", "Exception", "File", "file", "new", "File", "target", "test", "classes", "fixtures", "sample", "m4a", "M4AReader", "reader", "new", "M4AReader", "file", "ITag", "tag", "reader", "readTag"], ["private", "void", "closeStreamFromURL", "String", "strURL", "InputStream", "inputStream", "if", "inputStream", "null", "try", "inputStream", "close", "catch", "Exception", "e"], ["private", "void", "updateLoggingResources", "Buffer", "buffer", "throws", "ValidationException", "extractLoggingFilterValues", "buffer", "for", "Map", "String", "String", "payloadFilters", "getLoggingResource", "getPayloadFilters"], ["if", "tag", "null", "switch", "tag", "getDataType", "case", "IoConstants", "TYPE_AUDIO", "audio", "break", "case", "IoConstants", "TYPE_VIDEO", "video", "break", "case", "IoConstants", "TYPE_METADATA", "meta", "break", "reader", "close"], ["public", "boolean", "externalForceReAuthentication", "CustomScriptConfiguration", "scriptConfiguration", "ExternalPostAuthnContext", "context", "try"], ["Override", "public", "Response", "requestAccessToken", "String", "token", "String", "tokenTypeHint", "String", "clientId", "HttpServletRequest", "request", "HttpServletResponse", "response", "SecurityContext", "sec"], ["Logs", "the", "given", "link", "Throwable", "and", "try", "ending", "the", "response", "param", "throwable", "the", "link", "Throwable", "to", "log", "in", "error", "param", "response", "the", "response", "to", "end", "return", "a", "completed", "link", "Completable", "in", "any", "circumstances", "private", "Completable", "handleError", "Throwable", "throwable", "HttpServerResponse", "response"], ["Override", "public", "void", "channelWritabilityChanged", "ChannelHandlerContext", "ctx", "throws", "Exception", "if", "ctx", "channel", "isWritable", "if", "reaperFuture", "null", "reaperFuture", "cancel", "false", "reaperFuture", "null", "else", "if", "reaperFuture", "null", "reaperFuture", "ctx", "executor", "schedule", "var", "ex", "new", "TransportThrottleException", "this", "maxWriteLockMillis"], ["Override", "public", "void", "storeXDeltaResponseHeader", "String", "xDeltaResponseNumber", "if", "log", "isTraceEnabled"], ["Override", "public", "void", "handleSimple", "ServerRequest", "GeneratedMessageV3", "serverRequest", "final", "GeneratedMessageV3", "data", "serverRequest", "getData", "if", "data", "instanceof", "PSpan", "handleSpan", "PSpan", "data", "else"], ["driverManagerType", "FIREFOX", "break", "case", "org", "openqa", "selenium", "opera", "OperaDriver", "driverManagerType", "OPERA", "break", "case", "org", "openqa", "selenium", "edge", "EdgeDriver", "driverManagerType", "EDGE", "break", "case", "org", "openqa", "selenium", "ie", "InternetExplorerDriver", "driverManagerType", "IEXPLORER", "break", "default", "break", "if", "driverManagerType", "null"], ["message", "setLongProperty", "sendTime", "sendTime", "producer", "send", "message", "LOG", "debug", "Receiving", "message", "i", "Message", "receivedMessage", "consumer", "receive", "assertNotNull", "On", "message", "i", "receivedMessage", "assertTrue", "On", "message", "i", "receivedMessage", "instanceof", "BytesMessage", "BytesMessage", "receivedBytesMessage", "BytesMessage", "receivedMessage", "int", "numElements", "try", "while", "true", "receivedBytesMessage", "readBoolean", "numElements", "catch", "Exception", "ex"], ["private", "static", "void", "log", "String", "title", "SonarLintPathPattern", "patterns", "if", "patterns", "length"], ["public", "DeferredChanged", "ChangedSchema", "getOrAddSchema", "RecursiveSchemaSet", "refSet", "CacheKey", "key", "Schema", "left", "Schema", "right", "don", "t", "allow", "recursive", "references", "to", "schemas", "if", "refSet", "contains", "key"], ["Override", "public", "void", "handle", "Exception", "ex"], ["public", "boolean", "externalModify", "JSONObject", "rptAsJson", "CustomScriptConfiguration", "scriptConfiguration", "ExternalUmaRptClaimsContext", "context", "try"], ["Override", "public", "void", "failToRecoverTransactionsAfterPosition", "Throwable", "t", "LogPosition", "recoveryFromPosition"], ["for", "ConsumerInfo", "nc", "networkConsumerList", "if", "nc", "isNetworkConsumersEmpty", "for", "ConsumerId", "id", "nc", "getNetworkConsumerIds", "if", "id", "equals", "info", "getConsumerId", "nc", "removeNetworkConsumerId", "id", "if", "nc", "isNetworkConsumersEmpty", "gcList", "add", "nc", "for", "ConsumerInfo", "nc", "gcList", "networkConsumerList", "remove", "nc", "super", "removeConsumer", "context", "nc"], ["private", "void", "registerConsulEnvironment", "GenericContainer", "consul", "ConfigurableEnvironment", "environment", "ConsulProperties", "properties", "Integer", "mappedPort", "consul", "getMappedPort", "properties", "getPort", "String", "host", "consul", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "consul", "port", "mappedPort", "map", "put", "embedded", "consul", "host", "host"], ["Idempotent", "public", "APIGatewayProxyResponseEvent", "handleRequest", "final", "APIGatewayProxyRequestEvent", "input", "final", "Context", "context", "handlerExecuted", "true", "Map", "String", "String", "headers", "new", "HashMap", "headers", "put", "Content", "Type", "application", "json", "headers", "put", "Access", "Control", "Allow", "Origin", "headers", "put", "Access", "Control", "Allow", "Methods", "GET", "OPTIONS", "headers", "put", "Access", "Control", "Allow", "Headers", "APIGatewayProxyResponseEvent", "response", "new", "APIGatewayProxyResponseEvent", "withHeaders", "headers", "try", "String", "address", "JsonConfig", "get", "getObjectMapper", "readTree", "input", "getBody", "get", "address", "asText", "final", "String", "pageContents", "this", "getPageContents", "address", "String", "output", "String", "format", "message", "hello", "world", "location", "s", "pageContents"], ["Override", "public", "void", "visitDecimal", "String", "name", "long", "id", "int", "exp", "long", "mant"], ["Merges", "headers", "makes", "sure", "that", "only", "one", "value", "of", "all", "headers", "ends", "up", "in", "the", "destination", "MultiMap", "Note", "This", "is", "not", "in", "line", "with", "https", "www", "rfc", "editor", "org", "rfc", "rfc7230", "section", "to", "be", "further", "looked", "into", "param", "context", "optional", "context", "information", "to", "be", "used", "for", "logging", "purposes", "not", "used", "for", "the", "actual", "merge", "public", "static", "void", "mergeHeaders", "Nonnull", "MultiMap", "destination", "Nonnull", "MultiMap", "source", "Nullable", "String", "context", "source", "forEach", "sourceHeader", "if", "destination", "contains", "sourceHeader", "getKey", "we", "already", "have", "such", "a", "header", "String", "destinationValue", "destination", "get", "sourceHeader", "getKey", "String", "sourceValue", "source", "get", "sourceHeader", "getKey", "if", "destinationValue", "equals", "sourceValue"], ["Override", "public", "void", "get", "final", "String", "path", "final", "Handler", "Buffer", "bodyHandler"], ["private", "double", "nextRate", "long", "periodNanos", "long", "actual", "long", "expected", "long", "backlog", "String", "type"], ["Override", "public", "void", "recoveryCleanupClosed", "Path", "indexFile", "IndexDescriptor", "index"], ["Override", "public", "void", "warning", "String", "message"], ["public", "void", "failed", "Artifact", "configurationId", "Throwable", "cause"], ["public", "void", "handle", "Callback", "callbacks", "throws", "IOException", "UnsupportedCallbackException", "for", "int", "i", "i", "callbacks", "length", "i", "if", "callbacks", "i", "instanceof", "HomeRealmCallback", "HomeRealmCallback", "callback", "HomeRealmCallback", "callbacks", "i", "final", "String", "loginHint", "String", "callback", "getRequest", "getParameter", "login_hint", "if", "loginHint", "null", "loginHint", "isEmpty", "LOG", "debug", "No", "login_hint", "found", "in", "request", "to", "set", "home", "realm", "else", "String", "homeRealm", "loginHint", "split", "if", "homeRealm", "length", "LOG", "debug", "Home", "realm", "found", "in", "request", "StringEscapeUtils", "escapeHtml4", "homeRealm", "callback", "setHomeRealm", "homeRealm", "else"], ["Override", "public", "void", "readExternal", "IDataInput", "in", "log", "debug", "CommandMessage", "Read", "external", "super", "readExternal", "in", "short", "flagsArray", "readFlags", "in", "for", "int", "i", "i", "flagsArray", "length", "i", "short", "flags", "flagsArray", "i"], ["Optional", "Pair", "KafkaProducer", "String", "String", "Pattern", "findMatchingKafkaProducer", "String", "topic", "for", "Map", "Entry", "Pattern", "KafkaProducer", "String", "String", "entry", "kafkaProducers", "entrySet", "Matcher", "matcher", "entry", "getKey", "matcher", "topic", "if", "matcher", "matches"], ["private", "void", "registerSchemaRegistryEnvironment", "GenericContainer", "schemaRegistry", "ConfigurableEnvironment", "environment", "SchemaRegistryConfigurationProperties", "properties", "String", "host", "schemaRegistry", "getHost", "Integer", "port", "schemaRegistry", "getMappedPort", "properties", "getPort", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "kafka", "schema", "registry", "host", "host", "map", "put", "embedded", "kafka", "schema", "registry", "port", "port", "if", "properties", "isBasicAuthenticationEnabled", "map", "put", "embedded", "kafka", "schema", "registry", "username", "SchemaRegistryConfigurationProperties", "USERNAME", "map", "put", "embedded", "kafka", "schema", "registry", "password", "SchemaRegistryConfigurationProperties", "PASSWORD"], ["Override", "public", "void", "debug", "String", "s", "Throwable", "throwable"], ["JsonObject", "config", "List", "KafkaConfiguration", "configurations", "new", "ArrayList", "try", "replacedConfig", "StringUtils", "replaceWildcardConfigs", "configurationResourceBuffer", "toString", "UTF_8", "properties", "config", "new", "JsonObject", "Buffer", "buffer", "replacedConfig", "catch", "Exception", "e", "log", "warn", "Could", "not", "replace", "wildcards", "with", "environment", "properties", "for", "kafka", "configurations", "due", "to", "following", "reason", "e", "getMessage", "return", "configurations", "for", "String", "topicPattern", "config", "fieldNames", "try", "Pattern", "pattern", "Pattern", "compile", "topicPattern", "final", "Map", "String", "String", "additionalConfig", "extractAdditionalConfig", "config", "getJsonObject", "topicPattern", "setUniqueClientId", "additionalConfig", "configurations", "add", "new", "KafkaConfiguration", "pattern", "additionalConfig"], ["Test", "public", "void", "test", "throws", "IOException", "get", "dummy", "scope", "WebScope", "scope", "WebScope", "applicationContext", "getBean", "web", "scope", "test", "file", "fixture", "File", "file", "new", "File", "target", "test", "classes", "fixtures", "test", "flv", "new", "file", "provider", "instance", "FileProvider", "provider", "new", "FileProvider", "scope", "file", "data", "pipe", "IPipe", "pipe", "new", "InMemoryPullPullPipe", "subscribe", "the", "provider", "to", "the", "pipe", "pipe", "subscribe", "provider", "null", "grab", "a", "message", "from", "the", "pipe", "can", "do", "this", "until", "no", "messages", "are", "remaining", "IMessage", "msg", "pipe", "pullMessage"], ["public", "void", "info", "String", "s", "Throwable", "t"], ["public", "void", "setApplicationContext", "ApplicationContext", "applicationContext", "throws", "BeansException"], ["public", "boolean", "checkKeyInResolutionCache", "String", "key", "boolean", "showLog", "String", "valueFromResolutionCache", "getValueFromResolutionCache", "key", "boolean", "valueInResolutionCache", "valueFromResolutionCache", "null", "valueFromResolutionCache", "isEmpty", "if", "valueInResolutionCache", "Date", "expirationDate", "getExpirationDateFromResolutionCache", "key", "valueInResolutionCache", "checkValidity", "key", "valueFromResolutionCache", "expirationDate", "if", "valueInResolutionCache", "String", "strDate", "formatDate", "expirationDate", "if", "showLog"], ["Override", "public", "void", "setBus", "Bus", "bus", "if", "bus", "null", "String", "busInfo", "String", "format", "Successfully", "created", "s", "with", "SpringBus", "s", "getName", "bus", "getId"], ["Override", "public", "void", "handleTransportError", "WebSocketSession", "session", "Throwable", "exception", "throws", "Exception"], ["final", "Set", "GrantedAuthority", "authorities", "new", "HashSet", "if", "currentAuth", "getAuthorities", "null", "authorities", "addAll", "currentAuth", "getAuthorities", "Iterator", "extends", "GrantedAuthority", "authIt", "currentAuth", "getAuthorities", "iterator", "while", "authIt", "hasNext", "GrantedAuthority", "ga", "authIt", "next", "String", "roleName", "ga", "getAuthority", "try", "Role", "role", "roleDAO", "getRole", "roleName", "substring", "Arrays", "asList", "all", "for", "Entitlement", "e", "role", "getEntitlements", "authorities", "add", "new", "SimpleGrantedAuthority", "e", "getName", "catch", "Exception", "ex"], ["Async", "taskExecutor", "EventListener", "public", "void", "processCommentCreatedEvent", "CommentEvent", "commentEvent", "throws", "InterruptedException"], ["private", "void", "deleteEmployeeBatchRequest", "throws", "AxisFault", "XPathExpressionException", "OMElement", "payload", "fac", "createOMElement", "deleteEmployee_batch_req", "omNs", "for", "int", "i", "i", "i", "OMElement", "batchRequest", "fac", "createOMElement", "addEmployee", "omNs", "OMElement", "empNo", "fac", "createOMElement", "employeeNumber", "omNs", "empNo", "setText", "i", "batchRequest", "addChild", "empNo", "payload", "addChild", "batchRequest", "if", "log", "isDebugEnabled"], ["Test", "timeout", "public", "void", "testCreditNotGrantedUntilBacklogClears", "throws", "Exception", "final", "int", "MSG_COUNT", "AmqpClient", "client", "createAmqpClient", "AmqpConnection", "connection", "trackConnection", "client", "connect", "AmqpSession", "session", "connection", "createSession", "AmqpReceiver", "receiver", "session", "createReceiver", "queue", "getTestName", "AmqpSender", "sender", "session", "createSender", "queue", "getTestName", "true", "for", "int", "i", "i", "MSG_COUNT", "i", "AmqpMessage", "message", "new", "AmqpMessage", "message", "setText", "Test", "Message", "i", "sender", "send", "message", "if", "i"], ["Override", "public", "synchronized", "void", "panic", "Throwable", "cause", "if", "healthy", "return", "Objects", "requireNonNull", "cause", "Must", "provide", "a", "non", "null", "cause", "for", "the", "database", "panic", "this", "causeOfPanic", "cause", "this", "healthy", "false"], ["public", "ServerConfigurationService", "getServerConfigurationService", "if", "this", "serverConfigurationService", "null", "String", "msg", "Before", "activating", "javax", "caching", "bundle", "an", "instance", "of", "ServerConfigurationService", "should", "be", "in", "existence"], ["Override", "public", "List", "Flow", "save", "final", "FlowReferenceType", "flowReferenceType", "final", "String", "referenceId", "final", "List", "Flow", "flows", "try"], ["public", "TenantMgtConfiguration", "buildTenantMgtConfiguration", "OMElement", "tenantMgtConfigElement", "String", "tenantManagerClass", "throws", "UserStoreException", "Map", "String", "String", "tenantMgtProperties", "null", "TenantMgtConfiguration", "tenantMgtConfiguration", "new", "TenantMgtConfiguration", "Iterator", "OMElement", "iterator", "tenantMgtConfigElement", "getChildrenWithName", "new", "QName", "UserCoreConstants", "TenantMgtConfig", "LOCAL_NAME_TENANT_MANAGER", "for", "iterator", "hasNext", "OMElement", "tenantManager", "iterator", "next", "if", "tenantManagerClass", "null", "tenantManagerClass", "equals", "tenantManager", "getAttributeValue", "new", "QName", "UserCoreConstants", "TenantMgtConfig", "ATTRIBUTE_NAME_CLASS", "tenantMgtProperties", "readChildPropertyElements", "tenantManager", "tenantMgtConfiguration", "setTenantManagerClass", "tenantManagerClass", "tenantMgtConfiguration", "setTenantStoreProperties", "tenantMgtProperties", "return", "tenantMgtConfiguration", "String", "errorMessage", "Error", "in", "locating", "TenantManager", "compatible", "with", "PrimaryUserStore", "Required", "a", "TenantManager", "using", "tenantManagerClass", "in", "tenant", "mgt", "xml", "if", "log", "isDebugEnabled"], ["private", "void", "registerMariadbEnvironment", "MariaDBContainer", "mariadb", "ConfigurableEnvironment", "environment", "MariaDBProperties", "properties", "Integer", "mappedPort", "mariadb", "getMappedPort", "properties", "getPort", "String", "host", "mariadb", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "mariadb", "port", "mappedPort", "map", "put", "embedded", "mariadb", "host", "host", "map", "put", "embedded", "mariadb", "schema", "properties", "getDatabase", "map", "put", "embedded", "mariadb", "user", "properties", "getUser", "map", "put", "embedded", "mariadb", "password", "properties", "getPassword", "String", "jdbcURL", "jdbc", "mysql"], ["Override", "public", "void", "init", "Object", "objs"], ["message", "setLongProperty", "sendTime", "sendTime", "producer", "send", "message", "LOG", "debug", "Receiving", "message", "i", "Message", "receivedMessage", "consumer", "receive", "assertNotNull", "On", "message", "i", "receivedMessage", "assertTrue", "On", "message", "i", "receivedMessage", "instanceof", "StreamMessage", "StreamMessage", "receivedStreamMessage", "StreamMessage", "receivedMessage", "int", "numElements", "try", "while", "true", "receivedStreamMessage", "readBoolean", "numElements", "catch", "Exception", "ex"], ["final", "INetStreamEventHandler", "netStreamEventHandler", "new", "INetStreamEventHandler", "Override", "public", "void", "onStreamEvent", "Notify", "notify", "log", "info", "ClientStream", "dispachEvent", "notify", "client", "setStreamEventHandler", "netStreamEventHandler", "IPendingServiceCallback", "connectCallback", "new", "IPendingServiceCallback", "Override", "public", "void", "resultReceived", "IPendingServiceCall", "call", "log", "info", "connectCallback", "ObjectMap", "map", "ObjectMap", "call", "getResult", "String", "code", "String", "map", "get", "code"], ["Override", "public", "void", "setFeatureState", "FeatureState", "featureState", "if", "customLogMessage", "null"], ["Test", "timeout", "public", "void", "testMissingLogsCausesBrokerToFail", "throws", "Exception", "fillUpSomeLogFiles", "int", "jobCount", "schedulerStore", "getJobScheduler", "JMS", "getAllJobs", "size"], ["Override", "public", "Appendable", "targetASCII", "String", "name", "long", "id"], ["private", "void", "reportPercent", "int", "percent", "if", "percent", "STRIDE"], ["\u63a5\u6536\u5230\u533a\u5757\u6d88\u606f", "\u8fdb\u884c\u533a\u5757\u5408\u6cd5\u6027\u9a8c\u8bc1", "\u5982\u679c\u9a8c\u8bc1\u901a\u8fc7", "\u5219\u6536\u5f55", "\u7136\u540e\u8f6c\u53d1\u533a\u5757", "Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "if", "log", "isDebugEnabled"], ["Override", "public", "void", "handleSimple", "ServerRequest", "GeneratedMessageV3", "serverRequest", "final", "GeneratedMessageV3", "data", "serverRequest", "getData", "if", "data", "instanceof", "PSpanChunk", "handleSpanChunk", "PSpanChunk", "data", "else"], ["Override", "public", "CompletableFuture", "BenchmarkConsumer", "createConsumer", "String", "topic", "String", "subscriptionName", "ConsumerCallback", "consumerCallback", "return", "CompletableFuture", "supplyAsync", "try", "DistributedLogManager", "dlm", "namespace", "openLog", "topic"], ["private", "void", "registerElasticSearchEnvironment", "ElasticsearchContainer", "elasticSearch", "ConfigurableEnvironment", "environment", "ElasticSearchProperties", "properties", "Integer", "httpPort", "elasticSearch", "getMappedPort", "properties", "getHttpPort", "Integer", "transportPort", "elasticSearch", "getMappedPort", "properties", "getTransportPort", "String", "host", "elasticSearch", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "elasticsearch", "clusterName", "properties", "getClusterName", "map", "put", "embedded", "elasticsearch", "host", "host", "map", "put", "embedded", "elasticsearch", "httpPort", "httpPort", "map", "put", "embedded", "elasticsearch", "transportPort", "transportPort"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "elasticsearch", "ToxiproxyContainer", "ContainerProxy", "elasticsearchContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_ELASTIC_SEARCH", "ElasticsearchContainer", "elasticSearch", "ElasticSearchProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "elasticSearch", "properties", "getHttpPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "elasticsearch", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "elasticsearch", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "elasticsearch", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedElasticSearchToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Override", "public", "void", "warn", "String", "msg", "Throwable", "thrown"], ["Override", "public", "void", "doStop", "try", "openEjbSystem", "removeApplication", "appInfo", "classLoader", "catch", "NoSuchApplicationException", "e", "log", "error", "Module", "does", "not", "exist", "e", "catch", "UndeployException", "e", "List", "Throwable", "causes", "e", "getCauses", "log", "error", "e", "getMessage", "Encountered", "causes", "size", "failures", "for", "Throwable", "throwable", "causes"], ["public", "boolean", "isValidSessionId", "String", "userName", "String", "sessionId", "if", "sessionId", "null", "log", "error", "In", "two", "step", "authentication", "workflow", "session_id", "is", "mandatory", "return", "false", "SessionId", "ldapSessionId", "sessionIdService", "getSessionId", "sessionId", "if", "ldapSessionId", "null"], ["try", "peer", "sendMessage", "message", "successCount", "catch", "NotYetConnectedException", "IOException", "e", "log", "warn", "\u5e7f\u64ad\u6d88\u606f\u51fa\u9519", "\u53ef\u80fd\u539f\u56e0\u662f\u8be5\u8282\u70b9\u8fde\u63a5\u5df2\u5173\u95ed", "e", "getMessage", "if", "successCount", "count", "return", "successCount", "return", "successCount", "else", "log", "warn", "\u5e7f\u64ad\u6d88\u606f\u5931\u8d25", "\u6ca1\u6709\u53ef\u5e7f\u64ad\u7684\u8282\u70b9", "if", "log", "isDebugEnabled"], ["writer", "writeNamespace", "wsa", "WS_ADDRESSING_NS", "writer", "writeNamespace", "auth", "WS_FEDERATION_NS", "writer", "writeNamespace", "xsi", "SCHEMA_INSTANCE_NS", "if", "http", "docs", "oasis", "open", "org", "wsfed", "federation", "equals", "serviceConfig", "getProtocol", "writeFederationMetadata", "writer", "serviceConfig", "serviceURL", "else", "if", "urn", "oasis", "names", "tc", "SAML", "profiles", "SSO", "browser", "equals", "serviceConfig", "getProtocol", "writeSAMLMetadata", "writer", "serviceConfig", "serviceURL", "crypto", "EntityDescriptor", "writer", "writeEndElement", "writer", "writeEndDocument", "writer", "close", "if", "LOG", "isDebugEnabled", "String", "out", "DOM2Writer", "nodeToString", "writer", "getDocument", "LOG", "debug", "unsigned"], ["Inform", "when", "connection", "with", "server", "is", "lost", "param", "throwable", "Connection", "lost", "cause", "Override", "public", "void", "connectionLost", "Throwable", "throwable"], ["Test", "public", "void", "testMakeTransaction", "throws", "Exception", "Product", "product", "createProduct", "\u6211\u7684\u8d26\u6237", "Account", "account", "accountKit", "getDefaultAccount", "account", "decryptionTr", "inchain123", "long", "nonce", "RandomUtil", "randomLong", "long", "password", "RandomUtil", "randomLong", "Sha256Hash", "productTx", "Sha256Hash", "wrap", "6cb7f57548c98e9c29a698b2cb219c53850b429c448da6999868a0cfc89e2558", "GeneralAntifakeTransaction", "tx", "new", "GeneralAntifakeTransaction", "network", "productTx", "nonce", "password", "tx", "makeSign", "account", "\u4e0d\u80fd\u5e7f\u64ad", "tx", "verfify", "tx", "verfifyScript"], ["private", "void", "registerDynamodbEnvironment", "GenericContainer", "container", "ConfigurableEnvironment", "environment", "DynamoDBProperties", "properties", "Integer", "mappedPort", "container", "getMappedPort", "properties", "port", "String", "host", "container", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "dynamodb", "port", "mappedPort", "map", "put", "embedded", "dynamodb", "host", "host", "map", "put", "embedded", "dynamodb", "accessKey", "properties", "getAccessKey", "map", "put", "embedded", "dynamodb", "secretKey", "properties", "getSecretKey"], ["private", "boolean", "isActuallyWritable", "Path", "p", "Path", "tmpFile", "p", "resolve", "TEMP_FILE_FORMAT", "try", "var", "chan", "Files", "newByteChannel", "tmpFile", "StandardOpenOption", "CREATE_NEW", "StandardOpenOption", "WRITE", "StandardOpenOption", "DELETE_ON_CLOSE", "return", "true", "catch", "IOException", "e", "return", "false", "finally", "try", "Files", "deleteIfExists", "tmpFile", "catch", "IOException", "e"], ["public", "void", "logConnectionProviderStatistic", "PersistenceEntryManager", "ldapEntryManager", "String", "connectionProviderName", "String", "bindConnectionProviderName", "PersistenceOperationService", "persistenceOperationService", "ldapEntryManager", "getOperationService", "if", "persistenceOperationService", "instanceof", "LdapOperationService", "return", "LdapConnectionProvider", "ldapConnectionProvider", "LdapOperationService", "persistenceOperationService", "getConnectionProvider", "LdapConnectionProvider", "bindLdapConnectionProvider", "LdapOperationService", "persistenceOperationService", "getBindConnectionProvider", "if", "ldapConnectionProvider", "null"], ["private", "ClassPathBeanDefinitionScanner", "scan", "BeanDefinitionRegistry", "beanDefinitionRegistry", "new", "SimpleBeanDefinitionRegistry", "ClassPathBeanDefinitionScanner", "scanner", "new", "ClassPathBeanDefinitionScanner", "beanDefinitionRegistry", "scanner", "setIncludeAnnotationConfig", "false", "scanner", "addIncludeFilter", "new", "AnnotationTypeFilter", "BusAware", "class", "BeanNameGenerator", "beanNameGenerator", "new", "FullyQualifiedAnnotationBeanNameGenerator", "scanner", "setBeanNameGenerator", "beanNameGenerator", "int", "numberOfBeans", "scanner", "scan", "packageName"], ["private", "boolean", "hasRuleMatchFor", "InputComponent", "component", "FilterableIssue", "issue", "for", "WildcardPattern", "pattern", "rulePatternByComponent", "getOrDefault", "component", "Collections", "emptyList", "if", "pattern", "match", "issue", "ruleKey", "toString"], ["public", "String", "mapSignInRequest", "RequestContext", "requestContext", "String", "trustedIdpRealm"], ["public", "boolean", "isAllowedBySpontaneousScope", "String", "spontaneousScope", "String", "scopeRequested", "try", "boolean", "result", "spontaneousScope", "equals", "scopeRequested", "if", "result", "result", "Pattern", "matches", "spontaneousScope", "scopeRequested", "if", "result"], ["private", "static", "void", "handleException", "String", "msg", "Exception", "e"], ["private", "void", "handleSpan", "PSpan", "span", "if", "isDebug"], ["private", "boolean", "executeExternalNotifyEndUser", "CustomScriptConfiguration", "customScriptConfiguration", "ExternalCibaEndUserNotificationContext", "context", "try"], ["private", "void", "addCustomConfigurationProviderProperties", "ManagerParameter", "parameter", "final", "String", "providersStrList", "System", "getProperty", "ConfigurationProvider", "CONFIG_PROVIDERS_PROPERTY", "if", "providersStrList", "null", "final", "String", "providersClassNames", "providersStrList", "split", "for", "String", "providerClassName", "providersClassNames", "if", "providerClassName", "null", "equals", "providerClassName", "continue", "try", "final", "Class", "providerClass", "Class", "forName", "providerClassName", "trim", "true", "classLoadingUtil", "getClassloader", "final", "ConfigurationProvider", "configurationProvider", "ConfigurationProvider", "class", "cast", "providerClass", "getDeclaredConstructor", "newInstance", "parameter", "mergeProperties", "configurationProvider", "getProperties", "catch", "Exception", "e"], ["inheritDoc", "SuppressWarnings", "rawtypes", "public", "void", "onClientListenerEvent", "IRTMPEvent", "event"], ["Override", "public", "Tokenizer", "create", "Settings", "settings", "indexSettings", "getSettings", "getAsSettings", "index", "analysis", "tokenizer", "name", "Map", "String", "String", "args", "settings", "keySet", "stream", "collect", "Collectors", "toMap", "k", "k", "settings", "get", "if", "args", "isEmpty", "args", "putAll", "AnsjElasticConfigurator", "getDefaults", "args", "put", "type", "name"], ["GET", "Produces", "application", "json", "public", "Response", "startAuthentication", "QueryParam", "username", "String", "userName", "QueryParam", "keyhandle", "String", "keyHandle", "QueryParam", "application", "String", "appId", "QueryParam", "session_id", "String", "sessionId", "Parameter", "username", "is", "deprecated", "We", "uses", "it", "only", "to", "determine", "is", "it", "s", "one", "or", "two", "step", "workflow", "try", "if", "appConfiguration", "getDisableU2fEndpoint", "return", "Response", "status", "Status", "FORBIDDEN", "build"], ["Override", "public", "Future", "JsonObject", "getQueueRequest", "String", "queue", "Promise", "JsonObject", "promise", "Promise", "promise", "if", "StringUtils", "isEmpty", "queue", "promise", "fail", "Queue", "is", "not", "allowed", "to", "be", "empty", "return", "promise", "future", "redisAPI", "hget", "QUEUE_REQUESTS", "queue", "reply", "if", "reply", "failed", "String", "message", "get", "queue", "request", "queue", "from", "hash", "QUEUE_REQUESTS", "resulted", "in", "cause", "logCause", "reply"], ["GET", "Produces", "application", "json", "public", "Response", "getConfiguration", "try", "final", "GluuConfiguration", "conf", "new", "GluuConfiguration", "conf", "setIdGenerationEndpoint", "appConfiguration", "getIdGenerationEndpoint", "conf", "setIntrospectionEndpoint", "appConfiguration", "getIntrospectionEndpoint", "conf", "setAuthLevelMapping", "createAuthLevelMapping", "conf", "setScopeToClaimsMapping", "createScopeToClaimsMapping", "convert", "manually", "to", "avoid", "possible", "conflicts", "between", "resteasy", "providers", "e", "g", "jettison", "jackson", "final", "String", "entity", "ServerUtil", "asPrettyJson", "conf"], ["private", "List", "RuleFeatures", "collectRuleFeatures", "List", "Rule", "rules", "List", "RuleFeatures", "featuresList", "new", "ArrayList", "for", "Rule", "rule", "rules", "boolean", "isStorageExpand", "rule", "isStorageExpand", "boolean", "isExpandOnBackend", "rule", "isExpandOnBackend", "boolean", "isDeltaOnBackend", "rule", "isDeltaOnBackend", "try", "Pattern", "pattern", "Pattern", "compile", "rule", "getUrlPattern", "featuresList", "add", "new", "RuleFeatures", "pattern", "ImmutableMap", "of", "RuleFeatures", "Feature", "STORAGE_EXPAND", "isStorageExpand", "RuleFeatures", "Feature", "EXPAND_ON_BACKEND", "isExpandOnBackend", "RuleFeatures", "Feature", "DELTA_ON_BACKEND", "isDeltaOnBackend"], ["uriPatternSessionKey", "pv", "asStringValue", "catch", "ParameterException", "e", "throw", "new", "PipeRunException", "this", "exception", "extracting", "parameters", "e", "hash", "over", "data", "genereren", "uit", "cache", "lezen", "en", "teruggeven", "in", "cache", "updaten", "verwijderen", "uit", "cache", "cache", "naar", "disk", "wegschrijven", "cache", "legen", "String", "cacheKey", "null", "if", "uriPatternSessionKey", "null", "uriPatternSessionKey", "isEmpty", "cacheKey", "getRestPath", "_", "uriPatternSessionKey", "toLowerCase", "else", "cacheKey", "getRestPath", "_", "getUriPattern", "if", "cache", "null", "cache", "containsKey", "cacheKey", "Object", "returnCode", "false"], ["producer", "send", "session", "createTextMessage", "Message", "committing", "the", "session", "prior", "to", "the", "close", "session", "commit", "starting", "a", "new", "transaction", "producer", "send", "session", "createTextMessage", "Message", "in", "a", "new", "transaction", "with", "prefetch", "the", "message", "will", "be", "pending", "till", "second", "commit", "LOG", "info", "Closing", "consumer", "consumer", "close", "create", "a", "consumer", "consumer", "session", "createConsumer", "test_data_destination", "LOG", "info", "Consumer", "connected", "retrieve", "message", "previously", "committed", "to", "tmp", "queue", "Message", "message", "consumer", "receive", "if", "message", "null"], ["Override", "public", "void", "onStart", "NetworkBridge", "bridge", "if", "brokerService", "isUseJmx", "return", "NetworkBridgeView", "view", "new", "NetworkBridgeView", "bridge", "view", "setCreateByDuplex", "createdByDuplex", "try", "ObjectName", "objectName", "createNetworkBridgeObjectName", "bridge", "AnnotatedMBean", "registerMBean", "brokerService", "getManagementContext", "view", "objectName", "bridge", "setMbeanObjectName", "objectName", "MBeanBridgeDestination", "mBeanBridgeDestination", "new", "MBeanBridgeDestination", "brokerService", "networkBridgeConfiguration", "bridge", "view", "destinationObjectNameMap", "put", "bridge", "mBeanBridgeDestination", "mBeanBridgeDestination", "start"], ["Override", "public", "void", "send", "Notification", "notification", "byte", "json", "toJsonAsBytes", "notification", "if", "json", "null", "String", "response", "httpPostRequest", "send", "json", "if", "Strings", "isNotBlank", "response"], ["Bean", "name", "BEAN_NAME_EMBEDDED_REDIS", "destroyMethod", "stop", "public", "GenericContainer", "redis", "ConfigurableEnvironment", "environment", "Qualifier", "REDIS_WAIT_STRATEGY_BEAN_NAME", "WaitStrategy", "redisStartupCheckStrategy", "Optional", "Network", "network", "throws", "Exception", "CLUSTER", "SLOTS", "command", "returns", "IP", "port", "for", "each", "node", "so", "ports", "outside", "and", "inside", "container", "must", "be", "the", "same", "GenericContainer", "redis", "new", "FixedHostPortGenericContainer", "ContainerUtils", "getDockerImageName", "properties", "asCanonicalNameString", "withFixedExposedPort", "properties", "getPort", "properties", "getPort", "withExposedPorts", "properties", "getPort", "withEnv", "REDIS_USER", "properties", "getUser", "withEnv", "REDIS_PASSWORD", "properties", "getPassword", "withCopyFileToContainer", "MountableFile", "forHostPath", "prepareRedisConf", "data", "redis", "conf", "withCopyFileToContainer", "MountableFile", "forHostPath", "prepareNodesConf", "data", "nodes", "conf", "withCommand", "redis", "server", "data", "redis", "conf", "waitingFor", "redisStartupCheckStrategy", "network", "ifPresent", "redis", "withNetwork", "redis", "configureCommonsAndStart", "redis", "properties", "log", "Map", "String", "Object", "redisEnv", "registerRedisEnvironment", "environment", "redis", "properties", "properties", "getPort"], ["Returns", "true", "if", "the", "url", "represents", "a", "local", "server", "that", "is", "port", "is", "explicitly", "set", "to", "public", "static", "boolean", "isLocal", "String", "url", "boolean", "isLocal", "false", "try", "URL", "urlValue", "new", "URL", "url", "isLocal", "urlValue", "getPort", "if", "isLocal"], ["param", "port", "Port", "number", "return", "True", "if", "port", "mapping", "is", "successful", "public", "static", "boolean", "mapTcpPort", "int", "port", "try", "Discover", "gateway", "GatewayDiscover", "discover", "new", "GatewayDiscover", "discover", "discover", "GatewayDevice", "device", "discover", "getValidGateway", "if", "device", "null", "Gateway", "found", "PortMappingEntry", "portMapping", "new", "PortMappingEntry", "if", "device", "getSpecificPortMappingEntry", "port", "TCP", "portMapping", "Mapping", "already", "registered"], ["Override", "public", "void", "dispatchEvent", "IEvent", "event"], ["Override", "public", "void", "visitFragmentOpen", "String", "name", "long", "id", "int", "cursor"], ["private", "void", "logException", "HttpServletRequest", "request", "AuthenticationException", "exception", "String", "username", "String", "ipAddress", "request", "getRemoteAddr", "if", "exception", "instanceof", "IpAddressAuthenticationRateException", "if", "messageAlreadyLogged", "null", "messageAlreadyLogged", "getIfPresent", "ipAddress", "Boolean", "TRUE", "messageAlreadyLogged", "put", "ipAddress", "Boolean", "TRUE", "log", "warn", "Possible", "brute", "force", "attack", "authentication", "attempt", "rate", "limit", "exceeded", "for", "IP", "address", "ipAddress", "else", "if", "exception", "instanceof", "UsernameAuthenticationRateException", "if", "rateLimitUsernameLogged", "null", "rateLimitUsernameLogged", "getIfPresent", "username", "Boolean", "TRUE", "rateLimitUsernameLogged", "put", "username", "Boolean", "TRUE", "log", "warn", "Possible", "brute", "force", "attack", "authentication", "attempt", "rate", "limit", "exceeded", "against", "username", "username", "else", "if", "exception", "instanceof", "BadCredentialsException", "exception", "instanceof", "DisabledException", "exception", "instanceof", "LockedException", "log", "warn", "Failed", "login", "attempt", "on", "user", "username", "from", "IP", "ipAddress", "else"], ["public", "WebDriver", "createRemoteWebDriver", "String", "remoteUrl", "Capabilities", "capabilities", "WebDriver", "webdriver", "null", "int", "waitTimeoutSec", "config", "getTimeout", "long", "timeoutMs", "System", "currentTimeMillis", "TimeUnit", "SECONDS", "toMillis", "waitTimeoutSec", "String", "browserName", "capabilities", "getBrowserName"], ["inheritDoc", "Override", "public", "boolean", "addData", "IoBuffer", "data", "int", "timestamp", "boolean", "amf"], ["sysp", "setValue", "properties", "get", "i", "javaTask", "addSysproperty", "sysp", "if", "verbose", "javaTask", "createArg", "setValue", "verbose", "javaTask", "createArg", "setValue", "moduleName", "if", "moduleArguments", "null", "for", "String", "m", "moduleArguments", "javaTask", "createArg", "setValue", "m", "javaTask", "execute", "catch", "ExitStatusException", "e", "String", "tmp"], ["Override", "public", "void", "onException", "Message", "message", "Exception", "exception"], ["private", "static", "void", "handleException", "String", "msg"], ["non", "Javadoc", "see", "org", "red5", "server", "adapter", "MultiThreadedApplicationAdapter", "appConnect", "org", "red5", "server", "api", "IConnection", "java", "lang", "Object", "Override", "public", "boolean", "appConnect", "IConnection", "conn", "Object", "params"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "cassandra", "ToxiproxyContainer", "ContainerProxy", "cassandraContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_CASSANDRA", "CassandraContainer", "cassandra", "CassandraProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "cassandra", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "cassandra", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "cassandra", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "cassandra", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedCassandraToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "clickhouse", "ToxiproxyContainer", "ContainerProxy", "clickhouseContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_CLICK_HOUSE", "ClickHouseContainer", "clickHouseContainer", "ClickHouseProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "clickHouseContainer", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "clickhouse", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "clickhouse", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "clickhouse", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedClickHouseToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["protected", "void", "doCollection", "TransportConnection", "tc"], ["Override", "public", "boolean", "removeJobScheduler", "String", "name", "throws", "Exception", "boolean", "result", "false", "this", "lock", "lock", "try", "InMemoryJobScheduler", "scheduler", "this", "schedulers", "remove", "name", "result", "scheduler", "null", "if", "result"], ["Override", "public", "void", "onException", "IOException", "error", "synchronized", "this", "setHasExpired", "true", "only", "log", "if", "not", "stopped", "if", "stopped", "get"], ["private", "String", "getCustomSTSParameterValue", "String", "authRealmParameter", "null", "if", "getCustomSTSParameter", "null", "HttpServletRequest", "request", "ServletRequestAttributes", "RequestContextHolder", "currentRequestAttributes", "getRequest", "authRealmParameter", "request", "getParameter", "getCustomSTSParameter", "if", "authRealmParameter", "null", "HttpServletResponse", "response", "ServletRequestAttributes", "RequestContextHolder", "currentRequestAttributes", "getResponse", "SavedRequest", "savedRequest", "requestCache", "getRequest", "request", "response", "if", "savedRequest", "null", "String", "parameterValues", "savedRequest", "getParameterValues", "this", "getCustomSTSParameter", "if", "parameterValues", "null", "parameterValues", "length", "authRealmParameter", "parameterValues"], ["private", "AnalyzerConfiguration", "synchronizeAnalyzerConfig", "ServerApi", "serverApi", "String", "projectKey", "ProgressMonitor", "progressMonitor"], ["Test", "timeout", "public", "void", "testGcDoneAtStop", "throws", "Exception", "brokerService", "createBroker", "true", "brokerService", "start", "produceWithScheduledDelayAndConsume", "LOG", "info", "job", "store", "jobSchedulerStore", "int", "numSchedulerFiles", "jobSchedulerStore", "getJournal", "getFileMap", "size", "LOG", "info", "kahadb", "store", "kahaDBPersistenceAdapter", "int", "numKahadbFiles", "kahaDBPersistenceAdapter", "getStore", "getJournal", "getFileMap", "size"], ["public", "void", "testAnyElements", "throws", "Exception", "File", "schema1", "new", "File", "BASEDIR", "src", "test", "resources", "schema", "schema5", "xsd", "log", "debug", "SCHEMA", "Map", "map", "parse", "schema1", "assertEquals", "map", "size", "Map", "elements", "schemaInfoBuilder", "getElementToTypeMap", "log", "debug", "ELEMENT", "MAP"], ["Override", "public", "void", "onWebSocketClose", "int", "statusCode", "String", "reason"], ["Override", "public", "void", "drop", "indexProxyStrategy", "removeStatisticsForIndex", "String", "message", "FailedIndexProxy", "drop", "index", "on", "indexProxyStrategy", "getIndexUserDescription", "dropped", "due", "to", "n", "getPopulationFailure", "asString"], ["public", "void", "run", "List", "Peer", "peers", "peerKit", "findAvailablePeers", "Message", "sendMessage", "converMessage", "message", "result", "\u901a\u8fc7\u4e00\u534a\u7684\u5bf9\u7b49\u4f53\u5e7f\u64ad\u51fa\u53bb", "\u5982\u679c\u6536\u5230\u4e00\u534a\u4ee5\u4e0a\u7684inv\u6d88\u606f", "\u5219\u4ee3\u8868\u6210\u529f", "int", "numConnected", "peers", "size", "int", "numToBroadcastTo", "int", "Math", "max", "Math", "round", "Math", "ceil", "peers", "size", "int", "numWaitingFor", "int", "Math", "max", "Math", "ceil", "numConnected", "numToBroadcastTo", "Collections", "shuffle", "peers", "random", "peers", "peers", "subList", "numToBroadcastTo"], ["Override", "public", "void", "corruptedCheckpointFile", "long", "version", "Throwable", "t"], ["Override", "protected", "void", "createModel", "Object", "object", "RateLimit", "rateLimit", "RateLimit", "object", "RateLimit", "updatedRateLimit", "rateLimitRepository", "incrementAndGet", "rateLimit", "getKey", "rateLimit", "getCounter", "initialize", "rateLimit", "blockingGet", "RATE_LIMITS", "put", "updatedRateLimit", "getKey", "updatedRateLimit"], ["List", "Driver", "drivers", "new", "ArrayList", "Driver", "try", "BufferedReader", "in", "new", "BufferedReader", "new", "InputStreamReader", "providerURL", "openStream", "String", "line", "while", "line", "in", "readLine", "null", "line", "line", "trim", "try", "Class", "driverClass", "bundle", "loadClass", "line", "drivers", "add", "Driver", "driverClass", "newInstance", "catch", "Exception", "e", "LOG", "warn", "Failed", "to", "load", "driver", "line", "e", "catch", "IOException", "e", "ignore", "shouldn", "t", "happen"], ["POST", "Produces", "application", "json", "public", "Response", "finishAuthentication", "FormParam", "username", "String", "userName", "FormParam", "tokenResponse", "String", "authenticateResponseString", "String", "sessionId", "null", "try", "if", "appConfiguration", "getDisableU2fEndpoint", "return", "Response", "status", "Status", "FORBIDDEN", "build"], ["Override", "public", "void", "commitsAfterLastCheckPoint", "LogPosition", "logPosition", "long", "firstTxIdAfterLastCheckPoint"], ["Test", "void", "test", "String", "sutUrl", "https", "bonigarcia", "dev", "selenium", "webdriver", "java", "driver", "get", "sutUrl", "String", "title", "driver", "getTitle"], ["private", "void", "readPath", "Path", "path", "Consumer", "String", "consumer", "throws", "IOException", "Objects", "requireNonNull", "path", "Objects", "requireNonNull", "consumer", "if", "osSupport", "return"], ["public", "DataHandler", "getReportBytes", "ReportConfigurationBean", "configuration", "throws", "Exception", "try", "return", "reportingAdminServiceStub", "getReportBytes", "configuration", "catch", "Exception", "e", "String", "msg", "Unable", "get", "Report", "in", "bytes"], ["Override", "public", "void", "contextInitialized", "ServletContextEvent", "sce", "ServletContext", "ctx", "sce", "getServletContext", "DefaultWsServerContainer", "sc", "DefaultWsServerContainer", "WebSocketPlugin", "getWsServerContainerInstance", "ctx"], ["public", "void", "validateConfigurationResource", "Buffer", "configurationResource", "String", "resourceSchema", "Handler", "AsyncResult", "ValidationResult", "resultHandler", "vertx", "executeBlocking", "future", "if", "JsonUtil", "isValidJson", "configurationResource", "String", "message", "Unable", "to", "parse", "json"], ["Test", "public", "void", "testFLVReaderFile", "log", "info", "n", "testFLVReaderFile", "String", "paths", "new", "String", "target", "test", "classes", "fixtures", "h264_aac", "flv", "target", "test", "classes", "fixtures", "h264_mp3", "flv", "target", "test", "classes", "fixtures", "h264_speex", "flv", "target", "test", "classes", "fixtures", "stray", "flv", "target", "test", "classes", "fixtures", "NAPNAP", "flv", "target", "test", "classes", "fixtures", "dummy", "flv", "try", "for", "String", "path", "paths", "File", "file", "Paths", "get", "path", "toFile", "if", "file", "exists", "file", "canRead", "log", "info", "Reading", "file", "getName", "FLVReader", "reader", "new", "FLVReader", "file", "true", "KeyFrameMeta", "meta", "reader", "analyzeKeyFrames", "log", "debug", "Meta", "meta", "ITag", "tag", "null", "for", "int", "t", "t", "t", "tag", "reader", "readTag"], ["public", "Future", "Void", "storeQueueRequest", "String", "queue", "JsonObject", "queueRequest", "Promise", "Void", "promise", "Promise", "promise", "if", "StringUtils", "isEmpty", "queue", "promise", "fail", "Queue", "is", "not", "allowed", "to", "be", "empty", "return", "promise", "future", "if", "queueRequest", "null", "promise", "fail", "Request", "is", "not", "allowed", "to", "be", "empty", "return", "promise", "future", "try", "String", "queueRequestStr", "queueRequest", "encode", "redisAPI", "hset", "Arrays", "asList", "QUEUE_REQUESTS", "queue", "queueRequestStr", "reply", "if", "reply", "failed", "String", "message", "Failed", "to", "store", "request", "for", "queue", "queue", "Cause", "logCause", "reply"], ["public", "static", "String", "getSynapseConfigAbsPath", "ServerContextInformation", "contextInformation", "String", "carbonHome", "MicroIntegratorBaseUtils", "getCarbonHome", "ServerConfigurationInformation", "configInfo", "getSynapseServerConfigInfo", "contextInformation", "if", "configInfo", "null", "String", "msg", "Unable", "to", "obtain", "ESB", "server", "configuration", "information"], ["Test", "public", "void", "test", "throws", "Exception", "stompConnect", "String", "connectFrame", "STOMP", "n", "login", "system", "n", "passcode", "manager", "n", "accept", "version", "n", "heart", "beat", "n", "host", "localhost", "n", "n", "Stomp", "NULL", "stompConnection", "sendFrame", "connectFrame", "String", "response", "stompConnection", "receiveFrame", "trim"], ["THE", "MAGIC", "IS", "HERE", "Idempotent", "Logging", "logEvent", "true", "public", "APIGatewayProxyResponseEvent", "handleRequest", "final", "APIGatewayProxyRequestEvent", "input", "final", "Context", "context", "Map", "String", "String", "headers", "new", "HashMap", "headers", "put", "Content", "Type", "application", "json", "headers", "put", "Access", "Control", "Allow", "Origin", "headers", "put", "Access", "Control", "Allow", "Methods", "GET", "OPTIONS", "headers", "put", "Access", "Control", "Allow", "Headers", "APIGatewayProxyResponseEvent", "response", "new", "APIGatewayProxyResponseEvent", "withHeaders", "headers", "try", "String", "address", "JsonConfig", "get", "getObjectMapper", "readTree", "input", "getBody", "get", "address", "asText", "final", "String", "pageContents", "this", "getPageContents", "address", "String", "output", "String", "format", "message", "hello", "world", "location", "s", "pageContents"], ["sysp", "setValue", "properties", "get", "i", "javaTask", "addSysproperty", "sysp", "if", "verbose", "javaTask", "createArg", "setValue", "verbose", "javaTask", "createArg", "setValue", "moduleName", "if", "moduleArguments", "null", "for", "String", "m", "moduleArguments", "javaTask", "createArg", "setValue", "m", "javaTask", "execute", "catch", "ExitStatusException", "e", "String", "tmp"], ["Returns", "a", "link", "QueueingStrategy", "based", "on", "the", "provided", "hookConfiguration", "When", "code", "null", "code", "is", "provided", "or", "the", "hookConfiguration", "contains", "invalid", "configuration", "relating", "the", "queueingStrategy", "a", "link", "DefaultQueueingStrategy", "instance", "will", "be", "returned", "param", "hookConfiguration", "the", "hook", "configuration", "containing", "the", "queueingStrategy", "configuration", "values", "return", "A", "link", "QueueingStrategy", "based", "on", "the", "provided", "hookConfiguration", "public", "static", "QueueingStrategy", "buildQueueStrategy", "JsonObject", "hookConfiguration", "QueueingStrategy", "queueingStrategy", "new", "DefaultQueueingStrategy", "if", "hookConfiguration", "null", "hookConfiguration", "containsKey", "QUEUEING_STRATEGY_PROPERTY", "return", "queueingStrategy", "Object", "queueingStrategyConfigObj", "hookConfiguration", "getValue", "QUEUEING_STRATEGY_PROPERTY", "if", "queueingStrategyConfigObj", "instanceof", "JsonObject"], ["Logs", "the", "error", "message", "and", "throws", "New", "AxisFault", "param", "errorMsg", "String", "message", "which", "contains", "error", "information", "throws", "AxisFault", "throws", "with", "error", "information", "protected", "void", "handleException", "String", "errorMsg", "throws", "AxisFault"], ["Override", "public", "Optional", "TaintVulnerabilityRaisedEvent", "parse", "String", "jsonData", "var", "payload", "gson", "fromJson", "jsonData", "TaintVulnerabilityRaisedEventPayload", "class", "if", "payload", "isInvalid"], ["Test", "public", "void", "testManyTempDestinations", "throws", "Exception", "Connection", "connection", "createConnectionFactory", "createConnection", "connection", "start", "Session", "session", "connection", "createSession", "false", "Session", "AUTO_ACKNOWLEDGE", "for", "int", "i", "i", "DEST_COUNT", "i", "destination", "i", "session", "createTemporaryQueue"], ["int", "nextChar", "code", "peek", "while", "nextChar", "boolean", "characterConsumed", "false", "for", "Channel", "O", "channel", "channels", "if", "channel", "consume", "code", "output", "characterConsumed", "true", "break", "if", "characterConsumed", "if", "failIfNoChannelToConsumeOneCharacter", "String", "message", "None", "of", "the", "channel", "has", "been", "able", "to", "handle", "character", "char", "code", "peek", "decimal", "value", "code", "peek", "at", "line", "code", "getLinePosition", "column", "code", "getColumnPosition", "if", "failIfNoChannelToConsumeOneCharacter", "throw", "new", "IllegalStateException", "message"], ["see", "org", "jivesoftware", "openfire", "vcard", "DefaultVCardProvider", "loadVCard", "java", "lang", "String", "Override", "public", "Element", "loadVCard", "String", "username"], ["public", "boolean", "isValidSigninAddress", "RequestContext", "context", "String", "endpointAddress", "String", "realm", "throws", "Exception", "if", "endpointAddress", "null", "return", "true", "Idp", "idpConfig", "Idp", "WebUtils", "getAttributeFromFlowScope", "context", "idpConfig", "Application", "serviceConfig", "idpConfig", "findApplication", "realm", "if", "serviceConfig", "null"], ["Override", "public", "Response", "toResponse", "Exception", "exception"], ["Override", "public", "void", "failToExtractInitialFileHeader", "Exception", "e"], ["This", "implementation", "uses", "DNS", "SRV", "records", "to", "find", "a", "list", "of", "remote", "hosts", "for", "the", "XMPP", "domain", "as", "implemented", "by", "link", "DNSUtil", "resolveXMPPDomain", "String", "int", "It", "then", "iteratively", "tries", "to", "create", "a", "socket", "connection", "to", "each", "of", "them", "until", "one", "socket", "connection", "succeeds", "Either", "the", "connected", "Socket", "instance", "is", "returned", "or", "null", "if", "no", "connection", "could", "be", "established", "Note", "that", "this", "method", "blocks", "while", "performing", "network", "IO", "The", "timeout", "as", "defined", "by", "link", "RemoteServerManager", "getSocketTimeout", "is", "observed", "param", "xmppDomain", "The", "XMPP", "domain", "to", "connect", "to", "param", "port", "The", "port", "to", "connect", "to", "when", "DNS", "resolution", "fails", "return", "a", "Socket", "instance", "that", "is", "connected", "or", "null", "see", "DNSUtil", "resolveXMPPDomain", "String", "int", "public", "static", "Map", "Entry", "Socket", "Boolean", "createSocketToXmppDomain", "String", "xmppDomain", "int", "port"], ["Override", "public", "ReadOnlyDatabases", "Lookup", "lookupReadOnlyDatabases", "var", "previous", "previousLookup", "var", "next", "previous", "try", "next", "systemDatabase", "map", "this", "lookupReadOnlyDatabases", "map", "dbs", "new", "SystemGraphLookup", "dbs", "false", "orElse", "previous", "catch", "Exception", "e"], ["private", "void", "registerPubsubEnvironment", "GenericContainer", "container", "ConfigurableEnvironment", "environment", "PubsubProperties", "properties", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "google", "pubsub", "port", "container", "getMappedPort", "properties", "getPort", "map", "put", "embedded", "google", "pubsub", "host", "container", "getHost", "map", "put", "embedded", "google", "pubsub", "project", "id", "properties", "getProjectId"], ["Override", "public", "void", "removeListener", "String", "listenerId"], ["CheckForNull", "public", "Language", "language", "InputFile", "inputFile", "Language", "detectedLanguage", "null", "for", "Entry", "Language", "String", "languagePatterns", "extensionsByLanguage", "entrySet", "if", "isCandidateForLanguage", "inputFile", "languagePatterns", "getValue", "if", "detectedLanguage", "null", "detectedLanguage", "languagePatterns", "getKey", "else", "Language", "was", "already", "forced", "by", "another", "pattern", "throw", "MessageException", "of", "MessageFormat", "format", "Language", "of", "file", "can", "not", "be", "decided", "as", "the", "file", "extension", "matches", "both", "and", "inputFile", "uri", "getDetails", "detectedLanguage", "getDetails", "languagePatterns", "getKey", "if", "detectedLanguage", "null"], ["Override", "public", "void", "visitUTF8", "String", "name", "long", "id", "CharSequence", "target", "boolean", "found", "StageTester", "hasBadChar", "target", "if", "found"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "google", "pubsub", "ToxiproxyContainer", "ContainerProxy", "googlePubSubContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_GOOGLE_PUBSUB", "GenericContainer", "pubsub", "PubsubProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "pubsub", "properties", "getPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "google", "pubsub", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "google", "pubsub", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "google", "pubsub", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedGooglePubSubToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["private", "void", "checkArm", "WebDriverManager", "wdm", "wdm", "avoidBrowserDetection", "mac", "arch64", "setup", "String", "driverPath", "wdm", "getDownloadedDriverPath"], ["doc", "comment", "inherited", "from", "LogWriter", "public", "void", "logReceivedCommand", "Logger", "log", "Object", "command"], ["private", "void", "registerEnvironment", "GenericContainer", "container", "ConfigurableEnvironment", "environment", "MinioProperties", "properties", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "minio", "host", "container", "getHost", "map", "put", "embedded", "minio", "port", "container", "getMappedPort", "properties", "port", "map", "put", "embedded", "minio", "consolePort", "container", "getMappedPort", "properties", "consolePort", "map", "put", "embedded", "minio", "accessKey", "properties", "accessKey", "map", "put", "embedded", "minio", "secretKey", "properties", "secretKey", "map", "put", "embedded", "minio", "region", "properties", "region"], ["private", "StandaloneDatabaseContext", "createDatabase", "NamedDatabaseId", "namedDatabaseId"], ["public", "synchronized", "boolean", "start", "We", "only", "need", "to", "start", "if", "there", "are", "patterns", "and", "we", "don", "t", "already", "have", "a", "proxy", "if", "targetName", "null", "return", "true", "assure", "the", "gbean", "is", "running", "AbstractName", "abstractName", "getGBeanInstance", "getAbstractName", "if", "isRunning", "getKernel", "targetName"], ["Get", "CSV", "from", "Yahoo", "log", "info", "Sending", "request", "url", "URL", "request", "new", "URL", "url", "RedirectableRequest", "redirectableRequest", "new", "RedirectableRequest", "request", "redirectableRequest", "setConnectTimeout", "YahooFinance", "CONNECTION_TIMEOUT", "redirectableRequest", "setReadTimeout", "YahooFinance", "CONNECTION_TIMEOUT", "Map", "String", "String", "requestProperties", "new", "HashMap", "String", "String", "requestProperties", "put", "Cookie", "CrumbManager", "getCookie", "URLConnection", "connection", "redirectableRequest", "openConnection", "requestProperties", "InputStreamReader", "is", "new", "InputStreamReader", "connection", "getInputStream", "BufferedReader", "br", "new", "BufferedReader", "is", "skip", "the", "first", "line", "br", "readLine", "Parse", "CSV", "for", "String", "line", "br", "readLine", "line", "null", "line", "br", "readLine"], ["public", "Optional", "ServerApi", "getServerApi", "String", "connectionId", "var", "params", "connectionRepository", "getEndpointParams", "connectionId", "if", "params", "isEmpty"], ["private", "void", "enableCasForSubPaths", "List", "String", "subPaths", "VaultContainer", "vault", "for", "String", "subPath", "subPaths", "if", "subPath", "isEmpty"], ["public", "Subscription", "createSubscription", "String", "topicName", "String", "subscriptionName", "DeadLetter", "deadLetter", "ProjectTopicName", "topic", "ProjectTopicName", "of", "projectId", "topicName", "ProjectSubscriptionName", "subscription", "ProjectSubscriptionName", "of", "projectId", "subscriptionName", "try"], ["Return", "hostname", "for", "URL", "param", "url", "URL", "return", "Hostname", "from", "that", "URL", "Override", "protected", "String", "getHostname", "String", "url"], ["public", "void", "onError", "Throwable", "throwable"], ["static", "void", "assertNotMigrated", "Path", "path", "FileSystemAbstraction", "fileSystem", "InternalLog", "log", "Path", "migratedFile", "getMigratedFile", "path", "if", "fileSystem", "fileExists", "migratedFile", "String", "message", "The", "repository", "file", "path", "toAbsolutePath", "has", "been", "marked", "as", "migrated", "If", "you", "are", "sure", "that", "you", "want", "use", "this", "repository", "you", "need", "to", "manually", "rename", "the", "file", "migratedFile", "toAbsolutePath", "to", "path", "getFileName"], ["Override", "public", "List", "String", "groupsFromRoles", "List", "String", "roles", "if", "template", "null", "roles", "null", "return", "roles", "else", "List", "String", "renamedRoles", "new", "ArrayList", "for", "String", "role", "roles", "String", "renamedRole", "template", "replace", "ROLE_MAPPING_PLACEHOLDER", "role", "renamedRoles", "add", "renamedRole"], ["public", "void", "createTopics", "Collection", "String", "topics", "Collection", "TopicConfiguration", "topicsConfiguration", "Map", "String", "TopicConfiguration", "defaultTopicToTopicConfigurationMap", "topics", "stream", "collect", "toMap", "topic", "topic", "topic", "new", "TopicConfiguration", "topic", "DEFAULT_PARTITION_COUNT", "Map", "String", "TopicConfiguration", "topicToTopicConfigurationMap", "topicsConfiguration", "stream", "collect", "toMap", "TopicConfiguration", "getTopic", "topicConfiguration", "topicConfiguration", "defaultTopicToTopicConfigurationMap", "putAll", "topicToTopicConfigurationMap", "Collection", "TopicConfiguration", "topicsConfigurationToCreate", "defaultTopicToTopicConfigurationMap", "values", "if", "topicsConfigurationToCreate", "isEmpty"], ["Output", "buffer", "param", "in", "Input", "buffer", "param", "numBytesMax", "Number", "of", "bytes", "max", "return", "int", "Number", "of", "bytes", "written", "public", "final", "static", "int", "put", "IoBuffer", "out", "IoBuffer", "in", "int", "numBytesMax", "if", "log", "isTraceEnabled", "log", "trace", "Put", "nin", "buffer", "nout", "buffer", "nmax", "bytes", "new", "Object", "out", "in", "numBytesMax", "int", "numBytesRead", "if", "in", "null", "int", "limit", "Math", "min", "in", "limit", "numBytesMax", "byte", "inBuf", "new", "byte", "limit"], ["private", "void", "traceOrDebug", "boolean", "traceOn", "String", "msg", "if", "traceOn", "trace", "info", "msg", "if", "log", "isDebugEnabled"], ["private", "void", "save", "Settings", "settings", "Path", "settingsPath", "assert", "settings", "null", "method", "should", "only", "be", "invoked", "by", "scheduleSave", "which", "checks", "for", "null"], ["private", "void", "registerVaultEnvironment", "VaultContainer", "vault", "ConfigurableEnvironment", "environment", "VaultProperties", "properties", "Integer", "mappedPort", "vault", "getMappedPort", "properties", "getPort", "String", "host", "vault", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "vault", "host", "host", "map", "put", "embedded", "vault", "port", "mappedPort", "map", "put", "embedded", "vault", "token", "properties", "getToken"], ["private", "void", "sendWithReplyToTemp", "ConnectionFactory", "cf", "String", "serviceQueue", "throws", "JMSException", "InterruptedException", "Connection", "con", "cf", "createConnection", "con", "start", "Session", "session", "con", "createSession", "false", "Session", "AUTO_ACKNOWLEDGE", "TemporaryQueue", "tempQueue", "session", "createTemporaryQueue", "TextMessage", "msg", "session", "createTextMessage", "Request", "msg", "setJMSReplyTo", "tempQueue", "MessageProducer", "producer", "session", "createProducer", "session", "createQueue", "serviceQueue", "producer", "send", "msg", "This", "sleep", "also", "seems", "to", "matter", "Thread", "sleep", "MessageConsumer", "consumer", "session", "createConsumer", "tempQueue", "Message", "replyMsg", "consumer", "receive"], ["private", "void", "registerPostgresqlEnvironment", "PostgreSQLContainer", "postgresql", "ConfigurableEnvironment", "environment", "PostgreSQLProperties", "properties", "Integer", "mappedPort", "postgresql", "getMappedPort", "PostgreSQLContainer", "POSTGRESQL_PORT", "String", "host", "postgresql", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "postgresql", "port", "mappedPort", "map", "put", "embedded", "postgresql", "host", "host", "map", "put", "embedded", "postgresql", "schema", "properties", "getDatabase", "map", "put", "embedded", "postgresql", "user", "properties", "getUser", "map", "put", "embedded", "postgresql", "password", "properties", "getPassword", "String", "jdbcURL", "jdbc", "postgresql"], ["BeforeSuite", "public", "void", "setupEnv", "throws", "IOException", "Process", "process", "String", "line", "String", "setup", "sh", "File", "separator", "src", "File", "separator", "test", "File", "separator", "java", "File", "separator", "EnvSetup", "sh", "process", "Runtime", "getRuntime", "exec", "setup", "try", "BufferedReader", "bufferedreader", "new", "BufferedReader", "new", "InputStreamReader", "process", "getInputStream", "while", "line", "bufferedreader", "readLine", "null"], ["private", "boolean", "validateSigninEndpointAddress", "Application", "serviceConfig", "String", "endpointAddress", "if", "serviceConfig", "getPassiveRequestorEndpoint", "null", "serviceConfig", "getCompiledPassiveRequestorEndpointConstraint", "null", "LOG", "error", "Either", "the", "passiveRequestorEndpoint", "or", "the", "passiveRequestorEndpointConstraint", "configuration", "values", "must", "be", "specified", "for", "the", "application", "else", "if", "serviceConfig", "getPassiveRequestorEndpoint", "null", "serviceConfig", "getPassiveRequestorEndpoint", "equals", "endpointAddress"], ["long", "startTime", "Long", "parseLong", "System", "getProperty", "START_TIME", "double", "startupTime", "System", "currentTimeMillis", "startTime", "try", "if", "log", "isDebugEnabled", "log", "debug", "Server", "dataHolder", "getCarbonServerConfigurationService", "getFirstProperty", "Name", "dataHolder", "getCarbonServerConfigurationService", "getFirstProperty", "Version", "catch", "Exception", "e", "log", "debug", "Error", "while", "retrieving", "server", "configuration", "e", "try", "ServerStatus", "setServerRunning", "catch", "AxisFault", "e", "String", "msg", "Cannot", "set", "server", "to", "running", "mode", "log", "error", "msg", "e"], ["JsonObject", "delegateObject", "new", "JsonObject", "configString", "methods", "of", "the", "delegate", "Set", "HttpMethod", "methods", "new", "HashSet", "delegateObject", "getJsonArray", "METHODS", "forEach", "method", "methods", "add", "HttpMethod", "valueOf", "String", "method", "pattern", "of", "the", "delegate", "Pattern", "pattern", "try", "pattern", "Pattern", "compile", "delegateObject", "getString", "PATTERN", "catch", "Exception", "e", "throw", "new", "ValidationException", "Could", "not", "parse", "pattern", "delegateObject", "getString", "PATTERN", "of", "delegate", "delegateName", "e", "requests", "of", "the", "delegate", "List", "DelegateRequest", "requests", "new", "ArrayList", "for", "int", "i", "i", "delegateObject", "getJsonArray", "REQUESTS", "size", "i", "if", "LOG", "isTraceEnabled"], ["\u666e\u901a\u8d26\u6237\u7684\u7b7e\u540d", "Override", "public", "boolean", "signInputs", "Transaction", "tx", "ECKey", "key", "int", "numInputs", "tx", "getInputs", "size", "for", "int", "i", "i", "numInputs", "i", "TransactionInput", "txIn", "TransactionInput", "tx", "getInput", "i", "if", "txIn", "getFroms", "null", "txIn", "getFroms", "size"], ["Override", "public", "void", "onWSConnect", "WebSocketConnection", "conn"], ["Override", "public", "void", "exec", "int", "executionCounter", "List", "String", "args", "RedisUtils", "toPayload", "luaScriptState", "getSha", "keys", "size", "keys", "arguments", "redisAPI", "evalsha", "args", "event", "if", "event", "succeeded", "promise", "complete", "event", "result", "toLong", "else", "String", "message", "event", "cause", "getMessage", "if", "message", "null", "message", "startsWith", "NOSCRIPT", "log", "warn", "HalfOpenCircuitRedisCommand", "script", "couldn", "t", "be", "found", "reload", "it"], ["output", "the", "result", "of", "stack", "trace", "capture", "to", "the", "log", "public", "static", "void", "result", "synchronized", "trackers", "for", "Entry", "String", "Tracker", "t", "trackers", "entrySet", "LOG", "info", "Tracker", "t", "getKey", "t", "getValue", "size", "entry", "points", "for", "Trace", "trace", "t", "getValue", "values"], ["Override", "public", "MessageProcessResult", "process", "Message", "message", "Peer", "peer", "if", "log", "isDebugEnabled"], ["private", "void", "executeExternalManipulateScope", "CustomScriptConfiguration", "scriptConfiguration", "SpontaneousScopeExternalContext", "context", "try"], ["destination", "createDestination", "MessageProducer", "producer", "session", "createProducer", "destination", "producer", "setDeliveryMode", "DeliveryMode", "NON_PERSISTENT", "for", "int", "i", "i", "i", "BytesMessage", "message", "session", "createBytesMessage", "message", "writeBytes", "new", "byte", "producer", "send", "message", "Thread", "sleep", "String", "objectNameStr", "broker", "getBrokerObjectName", "toString", "objectNameStr", "service", "Health", "ObjectName", "brokerName", "assertRegisteredObjectName", "objectNameStr", "HealthViewMBean", "health", "MBeanServerInvocationHandler", "newProxyInstance", "mbeanServer", "brokerName", "HealthViewMBean", "class", "true", "List", "HealthStatus", "list", "health", "healthList", "for", "HealthStatus", "status", "list"], ["private", "static", "ProjectBranches", "synchronizeProjectBranches", "ServerApi", "serverApi", "String", "projectKey"], ["public", "SecurityToken", "mapSignInResponse", "RequestContext", "requestContext", "String", "trustedIdpRealm"], ["LOG", "debug", "Latch", "count", "down", "called", "start", "Wait", "for", "all", "the", "clients", "to", "finish", "LOG", "info", "Waiting", "for", "latch", "done", "await", "LOG", "info", "Latch", "complete", "LOG", "info", "FD", "count", "openFileDescriptorCount", "assertTrue", "Too", "many", "open", "file", "descriptors", "openFileDescriptorCount", "Wait", "waitFor", "new", "Wait", "Condition", "Override", "public", "boolean", "isSatisified", "throws", "Exception", "long", "openFDs", "openFileDescriptorCount"], ["public", "ReportConfigurationBean", "getSavedReport", "String", "reportName", "throws", "Exception", "try", "return", "reportingAdminServiceStub", "getSavedReport", "reportName", "catch", "Exception", "e", "String", "msg", "Unable", "get", "saved", "report"], ["Override", "public", "void", "connectionLost", "SocketAddress", "sa", "String", "msg", "lost", "memcached", "connection", "sa", "reconnecting"], ["Test", "timeout", "public", "void", "testForConnectionLeak", "throws", "Exception", "Integer", "expectedConnectionCount", "for", "int", "i", "i", "ITERATIONS", "i", "try", "if", "i"], ["private", "SessionId", "getLdapSessionId", "String", "sessionId", "if", "StringHelper", "isEmpty", "sessionId", "return", "null", "SessionId", "ldapSessionId", "sessionIdService", "getSessionId", "sessionId", "if", "ldapSessionId", "null"], ["public", "void", "error", "SAXParseException", "exception"], ["Override", "public", "void", "deleteEntitlement", "String", "name", "Query", "query", "em", "createQuery", "select", "e", "from", "Entitlement", "e", "where", "e", "name", "name", "query", "setParameter", "name", "name", "Object", "entitlementObj", "query", "getSingleResult", "em", "remove", "entitlementObj"], ["public", "Map", "UmaScriptByScope", "UmaAuthorizationContext", "checkNeedsInfo", "Claims", "claims", "Map", "Scope", "Boolean", "requestedScopes", "List", "UmaPermission", "permissions", "UmaPCT", "pct", "HttpServletRequest", "httpRequest", "Client", "client", "Map", "UmaScriptByScope", "UmaAuthorizationContext", "scriptMap", "new", "HashMap", "UmaScriptByScope", "UmaAuthorizationContext", "Map", "String", "String", "ticketAttributes", "new", "HashMap", "String", "String", "List", "ClaimDefinition", "missedClaims", "new", "ArrayList", "ClaimDefinition", "UmaAuthorizationContextBuilder", "contextBuilder", "new", "UmaAuthorizationContextBuilder", "appConfiguration", "attributeService", "resourceService", "permissions", "requestedScopes", "claims", "httpRequest", "sessionService", "userService", "permissionService", "client", "for", "Scope", "scope", "requestedScopes", "keySet", "List", "String", "authorizationPolicies", "scope", "getUmaAuthorizationPolicies", "if", "authorizationPolicies", "null", "authorizationPolicies", "isEmpty", "for", "String", "scriptDN", "authorizationPolicies"], ["SuppressWarnings", "unchecked", "rawtypes", "public", "static", "boolean", "registerNewMBean", "Class", "clazz", "Class", "interfaceClass", "boolean", "status", "false", "try", "String", "cName", "clazz", "getName", "if", "cName", "indexOf", "cName", "cName", "substring", "cName", "lastIndexOf", "replaceFirst"], ["ParameterizedTest", "ValueSource", "classes", "ChromeDriver", "class", "EdgeDriver", "class", "void", "testLatestAndBetaedgedriver", "Class", "extends", "WebDriver", "driverClass", "WebDriverManager", "wdm", "WebDriverManager", "getInstance", "driverClass", "avoidResolutionCache", "avoidBrowserDetection", "win", "wdm", "setup", "String", "edgedriverStable", "wdm", "getDownloadedDriverVersion"], ["public", "Object", "get", "String", "str", "Object", "r", "super", "get", "str"], ["Override", "public", "void", "onStreamEvent", "Notify", "notify"], ["Override", "public", "void", "failedToOpenIndex", "IndexDescriptor", "descriptor", "String", "action", "Exception", "cause", "if", "log", "isDebugEnabled"], ["public", "void", "addConfiguration", "Artifact", "configurationId"], ["if", "StringUtils", "isEmpty", "alias", "aliasId", "requestFocus", "DailogUtil", "showTipDailogCenter", "\u522b\u540d\u4e0d\u80fd\u4e3a\u7a7a", "getThisStage", "return", "\u4fee\u6539\u5bc6\u7801\u5e76\u5224\u65ad\u7ed3\u679c", "AccountKit", "accountKit", "InchainInstance", "getInstance", "getAccountKit", "Result", "result", "accountKit", "setAlias", "alias", "if", "result", "isSuccess", "if", "callback", "null", "callback", "ok", "null", "DailogUtil", "showTipDailogCenter", "result", "getMessage", "getThisStage", "resetAndclose", "else"], ["public", "static", "String", "resolve", "String", "url", "HttpServletRequest", "request", "if", "request", "null", "return", "url", "if", "isLocal", "url", "try", "URL", "urlValue", "new", "URL", "url", "URL", "updatedUrl", "new", "URL", "urlValue", "getProtocol", "urlValue", "getHost", "request", "getLocalPort", "urlValue", "getFile", "LOG", "debug", "URL", "updated", "to", "updatedUrl", "toString", "return", "updatedUrl", "toString", "catch", "MalformedURLException", "e"], ["Override", "public", "void", "visitTemplateClose", "String", "name", "long", "id", "tab"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "db2", "ToxiproxyContainer", "ContainerProxy", "db2ContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_DB2", "Db2Container", "db2", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "db2", "Db2Container", "DB2_PORT", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "db2", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "db2", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "db2", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedDb2ToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Override", "public", "void", "error", "String", "s", "Throwable", "throwable"], ["public", "boolean", "isValidSignoutAddress", "RequestContext", "context", "String", "endpointAddress", "String", "realm", "throws", "Exception", "if", "endpointAddress", "null", "return", "true", "Idp", "idpConfig", "Idp", "WebUtils", "getAttributeFromFlowScope", "context", "idpConfig", "if", "idpConfig", "isDisableLogoutAddressValidation", "return", "true", "Application", "serviceConfig", "idpConfig", "findApplication", "realm", "if", "serviceConfig", "null"], ["void", "exercise", "WebDriver", "driver", "String", "sutUrl", "String", "expectedTitleContains", "throws", "Exception", "driver", "get", "sutUrl", "Wait", "WebDriver", "wait", "new", "WebDriverWait", "driver", "Duration", "ofSeconds", "wait", "until", "d", "d", "getTitle", "contains", "expectedTitleContains", "URL", "dockerSessionUrl", "wdm", "getDockerNoVncUrl", "driver"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "aerospike", "ToxiproxyContainer", "ContainerProxy", "aerospikeContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "GenericContainer", "aerospike", "AerospikeProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "aerospike", "properties", "port", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "aerospike", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "aerospike", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "aerospike", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedAerospikeToxiProxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["Override", "protected", "Void", "processItem", "List", "PublishedPointVO", "subgroup", "int", "itemId", "throws", "Exception", "long", "startTs", "0L", "if", "log", "isInfoEnabled", "startTs", "Common", "timer", "currentTimeMillis"], ["Bean", "ConditionalOnToxiProxyEnabled", "module", "keycloak", "ToxiproxyContainer", "ContainerProxy", "keycloakContainerProxy", "ToxiproxyContainer", "toxiproxyContainer", "Qualifier", "BEAN_NAME_EMBEDDED_KEYCLOAK", "KeycloakContainer", "keycloakContainer", "KeycloakProperties", "properties", "ConfigurableEnvironment", "environment", "ToxiproxyContainer", "ContainerProxy", "proxy", "toxiproxyContainer", "getProxy", "keycloakContainer", "keycloakContainer", "getHttpPort", "Map", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "keycloak", "toxiproxy", "host", "proxy", "getContainerIpAddress", "map", "put", "embedded", "keycloak", "toxiproxy", "port", "proxy", "getProxyPort", "map", "put", "embedded", "keycloak", "toxiproxy", "proxyName", "proxy", "getName", "MapPropertySource", "propertySource", "new", "MapPropertySource", "embeddedKeycloakToxiproxyInfo", "map", "environment", "getPropertySources", "addFirst", "propertySource"], ["raw", "buffer", "handling", "IoBuffer", "in", "IoBuffer", "message", "filter", "based", "on", "current", "connection", "state", "RTMP", "rtmp", "conn", "getState", "final", "byte", "connectionState", "conn", "getStateCode", "log", "trace", "connectionState", "RTMP", "states", "connectionState", "get", "the", "handshake", "OutboundHandshake", "handshake", "OutboundHandshake", "conn", "getAttribute", "RTMPConnection", "RTMP_HANDSHAKE", "switch", "connectionState", "case", "RTMP", "STATE_CONNECT", "log", "debug", "Handshake", "client", "phase", "size", "in", "remaining", "0x01", "in", "get", "usually", "0x03", "rtmp", "byte", "handshakeType", "in", "get"], ["private", "void", "handleException", "String", "msg", "Exception", "e", "MessageContext", "msgContext"], ["Override", "public", "void", "print", "String", "message"], ["requestBuffer", "setInt", "header", "length", "appendBuffer", "header", "int", "statusCode", "StatusCode", "OK", "getStatusCode", "String", "statusMessage", "StatusCode", "OK", "getStatusMessage", "We", "create", "a", "response", "for", "the", "client", "but", "we", "discard", "the", "request", "and", "therefore", "do", "not", "forward", "it", "ctx", "response", "setStatusCode", "statusCode", "ctx", "response", "setStatusMessage", "statusMessage", "ctx", "response", "headers", "add", "Content", "Length", "ctx", "request", "handler", "buffer", "loggingHandler", "appendRequestPayload", "buffer", "requestHeaders", "requestBuffer", "appendBuffer", "buffer", "MultiMap", "responseHeaders", "ctx", "response", "headers"], ["Logs", "details", "about", "the", "request", "error", "param", "response", "http", "response", "throws", "IOException", "on", "IO", "error", "throws", "ParseException", "on", "parse", "error", "public", "static", "void", "handleError", "HttpResponse", "response", "throws", "ParseException", "IOException", "log", "debug", "response", "getStatusLine", "toString", "HttpEntity", "entity", "response", "getEntity", "if", "entity", "null"], ["private", "void", "toggleNodeOrientation", "SuppressWarnings", "unused", "ObservableValue", "extends", "Toggle", "observable", "SuppressWarnings", "unused", "Toggle", "oldValue", "Toggle", "newValue", "if", "nodeOrientationLtr", "equals", "newValue", "settings", "userInterfaceOrientation", "set", "NodeOrientation", "LEFT_TO_RIGHT", "else", "if", "nodeOrientationRtl", "equals", "newValue", "settings", "userInterfaceOrientation", "set", "NodeOrientation", "RIGHT_TO_LEFT", "else"], ["if", "eventPublisherConfig", "null", "if", "log", "isDebugEnabled", "log", "debug", "Newly", "creating", "publisher", "configuration", "synchronized", "HL7EventPublisher", "class", "eventPublisherConfig", "new", "EventPublisherConfig", "DataPublisher", "loadBalancingDataPublisher", "try", "if", "serverConfig", "getSecureUrl", "null", "loadBalancingDataPublisher", "new", "DataPublisher", "DataEndpointConstants", "THRIFT_DATA_AGENT_TYPE", "serverConfig", "getUrl", "serverConfig", "getSecureUrl", "serverConfig", "getUsername", "serverConfig", "getPassword", "else", "loadBalancingDataPublisher", "new", "DataPublisher", "serverConfig", "getUrl", "serverConfig", "getUsername", "serverConfig", "getPassword", "catch", "DataEndpointAgentConfigurationException", "DataEndpointException", "DataEndpointConfigurationException", "DataEndpointAuthenticationException", "TransportException", "e", "String", "errorMsg", "Error", "occurred", "while", "creating", "data", "publisher"], ["public", "boolean", "getVersionMatches", "String", "version", "version", "version", "trim", "boolean", "result", "false", "if", "version", "endsWith", "version", "version", "substring", "version", "length", "trim"], ["Override", "public", "void", "resourceChanged", "String", "resourceUri", "Buffer", "resource", "if", "configResourceUri", "null", "configResourceUri", "equals", "resourceUri"], ["Override", "SuppressWarnings", "restriction", "protected", "Provider", "getProvider", "if", "this", "provider", "null", "The", "smartCardNameIndex", "int", "is", "added", "at", "the", "end", "of", "the", "smartCard", "name", "in", "order", "to", "enable", "the", "successive", "loading", "of", "multiple", "pkcs11", "libraries", "String", "aPKCS11LibraryFileName", "this", "getPkcs11Path", "aPKCS11LibraryFileName", "this", "escapePath", "aPKCS11LibraryFileName", "final", "StringBuilder", "pkcs11Config", "new", "StringBuilder", "pkcs11Config", "append", "name", "SmartCard", "append", "UUID", "randomUUID", "toString", "append", "n", "pkcs11Config", "append", "library", "append", "aPKCS11LibraryFileName", "append", "append", "n", "pkcs11Config", "append", "slotListIndex", "append", "this", "getSlotListIndex", "final", "String", "configString", "pkcs11Config", "toString"], ["Override", "public", "void", "onException", "Message", "message", "Exception", "exception"], ["public", "void", "saveReport", "ReportConfigurationBean", "configuration", "throws", "Exception", "try", "reportingAdminServiceStub", "saveReport", "configuration", "catch", "Exception", "e", "String", "msg", "Unable", "to", "save", "report"], ["do", "a", "few", "quick", "requests", "for", "int", "count", "count", "count", "delete", "res", "count", "given", "body", "name", "test", "count", "put", "res", "count", "then", "assertThat", "statusCode", "get", "res", "count", "then", "assertThat", "statusCode", "do", "another", "requests", "for", "int", "count", "count", "count", "given", "body", "name", "test", "count", "put", "newres", "count", "then", "assertThat", "statusCode", "wait", "a", "sec", "TestUtils", "waitSomeTime", "read", "the", "jmx", "infos", "if", "mbs", "isRegistered", "beanNameObject"], ["protected", "void", "handleException", "String", "msg", "Exception", "e"], ["Override", "public", "void", "corruptedLogFile", "long", "version", "Throwable", "t"], ["private", "void", "restrictTopics", "String", "username", "Collection", "String", "topics", "if", "topics", "isEmpty"], ["Override", "public", "void", "encode", "IoSession", "session", "Object", "message", "ProtocolEncoderOutput", "out", "throws", "ProtocolCodecException", "if", "log", "isDebugEnabled"], ["public", "SonarLintInputFile", "create", "ClientInputFile", "inputFile", "var", "defaultInputFile", "new", "SonarLintInputFile", "inputFile", "f", "LOG", "debug", "Initializing", "metadata", "of", "file", "f", "uri", "var", "charset", "f", "charset", "InputStream", "stream", "try", "stream", "f", "inputStream", "catch", "IOException", "e", "throw", "new", "IllegalStateException", "Failed", "to", "open", "a", "stream", "on", "file", "f", "uri", "e", "return", "fileMetadata", "readMetadata", "stream", "charset", "null", "charset", "Charset", "defaultCharset", "f", "uri", "null", "defaultInputFile", "setType", "inputFile", "isTest", "Type", "TEST", "Type", "MAIN", "var", "fileLanguage", "inputFile", "language", "if", "fileLanguage", "null"], ["private", "boolean", "checkValidity", "String", "key", "String", "value", "Date", "expirationDate", "long", "now", "new", "Date", "getTime", "long", "expirationTime", "expirationDate", "null", "expirationDate", "getTime", "boolean", "isValid", "value", "null", "expirationTime", "expirationTime", "now", "if", "isValid"], ["private", "void", "skipMessage", "String", "prefix", "MessageReference", "msgRef"], ["Override", "public", "void", "connectionEstablished", "SocketAddress", "sa", "int", "reconnectCount", "String", "msg", "successfully", "established", "a", "memcache", "connection", "to", "sa", "if", "reconnectCount", "msg", "after", "reconnectCount", "retries"], ["protected", "void", "logError", "Object", "service", "Throwable", "e", "Logger", "log", "LoggerFactory", "getLogger", "service", "getClass"], ["Test", "public", "void", "testConnectionFailures", "throws", "Exception", "final", "CountDownLatch", "failed", "new", "CountDownLatch", "Connection", "connection", "pooledConnFact", "createConnection"], ["Override", "public", "void", "onMessage", "Message", "message"], ["selectors", "add", "actionSelector", "action", "value", "selectors", "add", "topicSelector", "topic", "selectors", "add", "activeSelector", "applicationContext", "MessageFilter", "filter", "new", "MessageFilter", "selectors", "filter", "setDiscardChannel", "nullChannel", "initializeBean", "filter", "List", "MessageHandler", "handlers", "new", "ArrayList", "handlers", "add", "filter", "handlers", "add", "serviceActivator", "MessageHandlerChain", "chain", "new", "MessageHandlerChain", "chain", "setHandlers", "handlers", "chain", "setComponentName", "componentName", "initializeBean", "chain", "if", "channel", "subscribe", "chain"], ["inheritDoc", "public", "boolean", "canHandle", "File", "file", "boolean", "valid", "false", "if", "file", "exists", "String", "absPath", "file", "getAbsolutePath", "toLowerCase", "int", "dotIndex", "absPath", "lastIndexOf", "if", "dotIndex", "String", "fileExt", "absPath", "substring", "dotIndex"], ["Test", "public", "void", "testYouTubePublish", "throws", "InterruptedException", "log", "info", "ntestYouTubePublish", "String", "youtubeHost", "a", "rtmp", "youtube", "com", "int", "youtubePort", "String", "youtubeApp", "live2", "System", "getProperty", "youtube", "streamname", "final", "String", "youtubePublishName", "dybx", "y3ph", "uqzx", "30vx"], ["public", "void", "ioException", "IOException", "e", "if", "LOG", "isDebugEnabled"], ["private", "void", "registerEnvironment", "GenericContainer", "artifactory", "ConfigurableEnvironment", "environment", "ArtifactoryProperties", "properties", "Integer", "mappedPort", "artifactory", "getMappedPort", "properties", "generalPort", "String", "host", "artifactory", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "artifactory", "host", "host", "map", "put", "embedded", "artifactory", "port", "mappedPort", "map", "put", "embedded", "artifactory", "username", "properties", "getUsername", "map", "put", "embedded", "artifactory", "password", "properties", "getPassword"], ["Override", "public", "void", "removeRoute", "String", "urlPattern"], ["public", "Response", "gatherClaims", "String", "clientId", "String", "ticket", "String", "claimRedirectUri", "String", "state", "Boolean", "reset", "Boolean", "authenticationRedirect", "HttpServletRequest", "httpRequest", "HttpServletResponse", "httpResponse", "try"], ["Override", "public", "ByteBuffer", "targetBytes", "String", "name", "long", "id", "int", "length"], ["public", "void", "unloading", "Artifact", "configurationId"], ["public", "void", "abortConnection", "ObjectName", "consumerToAbort", "Subscription", "sub", "broker", "getSubscriber", "consumerToAbort", "if", "sub", "null", "LOG", "info", "aborting", "consumer", "connection", "via", "jmx", "sub", "getConsumerInfo", "getConsumerId", "getConnectionId", "strategy", "abortConsumer", "sub", "true", "else"], ["public", "void", "starting", "Artifact", "configurationId"], ["Test", "void", "testCachePathStartsWithTilde", "String", "customPath", "webdrivers", "wdm", "config", "setCachePath", "customPath", "String", "cachePath", "wdm", "config", "getCachePath"], ["public", "void", "onFailure", "IOException", "e", "if", "shuttingDown", "get"], ["ParameterizedTest", "MethodSource", "data", "void", "testCli", "String", "browser", "String", "driver"], ["throws", "ServletException", "SuppressWarnings", "deprecation", "Override", "public", "void", "start", "throws", "ServletException", "log", "info", "Loading", "RTMPS", "context", "rtmpsEngine", "new", "StandardEngine", "rtmpsEngine", "setName", "red5RTMPSEngine", "rtmpsEngine", "setDefaultHost", "host", "getName", "rtmpsEngine", "setRealm", "embedded", "getEngine", "getRealm", "Service", "service", "new", "StandardService", "service", "setName", "red5RTMPSEngine", "service", "setContainer", "rtmpsEngine", "add", "the", "valves", "to", "the", "host", "for", "Valve", "valve", "valves"], ["public", "void", "loading", "Artifact", "configurationId"], ["private", "void", "assertIEDriver", "File", "driver", "new", "File", "wdm", "getDownloadedDriverPath"], ["private", "void", "registerMSSQLServerEnvironment", "MSSQLServerContainer", "mssqlServerContainer", "ConfigurableEnvironment", "environment", "MSSQLServerProperties", "properties", "Integer", "mappedPort", "mssqlServerContainer", "getMappedPort", "MSSQLServerContainer", "MS_SQL_SERVER_PORT", "String", "host", "mssqlServerContainer", "getHost", "LinkedHashMap", "String", "Object", "map", "new", "LinkedHashMap", "map", "put", "embedded", "mssqlserver", "port", "mappedPort", "map", "put", "embedded", "mssqlserver", "host", "host", "Database", "and", "user", "cannot", "be", "chosen", "when", "starting", "the", "MSSQL", "image", "map", "put", "embedded", "mssqlserver", "database", "master", "map", "put", "embedded", "mssqlserver", "user", "sa", "map", "put", "embedded", "mssqlserver", "password", "properties", "getPassword", "String", "jdbcURL", "jdbc", "sqlserver", "databaseName", "trustServerCertificate", "true"], ["Test", "groups", "wso2", "esb", "description", "Tests", "System", "Logs", "public", "void", "testSystemLogs", "throws", "Exception", "CarbonLogReader", "carbonLogReader", "new", "CarbonLogReader", "carbonLogReader", "start", "OMElement", "response", "axis2Client", "sendSimpleStockQuoteRequest", "getProxyServiceURLHttp", "logMediatorLevelTestProxy", "null", "WSO2", "Assert", "assertTrue", "response", "toString", "contains", "WSO2"], ["public", "void", "slf4j", "Logger", "log", "DataClass", "tainted", "String", "tainted2", "String", "safe", "Unsafe", "log", "info", "tainted", "input"], ["Override", "public", "void", "info", "String", "s", "Throwable", "throwable"], ["public", "void", "input", "byte", "buf", "int", "len", "if", "LOG", "isDebugEnabled"], ["Override", "protected", "ModelAndView", "doResolveException", "HttpServletRequest", "request", "HttpServletResponse", "response", "Object", "handler", "Exception", "ex"], ["Get", "CSV", "from", "Yahoo", "log", "info", "Sending", "request", "url", "URL", "request", "new", "URL", "url", "RedirectableRequest", "redirectableRequest", "new", "RedirectableRequest", "request", "redirectableRequest", "setConnectTimeout", "YahooFinance", "CONNECTION_TIMEOUT", "redirectableRequest", "setReadTimeout", "YahooFinance", "CONNECTION_TIMEOUT", "Map", "String", "String", "requestProperties", "new", "HashMap", "String", "String", "requestProperties", "put", "Cookie", "CrumbManager", "getCookie", "URLConnection", "connection", "redirectableRequest", "openConnection", "requestProperties", "InputStreamReader", "is", "new", "InputStreamReader", "connection", "getInputStream", "BufferedReader", "br", "new", "BufferedReader", "is", "skip", "the", "first", "line", "br", "readLine", "Parse", "CSV", "for", "String", "line", "br", "readLine", "line", "null", "line", "br", "readLine"], ["Test", "public", "void", "testFLVReaderFileWithPreProcessInfo", "log", "info", "n", "testFLVReaderFileWithPreProcessInfo", "Path", "path", "Paths", "get", "target", "test", "classes", "fixtures", "flv1_nelly", "flv", "Path", "path", "Paths", "get", "target", "test", "classes", "fixtures", "webrtctestrecord", "flv", "try", "File", "file", "path", "toFile", "log", "info", "Reading", "file", "getName", "FLVReader", "reader", "new", "FLVReader", "file", "true", "KeyFrameMeta", "meta", "reader", "analyzeKeyFrames", "log", "debug", "Meta", "meta", "ITag", "tag", "null", "for", "int", "t", "t", "t", "tag", "reader", "readTag"], ["private", "void", "assertIEDriver", "File", "driver", "new", "File", "wdm", "getDownloadedDriverPath"]], "label": [[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0]]}